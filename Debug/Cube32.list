
Cube32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c314  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a0  0800c4c8  0800c4c8  0001c4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e568  0800e568  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800e568  0800e568  0001e568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e570  0800e570  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e570  0800e570  0001e570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800e578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020290  2**0
                  CONTENTS
 10 .bss          00000504  20000290  20000290  00020290  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000794  20000794  00020290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001feb1  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000415e  00000000  00000000  00040171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  000442d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017b8  00000000  00000000  00045c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b46  00000000  00000000  00047400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db94  00000000  00000000  0006ff46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e933d  00000000  00000000  0008dada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00176e17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d58  00000000  00000000  00176e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000290 	.word	0x20000290
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c4ac 	.word	0x0800c4ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000294 	.word	0x20000294
 80001ec:	0800c4ac 	.word	0x0800c4ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <do_move>:
	{-START_COORDS, START_COORDS, START_COORDS},
	{START_COORDS, START_COORDS, START_COORDS},
	{START_COORDS, -START_COORDS, START_COORDS},
};

void do_move(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	//rotation.x = rotation.x + 0.005;
	rotation.y = rotation.y + 0.05;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <do_move+0x38>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fafd 	bl	8000568 <__aeabi_f2d>
 8000f6e:	a308      	add	r3, pc, #32	; (adr r3, 8000f90 <do_move+0x30>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff f99a 	bl	80002ac <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fe22 	bl	8000bc8 <__aeabi_d2f>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <do_move+0x38>)
 8000f88:	6053      	str	r3, [r2, #4]
//	rotation.z = rotation.z + 0.001;
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	9999999a 	.word	0x9999999a
 8000f94:	3fa99999 	.word	0x3fa99999
 8000f98:	200002ac 	.word	0x200002ac

08000f9c <draw_cube>:

void draw_cube(){
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b09f      	sub	sp, #124	; 0x7c
 8000fa0:	af00      	add	r7, sp, #0
	Point3D draw_points[8];

	for(int i = 0; i < 8; i++){
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	677b      	str	r3, [r7, #116]	; 0x74
 8000fa6:	e03a      	b.n	800101e <draw_cube+0x82>
		draw_points[i] = rotate(points[i], rotation);
 8000fa8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f1a3 0474 	sub.w	r4, r3, #116	; 0x74
 8000fbc:	4b57      	ldr	r3, [pc, #348]	; (800111c <draw_cube+0x180>)
 8000fbe:	ed93 5a00 	vldr	s10, [r3]
 8000fc2:	edd3 5a01 	vldr	s11, [r3, #4]
 8000fc6:	ed93 6a02 	vldr	s12, [r3, #8]
 8000fca:	4955      	ldr	r1, [pc, #340]	; (8001120 <draw_cube+0x184>)
 8000fcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	edd3 6a00 	vldr	s13, [r3]
 8000fdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fe0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fe4:	eef0 1a45 	vmov.f32	s3, s10
 8000fe8:	eeb0 2a65 	vmov.f32	s4, s11
 8000fec:	eef0 2a46 	vmov.f32	s5, s12
 8000ff0:	eeb0 0a66 	vmov.f32	s0, s13
 8000ff4:	eef0 0a47 	vmov.f32	s1, s14
 8000ff8:	eeb0 1a67 	vmov.f32	s2, s15
 8000ffc:	f000 faca 	bl	8001594 <rotate>
 8001000:	eef0 6a40 	vmov.f32	s13, s0
 8001004:	eeb0 7a60 	vmov.f32	s14, s1
 8001008:	eef0 7a41 	vmov.f32	s15, s2
 800100c:	edc4 6a00 	vstr	s13, [r4]
 8001010:	ed84 7a01 	vstr	s14, [r4, #4]
 8001014:	edc4 7a02 	vstr	s15, [r4, #8]
	for(int i = 0; i < 8; i++){
 8001018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800101a:	3301      	adds	r3, #1
 800101c:	677b      	str	r3, [r7, #116]	; 0x74
 800101e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001020:	2b07      	cmp	r3, #7
 8001022:	ddc1      	ble.n	8000fa8 <draw_cube+0xc>
	}

	for(int i = 0; i < 8; i++){
 8001024:	2300      	movs	r3, #0
 8001026:	673b      	str	r3, [r7, #112]	; 0x70
 8001028:	e03c      	b.n	80010a4 <draw_cube+0x108>
		draw_points[i] = translate(draw_points[i], position);
 800102a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001038:	4413      	add	r3, r2
 800103a:	f1a3 0474 	sub.w	r4, r3, #116	; 0x74
 800103e:	4b39      	ldr	r3, [pc, #228]	; (8001124 <draw_cube+0x188>)
 8001040:	ed93 5a00 	vldr	s10, [r3]
 8001044:	edd3 5a01 	vldr	s11, [r3, #4]
 8001048:	ed93 6a02 	vldr	s12, [r3, #8]
 800104c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800105a:	4413      	add	r3, r2
 800105c:	3b74      	subs	r3, #116	; 0x74
 800105e:	edd3 6a00 	vldr	s13, [r3]
 8001062:	ed93 7a01 	vldr	s14, [r3, #4]
 8001066:	edd3 7a02 	vldr	s15, [r3, #8]
 800106a:	eef0 1a45 	vmov.f32	s3, s10
 800106e:	eeb0 2a65 	vmov.f32	s4, s11
 8001072:	eef0 2a46 	vmov.f32	s5, s12
 8001076:	eeb0 0a66 	vmov.f32	s0, s13
 800107a:	eef0 0a47 	vmov.f32	s1, s14
 800107e:	eeb0 1a67 	vmov.f32	s2, s15
 8001082:	f000 fa39 	bl	80014f8 <translate>
 8001086:	eef0 6a40 	vmov.f32	s13, s0
 800108a:	eeb0 7a60 	vmov.f32	s14, s1
 800108e:	eef0 7a41 	vmov.f32	s15, s2
 8001092:	edc4 6a00 	vstr	s13, [r4]
 8001096:	ed84 7a01 	vstr	s14, [r4, #4]
 800109a:	edc4 7a02 	vstr	s15, [r4, #8]
	for(int i = 0; i < 8; i++){
 800109e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010a0:	3301      	adds	r3, #1
 80010a2:	673b      	str	r3, [r7, #112]	; 0x70
 80010a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	ddbf      	ble.n	800102a <draw_cube+0x8e>
	}

	for(int i = 0; i < 8; i++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010ae:	e02f      	b.n	8001110 <draw_cube+0x174>
		draw_points[i] = apply_perspective(draw_points[i]);
 80010b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80010be:	4413      	add	r3, r2
 80010c0:	f1a3 0474 	sub.w	r4, r3, #116	; 0x74
 80010c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80010d2:	4413      	add	r3, r2
 80010d4:	3b74      	subs	r3, #116	; 0x74
 80010d6:	edd3 6a00 	vldr	s13, [r3]
 80010da:	ed93 7a01 	vldr	s14, [r3, #4]
 80010de:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e2:	eeb0 0a66 	vmov.f32	s0, s13
 80010e6:	eef0 0a47 	vmov.f32	s1, s14
 80010ea:	eeb0 1a67 	vmov.f32	s2, s15
 80010ee:	f000 fd2b 	bl	8001b48 <apply_perspective>
 80010f2:	eef0 6a40 	vmov.f32	s13, s0
 80010f6:	eeb0 7a60 	vmov.f32	s14, s1
 80010fa:	eef0 7a41 	vmov.f32	s15, s2
 80010fe:	edc4 6a00 	vstr	s13, [r4]
 8001102:	ed84 7a01 	vstr	s14, [r4, #4]
 8001106:	edc4 7a02 	vstr	s15, [r4, #8]
	for(int i = 0; i < 8; i++){
 800110a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800110c:	3301      	adds	r3, #1
 800110e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001112:	2b07      	cmp	r3, #7
 8001114:	ddcc      	ble.n	80010b0 <draw_cube+0x114>
	}

	for(int i = 0; i < 8; i++){
 8001116:	2300      	movs	r3, #0
 8001118:	66bb      	str	r3, [r7, #104]	; 0x68
 800111a:	e035      	b.n	8001188 <draw_cube+0x1ec>
 800111c:	200002ac 	.word	0x200002ac
 8001120:	2000000c 	.word	0x2000000c
 8001124:	20000000 	.word	0x20000000
		draw_points[i] = center_screen(draw_points[i]);
 8001128:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001136:	4413      	add	r3, r2
 8001138:	f1a3 0474 	sub.w	r4, r3, #116	; 0x74
 800113c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800114a:	4413      	add	r3, r2
 800114c:	3b74      	subs	r3, #116	; 0x74
 800114e:	edd3 6a00 	vldr	s13, [r3]
 8001152:	ed93 7a01 	vldr	s14, [r3, #4]
 8001156:	edd3 7a02 	vldr	s15, [r3, #8]
 800115a:	eeb0 0a66 	vmov.f32	s0, s13
 800115e:	eef0 0a47 	vmov.f32	s1, s14
 8001162:	eeb0 1a67 	vmov.f32	s2, s15
 8001166:	f000 fd41 	bl	8001bec <center_screen>
 800116a:	eef0 6a40 	vmov.f32	s13, s0
 800116e:	eeb0 7a60 	vmov.f32	s14, s1
 8001172:	eef0 7a41 	vmov.f32	s15, s2
 8001176:	edc4 6a00 	vstr	s13, [r4]
 800117a:	ed84 7a01 	vstr	s14, [r4, #4]
 800117e:	edc4 7a02 	vstr	s15, [r4, #8]
	for(int i = 0; i < 8; i++){
 8001182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001184:	3301      	adds	r3, #1
 8001186:	66bb      	str	r3, [r7, #104]	; 0x68
 8001188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800118a:	2b07      	cmp	r3, #7
 800118c:	ddcc      	ble.n	8001128 <draw_cube+0x18c>
	}

	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	f002 fac1 	bl	8003718 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001196:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800119a:	f002 fa75 	bl	8003688 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(draw_points[0].x, draw_points[0].y, draw_points[1].x, draw_points[1].y);
 800119e:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a6:	ee17 3a90 	vmov	r3, s15
 80011aa:	b298      	uxth	r0, r3
 80011ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b4:	ee17 3a90 	vmov	r3, s15
 80011b8:	b299      	uxth	r1, r3
 80011ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80011be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c2:	ee17 3a90 	vmov	r3, s15
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d0:	ee17 3a90 	vmov	r3, s15
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f002 fc1f 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[1].x, draw_points[1].y, draw_points[2].x, draw_points[2].y);
 80011da:	edd7 7a04 	vldr	s15, [r7, #16]
 80011de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e2:	ee17 3a90 	vmov	r3, s15
 80011e6:	b298      	uxth	r0, r3
 80011e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f0:	ee17 3a90 	vmov	r3, s15
 80011f4:	b299      	uxth	r1, r3
 80011f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fe:	ee17 3a90 	vmov	r3, s15
 8001202:	b29a      	uxth	r2, r3
 8001204:	edd7 7a08 	vldr	s15, [r7, #32]
 8001208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800120c:	ee17 3a90 	vmov	r3, s15
 8001210:	b29b      	uxth	r3, r3
 8001212:	f002 fc01 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[2].x, draw_points[2].y, draw_points[3].x, draw_points[3].y);
 8001216:	edd7 7a07 	vldr	s15, [r7, #28]
 800121a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121e:	ee17 3a90 	vmov	r3, s15
 8001222:	b298      	uxth	r0, r3
 8001224:	edd7 7a08 	vldr	s15, [r7, #32]
 8001228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122c:	ee17 3a90 	vmov	r3, s15
 8001230:	b299      	uxth	r1, r3
 8001232:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123a:	ee17 3a90 	vmov	r3, s15
 800123e:	b29a      	uxth	r2, r3
 8001240:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001248:	ee17 3a90 	vmov	r3, s15
 800124c:	b29b      	uxth	r3, r3
 800124e:	f002 fbe3 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[3].x, draw_points[3].y, draw_points[0].x, draw_points[0].y);
 8001252:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800125a:	ee17 3a90 	vmov	r3, s15
 800125e:	b298      	uxth	r0, r3
 8001260:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	b299      	uxth	r1, r3
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001276:	ee17 3a90 	vmov	r3, s15
 800127a:	b29a      	uxth	r2, r3
 800127c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	ee17 3a90 	vmov	r3, s15
 8001288:	b29b      	uxth	r3, r3
 800128a:	f002 fbc5 	bl	8003a18 <BSP_LCD_DrawLine>

	BSP_LCD_DrawLine(draw_points[4].x, draw_points[4].y, draw_points[5].x, draw_points[5].y);
 800128e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001296:	ee17 3a90 	vmov	r3, s15
 800129a:	b298      	uxth	r0, r3
 800129c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	b299      	uxth	r1, r3
 80012aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80012ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b2:	ee17 3a90 	vmov	r3, s15
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	ee17 3a90 	vmov	r3, s15
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f002 fba7 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[5].x, draw_points[5].y, draw_points[6].x, draw_points[6].y);
 80012ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80012ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d2:	ee17 3a90 	vmov	r3, s15
 80012d6:	b298      	uxth	r0, r3
 80012d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80012dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e0:	ee17 3a90 	vmov	r3, s15
 80012e4:	b299      	uxth	r1, r3
 80012e6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80012ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ee:	ee17 3a90 	vmov	r3, s15
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80012f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fc:	ee17 3a90 	vmov	r3, s15
 8001300:	b29b      	uxth	r3, r3
 8001302:	f002 fb89 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[6].x, draw_points[6].y, draw_points[7].x, draw_points[7].y);
 8001306:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800130a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130e:	ee17 3a90 	vmov	r3, s15
 8001312:	b298      	uxth	r0, r3
 8001314:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131c:	ee17 3a90 	vmov	r3, s15
 8001320:	b299      	uxth	r1, r3
 8001322:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132a:	ee17 3a90 	vmov	r3, s15
 800132e:	b29a      	uxth	r2, r3
 8001330:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001338:	ee17 3a90 	vmov	r3, s15
 800133c:	b29b      	uxth	r3, r3
 800133e:	f002 fb6b 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[7].x, draw_points[7].y, draw_points[4].x, draw_points[4].y);
 8001342:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134a:	ee17 3a90 	vmov	r3, s15
 800134e:	b298      	uxth	r0, r3
 8001350:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001358:	ee17 3a90 	vmov	r3, s15
 800135c:	b299      	uxth	r1, r3
 800135e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001366:	ee17 3a90 	vmov	r3, s15
 800136a:	b29a      	uxth	r2, r3
 800136c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001374:	ee17 3a90 	vmov	r3, s15
 8001378:	b29b      	uxth	r3, r3
 800137a:	f002 fb4d 	bl	8003a18 <BSP_LCD_DrawLine>

	BSP_LCD_DrawLine(draw_points[0].x, draw_points[0].y, draw_points[4].x, draw_points[4].y);
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001386:	ee17 3a90 	vmov	r3, s15
 800138a:	b298      	uxth	r0, r3
 800138c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001394:	ee17 3a90 	vmov	r3, s15
 8001398:	b299      	uxth	r1, r3
 800139a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800139e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a2:	ee17 3a90 	vmov	r3, s15
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80013ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b0:	ee17 3a90 	vmov	r3, s15
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f002 fb2f 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[1].x, draw_points[1].y, draw_points[5].x, draw_points[5].y);
 80013ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80013be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c2:	ee17 3a90 	vmov	r3, s15
 80013c6:	b298      	uxth	r0, r3
 80013c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d0:	ee17 3a90 	vmov	r3, s15
 80013d4:	b299      	uxth	r1, r3
 80013d6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80013da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013de:	ee17 3a90 	vmov	r3, s15
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ec:	ee17 3a90 	vmov	r3, s15
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f002 fb11 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[2].x, draw_points[2].y, draw_points[6].x, draw_points[6].y);
 80013f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fe:	ee17 3a90 	vmov	r3, s15
 8001402:	b298      	uxth	r0, r3
 8001404:	edd7 7a08 	vldr	s15, [r7, #32]
 8001408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800140c:	ee17 3a90 	vmov	r3, s15
 8001410:	b299      	uxth	r1, r3
 8001412:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b29a      	uxth	r2, r3
 8001420:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	b29b      	uxth	r3, r3
 800142e:	f002 faf3 	bl	8003a18 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(draw_points[3].x, draw_points[3].y, draw_points[7].x, draw_points[7].y);
 8001432:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b298      	uxth	r0, r3
 8001440:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	ee17 3a90 	vmov	r3, s15
 800144c:	b299      	uxth	r1, r3
 800144e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001456:	ee17 3a90 	vmov	r3, s15
 800145a:	b29a      	uxth	r2, r3
 800145c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001464:	ee17 3a90 	vmov	r3, s15
 8001468:	b29b      	uxth	r3, r3
 800146a:	f002 fad5 	bl	8003a18 <BSP_LCD_DrawLine>

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800146e:	481a      	ldr	r0, [pc, #104]	; (80014d8 <draw_cube+0x53c>)
 8001470:	f002 f90a 	bl	8003688 <BSP_LCD_SetTextColor>
	for(int i = 0; i < 8; i++){
 8001474:	2300      	movs	r3, #0
 8001476:	667b      	str	r3, [r7, #100]	; 0x64
 8001478:	e026      	b.n	80014c8 <draw_cube+0x52c>
		BSP_LCD_FillCircle(draw_points[i].x, draw_points[i].y, 5);
 800147a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001488:	4413      	add	r3, r2
 800148a:	3b74      	subs	r3, #116	; 0x74
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001494:	ee17 3a90 	vmov	r3, s15
 8001498:	b298      	uxth	r0, r3
 800149a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80014a8:	4413      	add	r3, r2
 80014aa:	3b70      	subs	r3, #112	; 0x70
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b4:	ee17 3a90 	vmov	r3, s15
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2205      	movs	r2, #5
 80014bc:	4619      	mov	r1, r3
 80014be:	f002 fc5f 	bl	8003d80 <BSP_LCD_FillCircle>
	for(int i = 0; i < 8; i++){
 80014c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c4:	3301      	adds	r3, #1
 80014c6:	667b      	str	r3, [r7, #100]	; 0x64
 80014c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	ddd5      	ble.n	800147a <draw_cube+0x4de>
	}
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	377c      	adds	r7, #124	; 0x7c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	ffff0000 	.word	0xffff0000

080014dc <calculate_z0>:
 *  Created on: Dec 20, 2021
 *      Author: felipe
 */
#include "cube_utils.h"

float calculate_z0(){
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	return ((RESOLUTION_X / 2.0) / tan((FIELD_OF_VIEW / 2.0) * PI / 180.0));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <calculate_z0+0x18>)
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	4390da52 	.word	0x4390da52

080014f8 <translate>:

Point3D translate(Point3D original, Point3D translation){
 80014f8:	b480      	push	{r7}
 80014fa:	b091      	sub	sp, #68	; 0x44
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	eeb0 5a40 	vmov.f32	s10, s0
 8001502:	eef0 5a60 	vmov.f32	s11, s1
 8001506:	eeb0 6a41 	vmov.f32	s12, s2
 800150a:	eef0 6a61 	vmov.f32	s13, s3
 800150e:	eeb0 7a42 	vmov.f32	s14, s4
 8001512:	eef0 7a62 	vmov.f32	s15, s5
 8001516:	ed87 5a07 	vstr	s10, [r7, #28]
 800151a:	edc7 5a08 	vstr	s11, [r7, #32]
 800151e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001522:	edc7 6a04 	vstr	s13, [r7, #16]
 8001526:	ed87 7a05 	vstr	s14, [r7, #20]
 800152a:	edc7 7a06 	vstr	s15, [r7, #24]
	Point3D res;
	res.x = original.x + translation.x;
 800152e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001532:	edd7 7a04 	vldr	s15, [r7, #16]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	res.y = original.y + translation.y;
 800153e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001542:	edd7 7a05 	vldr	s15, [r7, #20]
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	res.z = original.z + translation.z;
 800154e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001552:	edd7 7a06 	vldr	s15, [r7, #24]
 8001556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	return res;
 800155e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001562:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001566:	ca07      	ldmia	r2, {r0, r1, r2}
 8001568:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800156c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800156e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001572:	ee06 1a90 	vmov	s13, r1
 8001576:	ee07 2a10 	vmov	s14, r2
 800157a:	ee07 3a90 	vmov	s15, r3
}
 800157e:	eeb0 0a66 	vmov.f32	s0, s13
 8001582:	eef0 0a47 	vmov.f32	s1, s14
 8001586:	eeb0 1a67 	vmov.f32	s2, s15
 800158a:	3744      	adds	r7, #68	; 0x44
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <rotate>:

Point3D rotate(Point3D original, Point3D rotation){
 8001594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001598:	ed2d 8b02 	vpush	{d8}
 800159c:	b092      	sub	sp, #72	; 0x48
 800159e:	af00      	add	r7, sp, #0
 80015a0:	eeb0 5a40 	vmov.f32	s10, s0
 80015a4:	eef0 5a60 	vmov.f32	s11, s1
 80015a8:	eeb0 6a41 	vmov.f32	s12, s2
 80015ac:	eef0 6a61 	vmov.f32	s13, s3
 80015b0:	eeb0 7a42 	vmov.f32	s14, s4
 80015b4:	eef0 7a62 	vmov.f32	s15, s5
 80015b8:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 80015bc:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 80015c0:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 80015c4:	edc7 6a06 	vstr	s13, [r7, #24]
 80015c8:	ed87 7a07 	vstr	s14, [r7, #28]
 80015cc:	edc7 7a08 	vstr	s15, [r7, #32]
	Point3D res;
	res.x = original.x * (cos(rotation.z) * cos(rotation.y)) +
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffc8 	bl	8000568 <__aeabi_f2d>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffc2 	bl	8000568 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	ec43 2b10 	vmov	d0, r2, r3
 80015ec:	f009 fed8 	bl	800b3a0 <cos>
 80015f0:	ec59 8b10 	vmov	r8, r9, d0
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffb6 	bl	8000568 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b10 	vmov	d0, r2, r3
 8001604:	f009 fecc 	bl	800b3a0 <cos>
 8001608:	ec53 2b10 	vmov	r2, r3, d0
 800160c:	4640      	mov	r0, r8
 800160e:	4649      	mov	r1, r9
 8001610:	f7ff f802 	bl	8000618 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe fffc 	bl	8000618 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4692      	mov	sl, r2
 8001626:	469b      	mov	fp, r3
					 original.y * (cos(rotation.z) * sin(rotation.y) * sin(rotation.x) - sin(rotation.z) * cos(rotation.x)) +
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff9c 	bl	8000568 <__aeabi_f2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff96 	bl	8000568 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	ec43 2b10 	vmov	d0, r2, r3
 8001644:	f009 feac 	bl	800b3a0 <cos>
 8001648:	ec55 4b10 	vmov	r4, r5, d0
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff8a 	bl	8000568 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	ec43 2b10 	vmov	d0, r2, r3
 800165c:	f009 fef0 	bl	800b440 <sin>
 8001660:	ec53 2b10 	vmov	r2, r3, d0
 8001664:	4620      	mov	r0, r4
 8001666:	4629      	mov	r1, r5
 8001668:	f7fe ffd6 	bl	8000618 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4614      	mov	r4, r2
 8001672:	461d      	mov	r5, r3
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff76 	bl	8000568 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	ec43 2b10 	vmov	d0, r2, r3
 8001684:	f009 fedc 	bl	800b440 <sin>
 8001688:	ec53 2b10 	vmov	r2, r3, d0
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe ffc2 	bl	8000618 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4614      	mov	r4, r2
 800169a:	461d      	mov	r5, r3
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff62 	bl	8000568 <__aeabi_f2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	ec43 2b10 	vmov	d0, r2, r3
 80016ac:	f009 fec8 	bl	800b440 <sin>
 80016b0:	eeb0 8a40 	vmov.f32	s16, s0
 80016b4:	eef0 8a60 	vmov.f32	s17, s1
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff54 	bl	8000568 <__aeabi_f2d>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	ec43 2b10 	vmov	d0, r2, r3
 80016c8:	f009 fe6a 	bl	800b3a0 <cos>
 80016cc:	ec53 2b10 	vmov	r2, r3, d0
 80016d0:	ec51 0b18 	vmov	r0, r1, d8
 80016d4:	f7fe ffa0 	bl	8000618 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fde2 	bl	80002a8 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4640      	mov	r0, r8
 80016ea:	4649      	mov	r1, r9
 80016ec:	f7fe ff94 	bl	8000618 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
	res.x = original.x * (cos(rotation.z) * cos(rotation.y)) +
 80016f4:	4650      	mov	r0, sl
 80016f6:	4659      	mov	r1, fp
 80016f8:	f7fe fdd8 	bl	80002ac <__adddf3>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4692      	mov	sl, r2
 8001702:	469b      	mov	fp, r3
					 original.z * (cos(rotation.z) * sin(rotation.y) * cos(rotation.x) + sin(rotation.z) * sin(rotation.x));
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff2e 	bl	8000568 <__aeabi_f2d>
 800170c:	4680      	mov	r8, r0
 800170e:	4689      	mov	r9, r1
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff28 	bl	8000568 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	ec43 2b10 	vmov	d0, r2, r3
 8001720:	f009 fe3e 	bl	800b3a0 <cos>
 8001724:	ec55 4b10 	vmov	r4, r5, d0
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff1c 	bl	8000568 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	ec43 2b10 	vmov	d0, r2, r3
 8001738:	f009 fe82 	bl	800b440 <sin>
 800173c:	ec53 2b10 	vmov	r2, r3, d0
 8001740:	4620      	mov	r0, r4
 8001742:	4629      	mov	r1, r5
 8001744:	f7fe ff68 	bl	8000618 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4614      	mov	r4, r2
 800174e:	461d      	mov	r5, r3
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff08 	bl	8000568 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	ec43 2b10 	vmov	d0, r2, r3
 8001760:	f009 fe1e 	bl	800b3a0 <cos>
 8001764:	ec53 2b10 	vmov	r2, r3, d0
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe ff54 	bl	8000618 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fef4 	bl	8000568 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ec43 2b10 	vmov	d0, r2, r3
 8001788:	f009 fe5a 	bl	800b440 <sin>
 800178c:	eeb0 8a40 	vmov.f32	s16, s0
 8001790:	eef0 8a60 	vmov.f32	s17, s1
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fee6 	bl	8000568 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ec43 2b10 	vmov	d0, r2, r3
 80017a4:	f009 fe4c 	bl	800b440 <sin>
 80017a8:	ec53 2b10 	vmov	r2, r3, d0
 80017ac:	ec51 0b18 	vmov	r0, r1, d8
 80017b0:	f7fe ff32 	bl	8000618 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7fe fd76 	bl	80002ac <__adddf3>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4640      	mov	r0, r8
 80017c6:	4649      	mov	r1, r9
 80017c8:	f7fe ff26 	bl	8000618 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
					 original.y * (cos(rotation.z) * sin(rotation.y) * sin(rotation.x) - sin(rotation.z) * cos(rotation.x)) +
 80017d0:	4650      	mov	r0, sl
 80017d2:	4659      	mov	r1, fp
 80017d4:	f7fe fd6a 	bl	80002ac <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f9f2 	bl	8000bc8 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
	res.x = original.x * (cos(rotation.z) * cos(rotation.y)) +
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
	res.y = original.x * (sin(rotation.z) * cos(rotation.y)) +
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe febc 	bl	8000568 <__aeabi_f2d>
 80017f0:	4604      	mov	r4, r0
 80017f2:	460d      	mov	r5, r1
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe feb6 	bl	8000568 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	ec43 2b10 	vmov	d0, r2, r3
 8001804:	f009 fe1c 	bl	800b440 <sin>
 8001808:	ec59 8b10 	vmov	r8, r9, d0
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe feaa 	bl	8000568 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	ec43 2b10 	vmov	d0, r2, r3
 800181c:	f009 fdc0 	bl	800b3a0 <cos>
 8001820:	ec53 2b10 	vmov	r2, r3, d0
 8001824:	4640      	mov	r0, r8
 8001826:	4649      	mov	r1, r9
 8001828:	f7fe fef6 	bl	8000618 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fef0 	bl	8000618 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4692      	mov	sl, r2
 800183e:	469b      	mov	fp, r3
					 original.y * (sin(rotation.z) * sin(rotation.y) * sin(rotation.x) + cos(rotation.z) * cos(rotation.x)) +
 8001840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe90 	bl	8000568 <__aeabi_f2d>
 8001848:	4680      	mov	r8, r0
 800184a:	4689      	mov	r9, r1
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe8a 	bl	8000568 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	ec43 2b10 	vmov	d0, r2, r3
 800185c:	f009 fdf0 	bl	800b440 <sin>
 8001860:	ec55 4b10 	vmov	r4, r5, d0
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe7e 	bl	8000568 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b10 	vmov	d0, r2, r3
 8001874:	f009 fde4 	bl	800b440 <sin>
 8001878:	ec53 2b10 	vmov	r2, r3, d0
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe feca 	bl	8000618 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe6a 	bl	8000568 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	ec43 2b10 	vmov	d0, r2, r3
 800189c:	f009 fdd0 	bl	800b440 <sin>
 80018a0:	ec53 2b10 	vmov	r2, r3, d0
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe feb6 	bl	8000618 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe56 	bl	8000568 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	ec43 2b10 	vmov	d0, r2, r3
 80018c4:	f009 fd6c 	bl	800b3a0 <cos>
 80018c8:	eeb0 8a40 	vmov.f32	s16, s0
 80018cc:	eef0 8a60 	vmov.f32	s17, s1
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe48 	bl	8000568 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	ec43 2b10 	vmov	d0, r2, r3
 80018e0:	f009 fd5e 	bl	800b3a0 <cos>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	ec51 0b18 	vmov	r0, r1, d8
 80018ec:	f7fe fe94 	bl	8000618 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcd8 	bl	80002ac <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4640      	mov	r0, r8
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fe88 	bl	8000618 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
	res.y = original.x * (sin(rotation.z) * cos(rotation.y)) +
 800190c:	4650      	mov	r0, sl
 800190e:	4659      	mov	r1, fp
 8001910:	f7fe fccc 	bl	80002ac <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4692      	mov	sl, r2
 800191a:	469b      	mov	fp, r3
					 original.z * (sin(rotation.z) * sin(rotation.y) * cos(rotation.x) - cos(rotation.z) * sin(rotation.x));
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe22 	bl	8000568 <__aeabi_f2d>
 8001924:	4680      	mov	r8, r0
 8001926:	4689      	mov	r9, r1
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe1c 	bl	8000568 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	ec43 2b10 	vmov	d0, r2, r3
 8001938:	f009 fd82 	bl	800b440 <sin>
 800193c:	ec55 4b10 	vmov	r4, r5, d0
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe10 	bl	8000568 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	ec43 2b10 	vmov	d0, r2, r3
 8001950:	f009 fd76 	bl	800b440 <sin>
 8001954:	ec53 2b10 	vmov	r2, r3, d0
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fe5c 	bl	8000618 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4614      	mov	r4, r2
 8001966:	461d      	mov	r5, r3
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdfc 	bl	8000568 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	ec43 2b10 	vmov	d0, r2, r3
 8001978:	f009 fd12 	bl	800b3a0 <cos>
 800197c:	ec53 2b10 	vmov	r2, r3, d0
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe fe48 	bl	8000618 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4614      	mov	r4, r2
 800198e:	461d      	mov	r5, r3
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fde8 	bl	8000568 <__aeabi_f2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	ec43 2b10 	vmov	d0, r2, r3
 80019a0:	f009 fcfe 	bl	800b3a0 <cos>
 80019a4:	eeb0 8a40 	vmov.f32	s16, s0
 80019a8:	eef0 8a60 	vmov.f32	s17, s1
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdda 	bl	8000568 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f009 fd40 	bl	800b440 <sin>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	ec51 0b18 	vmov	r0, r1, d8
 80019c8:	f7fe fe26 	bl	8000618 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fc68 	bl	80002a8 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4640      	mov	r0, r8
 80019de:	4649      	mov	r1, r9
 80019e0:	f7fe fe1a 	bl	8000618 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
					 original.y * (sin(rotation.z) * sin(rotation.y) * sin(rotation.x) + cos(rotation.z) * cos(rotation.x)) +
 80019e8:	4650      	mov	r0, sl
 80019ea:	4659      	mov	r1, fp
 80019ec:	f7fe fc5e 	bl	80002ac <__adddf3>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f8e6 	bl	8000bc8 <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
	res.y = original.x * (sin(rotation.z) * cos(rotation.y)) +
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
	res.z = original.x * (-sin(rotation.y)) +
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fdb0 	bl	8000568 <__aeabi_f2d>
 8001a08:	4604      	mov	r4, r0
 8001a0a:	460d      	mov	r5, r1
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fdaa 	bl	8000568 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	ec43 2b10 	vmov	d0, r2, r3
 8001a1c:	f009 fd10 	bl	800b440 <sin>
 8001a20:	ec53 2b10 	vmov	r2, r3, d0
 8001a24:	603a      	str	r2, [r7, #0]
 8001a26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fdf0 	bl	8000618 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
					 original.y * (cos(rotation.y) * sin(rotation.x)) +
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd90 	bl	8000568 <__aeabi_f2d>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	460d      	mov	r5, r1
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd8a 	bl	8000568 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	f009 fca0 	bl	800b3a0 <cos>
 8001a60:	ec5b ab10 	vmov	sl, fp, d0
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd7e 	bl	8000568 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ec43 2b10 	vmov	d0, r2, r3
 8001a74:	f009 fce4 	bl	800b440 <sin>
 8001a78:	ec53 2b10 	vmov	r2, r3, d0
 8001a7c:	4650      	mov	r0, sl
 8001a7e:	4659      	mov	r1, fp
 8001a80:	f7fe fdca 	bl	8000618 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fdc4 	bl	8000618 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
	res.z = original.x * (-sin(rotation.y)) +
 8001a94:	4640      	mov	r0, r8
 8001a96:	4649      	mov	r1, r9
 8001a98:	f7fe fc08 	bl	80002ac <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	4699      	mov	r9, r3
					 original.z * (cos(rotation.y) * cos(rotation.x));
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd5e 	bl	8000568 <__aeabi_f2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd58 	bl	8000568 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	ec43 2b10 	vmov	d0, r2, r3
 8001ac0:	f009 fc6e 	bl	800b3a0 <cos>
 8001ac4:	ec5b ab10 	vmov	sl, fp, d0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd4c 	bl	8000568 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	ec43 2b10 	vmov	d0, r2, r3
 8001ad8:	f009 fc62 	bl	800b3a0 <cos>
 8001adc:	ec53 2b10 	vmov	r2, r3, d0
 8001ae0:	4650      	mov	r0, sl
 8001ae2:	4659      	mov	r1, fp
 8001ae4:	f7fe fd98 	bl	8000618 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fd92 	bl	8000618 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
					 original.y * (cos(rotation.y) * sin(rotation.x)) +
 8001af8:	4640      	mov	r0, r8
 8001afa:	4649      	mov	r1, r9
 8001afc:	f7fe fbd6 	bl	80002ac <__adddf3>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f85e 	bl	8000bc8 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
	res.z = original.x * (-sin(rotation.y)) +
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
	return res;
 8001b10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b24:	ee06 1a90 	vmov	s13, r1
 8001b28:	ee07 2a10 	vmov	s14, r2
 8001b2c:	ee07 3a90 	vmov	s15, r3
}
 8001b30:	eeb0 0a66 	vmov.f32	s0, s13
 8001b34:	eef0 0a47 	vmov.f32	s1, s14
 8001b38:	eeb0 1a67 	vmov.f32	s2, s15
 8001b3c:	3748      	adds	r7, #72	; 0x48
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	ecbd 8b02 	vpop	{d8}
 8001b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b48 <apply_perspective>:

Point3D apply_perspective(Point3D original){
 8001b48:	b480      	push	{r7}
 8001b4a:	b08f      	sub	sp, #60	; 0x3c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	eef0 6a40 	vmov.f32	s13, s0
 8001b52:	eeb0 7a60 	vmov.f32	s14, s1
 8001b56:	eef0 7a41 	vmov.f32	s15, s2
 8001b5a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b5e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b62:	edc7 7a07 	vstr	s15, [r7, #28]
	Point3D res;
	res.x = original.x * Z0 / (Z0 + original.z);
 8001b66:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <apply_perspective+0xa0>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b74:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <apply_perspective+0xa0>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b86:	edc7 7a08 	vstr	s15, [r7, #32]
	res.y = original.y * Z0 / (Z0 + original.z);
 8001b8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <apply_perspective+0xa0>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <apply_perspective+0xa0>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001baa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	res.z = original.z;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
	return res;
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	f107 0220 	add.w	r2, r7, #32
 8001bba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc6:	ee06 1a90 	vmov	s13, r1
 8001bca:	ee07 2a10 	vmov	s14, r2
 8001bce:	ee07 3a90 	vmov	s15, r3
}
 8001bd2:	eeb0 0a66 	vmov.f32	s0, s13
 8001bd6:	eef0 0a47 	vmov.f32	s1, s14
 8001bda:	eeb0 1a67 	vmov.f32	s2, s15
 8001bde:	373c      	adds	r7, #60	; 0x3c
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	20000470 	.word	0x20000470

08001bec <center_screen>:

Point3D center_screen(Point3D original){
 8001bec:	b480      	push	{r7}
 8001bee:	b08f      	sub	sp, #60	; 0x3c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	eef0 6a40 	vmov.f32	s13, s0
 8001bf6:	eeb0 7a60 	vmov.f32	s14, s1
 8001bfa:	eef0 7a41 	vmov.f32	s15, s2
 8001bfe:	edc7 6a05 	vstr	s13, [r7, #20]
 8001c02:	ed87 7a06 	vstr	s14, [r7, #24]
 8001c06:	edc7 7a07 	vstr	s15, [r7, #28]
	Point3D res;
	res.x = original.x + (RESOLUTION_X / 2);
 8001c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001c64 <center_screen+0x78>
 8001c12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c16:	edc7 7a08 	vstr	s15, [r7, #32]
	res.y = original.y + (RESOLUTION_Y / 2);
 8001c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001c68 <center_screen+0x7c>
 8001c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	res.z = original.z;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	return res;
 8001c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c32:	f107 0220 	add.w	r2, r7, #32
 8001c36:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	ee06 1a90 	vmov	s13, r1
 8001c46:	ee07 2a10 	vmov	s14, r2
 8001c4a:	ee07 3a90 	vmov	s15, r3
}
 8001c4e:	eeb0 0a66 	vmov.f32	s0, s13
 8001c52:	eef0 0a47 	vmov.f32	s1, s14
 8001c56:	eeb0 1a67 	vmov.f32	s2, s15
 8001c5a:	373c      	adds	r7, #60	; 0x3c
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	42f00000 	.word	0x42f00000
 8001c68:	43200000 	.word	0x43200000

08001c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c70:	f002 fcee 	bl	8004650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c74:	f000 f840 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c78:	f000 fa8a 	bl	8002190 <MX_GPIO_Init>
  MX_CRC_Init();
 8001c7c:	f000 f8ae 	bl	8001ddc <MX_CRC_Init>
  MX_DMA2D_Init();
 8001c80:	f000 f8c0 	bl	8001e04 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c84:	f000 fa34 	bl	80020f0 <MX_FMC_Init>
  MX_LTDC_Init();
 8001c88:	f000 f92e 	bl	8001ee8 <MX_LTDC_Init>
  MX_TIM1_Init();
 8001c8c:	f000 f9e0 	bl	8002050 <MX_TIM1_Init>
  MX_I2C3_Init();
 8001c90:	f000 f8ea 	bl	8001e68 <MX_I2C3_Init>
  MX_SPI5_Init();
 8001c94:	f000 f9a6 	bl	8001fe4 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001c98:	f001 fc00 	bl	800349c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8001c9c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f001 fc7d 	bl	80035a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001ca6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001caa:	2001      	movs	r0, #1
 8001cac:	f001 fc78 	bl	80035a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f001 fcd9 	bl	8003668 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001cb6:	f002 f903 	bl	8003ec0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbe:	f001 fd2b 	bl	8003718 <BSP_LCD_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Z0 = calculate_z0();
 8001cc2:	f7ff fc0b 	bl	80014dc <calculate_z0>
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <main+0x84>)
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	do_move();
 8001cd0:	f7ff f946 	bl	8000f60 <do_move>
	draw_cube();
 8001cd4:	f7ff f962 	bl	8000f9c <draw_cube>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001cd8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cdc:	f001 fcd4 	bl	8003688 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(2, (uint8_t *)"Cube32");
 8001ce0:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <main+0x88>)
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f001 fe42 	bl	800396c <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(16);
 8001ce8:	2010      	movs	r0, #16
 8001cea:	f002 fcf3 	bl	80046d4 <HAL_Delay>
	do_move();
 8001cee:	e7ef      	b.n	8001cd0 <main+0x64>
 8001cf0:	20000470 	.word	0x20000470
 8001cf4:	0800c4c8 	.word	0x0800c4c8

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	; 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	2230      	movs	r2, #48	; 0x30
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fe70 	bl	80089ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <SystemClock_Config+0xdc>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	4a2b      	ldr	r2, [pc, #172]	; (8001dd4 <SystemClock_Config+0xdc>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <SystemClock_Config+0xdc>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <SystemClock_Config+0xe0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <SystemClock_Config+0xe0>)
 8001d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <SystemClock_Config+0xe0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001d6c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d76:	2303      	movs	r3, #3
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 fb98 	bl	80064b4 <HAL_RCC_OscConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d8a:	f000 fb51 	bl	8002430 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d8e:	f004 fb41 	bl	8006414 <HAL_PWREx_EnableOverDrive>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001d98:	f000 fb4a 	bl	8002430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da0:	2302      	movs	r3, #2
 8001da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2105      	movs	r1, #5
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fdf2 	bl	80069a4 <HAL_RCC_ClockConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001dc6:	f000 fb33 	bl	8002430 <Error_Handler>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3750      	adds	r7, #80	; 0x50
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000

08001ddc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_CRC_Init+0x20>)
 8001de2:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <MX_CRC_Init+0x24>)
 8001de4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_CRC_Init+0x20>)
 8001de8:	f002 fd7a 	bl	80048e0 <HAL_CRC_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001df2:	f000 fb1d 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000520 	.word	0x20000520
 8001e00:	40023000 	.word	0x40023000

08001e04 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <MX_DMA2D_Init+0x60>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e3a:	f002 ff2b 	bl	8004c94 <HAL_DMA2D_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001e44:	f000 faf4 	bl	8002430 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_DMA2D_Init+0x5c>)
 8001e4c:	f003 f990 	bl	8005170 <HAL_DMA2D_ConfigLayer>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001e56:	f000 faeb 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000618 	.word	0x20000618
 8001e64:	4002b000 	.word	0x4002b000

08001e68 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <MX_I2C3_Init+0x78>)
 8001e70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <MX_I2C3_Init+0x7c>)
 8001e76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <MX_I2C3_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_I2C3_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <MX_I2C3_Init+0x74>)
 8001ea6:	f003 fd63 	bl	8005970 <HAL_I2C_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001eb0:	f000 fabe 	bl	8002430 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <MX_I2C3_Init+0x74>)
 8001eb8:	f003 fe9e 	bl	8005bf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001ec2:	f000 fab5 	bl	8002430 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <MX_I2C3_Init+0x74>)
 8001eca:	f003 fed1 	bl	8005c70 <HAL_I2CEx_ConfigDigitalFilter>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001ed4:	f000 faac 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000474 	.word	0x20000474
 8001ee0:	40005c00 	.word	0x40005c00
 8001ee4:	000186a0 	.word	0x000186a0

08001ee8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2234      	movs	r2, #52	; 0x34
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f006 fd79 	bl	80089ec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001efa:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001efc:	4a38      	ldr	r2, [pc, #224]	; (8001fe0 <MX_LTDC_Init+0xf8>)
 8001efe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f06:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f20:	2203      	movs	r2, #3
 8001f22:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f26:	220e      	movs	r2, #14
 8001f28:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f32:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f3a:	22f5      	movs	r2, #245	; 0xf5
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f40:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f48:	22f7      	movs	r2, #247	; 0xf7
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f64:	481d      	ldr	r0, [pc, #116]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001f66:	f003 fec3 	bl	8005cf0 <HAL_LTDC_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001f70:	f000 fa5e 	bl	8002430 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001f78:	23f0      	movs	r3, #240	; 0xf0
 8001f7a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001f80:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f84:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001f86:	2302      	movs	r3, #2
 8001f88:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001f8a:	23ff      	movs	r3, #255	; 0xff
 8001f8c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f96:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001f9c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001fa2:	23f0      	movs	r3, #240	; 0xf0
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001fa6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_LTDC_Init+0xf4>)
 8001fc6:	f004 f825 	bl	8006014 <HAL_LTDC_ConfigLayer>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001fd0:	f000 fa2e 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3738      	adds	r7, #56	; 0x38
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000528 	.word	0x20000528
 8001fe0:	40016800 	.word	0x40016800

08001fe4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_SPI5_Init+0x64>)
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <MX_SPI5_Init+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_SPI5_Init+0x64>)
 8001ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_SPI5_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_SPI5_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_SPI5_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_SPI5_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_SPI5_Init+0x64>)
 8002010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002014:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_SPI5_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <MX_SPI5_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_SPI5_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MX_SPI5_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_SPI5_Init+0x64>)
 8002030:	220a      	movs	r2, #10
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_SPI5_Init+0x64>)
 8002036:	f005 f90c 	bl	8007252 <HAL_SPI_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002040:	f000 f9f6 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200004c8 	.word	0x200004c8
 800204c:	40015000 	.word	0x40015000

08002050 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	463b      	mov	r3, r7
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <MX_TIM1_Init+0x98>)
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <MX_TIM1_Init+0x9c>)
 8002070:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_TIM1_Init+0x98>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <MX_TIM1_Init+0x98>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_TIM1_Init+0x98>)
 8002080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002084:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_TIM1_Init+0x98>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_TIM1_Init+0x98>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <MX_TIM1_Init+0x98>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002098:	4813      	ldr	r0, [pc, #76]	; (80020e8 <MX_TIM1_Init+0x98>)
 800209a:	f005 feb9 	bl	8007e10 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020a4:	f000 f9c4 	bl	8002430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <MX_TIM1_Init+0x98>)
 80020b6:	f006 f873 	bl	80081a0 <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020c0:	f000 f9b6 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_TIM1_Init+0x98>)
 80020d2:	f006 fa8f 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020dc:	f000 f9a8 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200005d0 	.word	0x200005d0
 80020ec:	40010000 	.word	0x40010000

080020f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	615a      	str	r2, [r3, #20]
 8002106:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MX_FMC_Init+0x98>)
 800210a:	4a20      	ldr	r2, [pc, #128]	; (800218c <MX_FMC_Init+0x9c>)
 800210c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <MX_FMC_Init+0x98>)
 8002110:	2201      	movs	r2, #1
 8002112:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <MX_FMC_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_FMC_Init+0x98>)
 800211c:	2204      	movs	r2, #4
 800211e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <MX_FMC_Init+0x98>)
 8002122:	2210      	movs	r2, #16
 8002124:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_FMC_Init+0x98>)
 8002128:	2240      	movs	r2, #64	; 0x40
 800212a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_FMC_Init+0x98>)
 800212e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002132:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_FMC_Init+0x98>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_FMC_Init+0x98>)
 800213c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002140:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_FMC_Init+0x98>)
 8002144:	2200      	movs	r2, #0
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_FMC_Init+0x98>)
 800214a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002154:	2307      	movs	r3, #7
 8002156:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002158:	2304      	movs	r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800215c:	2307      	movs	r3, #7
 800215e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002160:	2303      	movs	r3, #3
 8002162:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002168:	2302      	movs	r3, #2
 800216a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_FMC_Init+0x98>)
 8002172:	f004 ffef 	bl	8007154 <HAL_SDRAM_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800217c:	f000 f958 	bl	8002430 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000658 	.word	0x20000658
 800218c:	a0000140 	.word	0xa0000140

08002190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a91      	ldr	r2, [pc, #580]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a8a      	ldr	r2, [pc, #552]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021cc:	f043 0320 	orr.w	r3, r3, #32
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a83      	ldr	r2, [pc, #524]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <MX_GPIO_Init+0x264>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	4b7d      	ldr	r3, [pc, #500]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a7c      	ldr	r2, [pc, #496]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b7a      	ldr	r3, [pc, #488]	; (80023f4 <MX_GPIO_Init+0x264>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <MX_GPIO_Init+0x264>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <MX_GPIO_Init+0x264>)
 800223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a67      	ldr	r2, [pc, #412]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002258:	f043 0310 	orr.w	r3, r3, #16
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <MX_GPIO_Init+0x264>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <MX_GPIO_Init+0x264>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	2116      	movs	r1, #22
 800228a:	485b      	ldr	r0, [pc, #364]	; (80023f8 <MX_GPIO_Init+0x268>)
 800228c:	f003 fb56 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	4859      	ldr	r0, [pc, #356]	; (80023fc <MX_GPIO_Init+0x26c>)
 8002296:	f003 fb51 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80022a0:	4857      	ldr	r0, [pc, #348]	; (8002400 <MX_GPIO_Init+0x270>)
 80022a2:	f003 fb4b 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80022ac:	4855      	ldr	r0, [pc, #340]	; (8002404 <MX_GPIO_Init+0x274>)
 80022ae:	f003 fb45 	bl	800593c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80022b2:	2316      	movs	r3, #22
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c6:	4619      	mov	r1, r3
 80022c8:	484b      	ldr	r0, [pc, #300]	; (80023f8 <MX_GPIO_Init+0x268>)
 80022ca:	f003 f87f 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80022ce:	f248 0307 	movw	r3, #32775	; 0x8007
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e2:	4619      	mov	r1, r3
 80022e4:	4845      	ldr	r0, [pc, #276]	; (80023fc <MX_GPIO_Init+0x26c>)
 80022e6:	f003 f871 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	4619      	mov	r1, r3
 8002300:	483e      	ldr	r0, [pc, #248]	; (80023fc <MX_GPIO_Init+0x26c>)
 8002302:	f003 f863 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002306:	2320      	movs	r3, #32
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800230a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	4837      	ldr	r0, [pc, #220]	; (80023f8 <MX_GPIO_Init+0x268>)
 800231c:	f003 f856 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002320:	2304      	movs	r3, #4
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4835      	ldr	r0, [pc, #212]	; (8002408 <MX_GPIO_Init+0x278>)
 8002334:	f003 f84a 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002338:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800234a:	230c      	movs	r3, #12
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002352:	4619      	mov	r1, r3
 8002354:	482c      	ldr	r0, [pc, #176]	; (8002408 <MX_GPIO_Init+0x278>)
 8002356:	f003 f839 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800235a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	4619      	mov	r1, r3
 800236e:	4826      	ldr	r0, [pc, #152]	; (8002408 <MX_GPIO_Init+0x278>)
 8002370:	f003 f82c 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002386:	4619      	mov	r1, r3
 8002388:	481d      	ldr	r0, [pc, #116]	; (8002400 <MX_GPIO_Init+0x270>)
 800238a:	f003 f81f 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800238e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a4:	4619      	mov	r1, r3
 80023a6:	4816      	ldr	r0, [pc, #88]	; (8002400 <MX_GPIO_Init+0x270>)
 80023a8:	f003 f810 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023be:	2307      	movs	r3, #7
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c6:	4619      	mov	r1, r3
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <MX_GPIO_Init+0x26c>)
 80023ca:	f002 ffff 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80023ce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d4:	2301      	movs	r3, #1
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	4807      	ldr	r0, [pc, #28]	; (8002404 <MX_GPIO_Init+0x274>)
 80023e8:	f002 fff0 	bl	80053cc <HAL_GPIO_Init>

}
 80023ec:	bf00      	nop
 80023ee:	3738      	adds	r7, #56	; 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020000 	.word	0x40020000
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021800 	.word	0x40021800
 8002408:	40020400 	.word	0x40020400

0800240c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800241e:	f002 f939 	bl	8004694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40001000 	.word	0x40001000

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002438:	e7fe      	b.n	8002438 <Error_Handler+0x8>
	...

0800243c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_MspInit+0x4c>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_MspInit+0x4c>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_MspInit+0x4c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_MspInit+0x4c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_MspInit+0x4c>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_MspInit+0x4c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_CRC_MspInit+0x3c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10d      	bne.n	80024ba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_CRC_MspInit+0x40>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_CRC_MspInit+0x40>)
 80024a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_CRC_MspInit+0x40>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40023000 	.word	0x40023000
 80024cc:	40023800 	.word	0x40023800

080024d0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <HAL_DMA2D_MspInit+0x48>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d115      	bne.n	800250e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_DMA2D_MspInit+0x4c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_DMA2D_MspInit+0x4c>)
 80024ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_DMA2D_MspInit+0x4c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2105      	movs	r1, #5
 8002502:	205a      	movs	r0, #90	; 0x5a
 8002504:	f002 f9c2 	bl	800488c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002508:	205a      	movs	r0, #90	; 0x5a
 800250a:	f002 f9db 	bl	80048c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	4002b000 	.word	0x4002b000
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <HAL_I2C_MspInit+0xc4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d14b      	bne.n	80025da <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800257a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002580:	2312      	movs	r3, #18
 8002582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002584:	2301      	movs	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800258c:	2304      	movs	r3, #4
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4815      	ldr	r0, [pc, #84]	; (80025ec <HAL_I2C_MspInit+0xcc>)
 8002598:	f002 ff18 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800259c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a2:	2312      	movs	r3, #18
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025ae:	2304      	movs	r3, #4
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <HAL_I2C_MspInit+0xd0>)
 80025ba:	f002 ff07 	bl	80053cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 80025c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_I2C_MspInit+0xc8>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	; 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40005c00 	.word	0x40005c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020800 	.word	0x40020800
 80025f0:	40020000 	.word	0x40020000

080025f4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b09a      	sub	sp, #104	; 0x68
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800260c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002610:	2230      	movs	r2, #48	; 0x30
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f006 f9e9 	bl	80089ec <memset>
  if(hltdc->Instance==LTDC)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a85      	ldr	r2, [pc, #532]	; (8002834 <HAL_LTDC_MspInit+0x240>)
 8002620:	4293      	cmp	r3, r2
 8002622:	f040 8103 	bne.w	800282c <HAL_LTDC_MspInit+0x238>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002626:	2308      	movs	r3, #8
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800262a:	23c0      	movs	r3, #192	; 0xc0
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800262e:	2304      	movs	r3, #4
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263c:	4618      	mov	r0, r3
 800263e:	f004 fbcb 	bl	8006dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002648:	f7ff fef2 	bl	8002430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	4b79      	ldr	r3, [pc, #484]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	4a78      	ldr	r2, [pc, #480]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 8002656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800265a:	6453      	str	r3, [r2, #68]	; 0x44
 800265c:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	4b72      	ldr	r3, [pc, #456]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a71      	ldr	r2, [pc, #452]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 8002672:	f043 0320 	orr.w	r3, r3, #32
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a6a      	ldr	r2, [pc, #424]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	4b64      	ldr	r3, [pc, #400]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	6313      	str	r3, [r2, #48]	; 0x30
 80026b0:	4b61      	ldr	r3, [pc, #388]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	4b5d      	ldr	r3, [pc, #372]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4a5c      	ldr	r2, [pc, #368]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ca:	6313      	str	r3, [r2, #48]	; 0x30
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	4b56      	ldr	r3, [pc, #344]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6313      	str	r3, [r2, #48]	; 0x30
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	6313      	str	r3, [r2, #48]	; 0x30
 8002704:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_LTDC_MspInit+0x244>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002714:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002722:	230e      	movs	r3, #14
 8002724:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800272a:	4619      	mov	r1, r3
 800272c:	4843      	ldr	r0, [pc, #268]	; (800283c <HAL_LTDC_MspInit+0x248>)
 800272e:	f002 fe4d 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002732:	f641 0358 	movw	r3, #6232	; 0x1858
 8002736:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002744:	230e      	movs	r3, #14
 8002746:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800274c:	4619      	mov	r1, r3
 800274e:	483c      	ldr	r0, [pc, #240]	; (8002840 <HAL_LTDC_MspInit+0x24c>)
 8002750:	f002 fe3c 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002754:	2303      	movs	r3, #3
 8002756:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002764:	2309      	movs	r3, #9
 8002766:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800276c:	4619      	mov	r1, r3
 800276e:	4835      	ldr	r0, [pc, #212]	; (8002844 <HAL_LTDC_MspInit+0x250>)
 8002770:	f002 fe2c 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002774:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002778:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002786:	230e      	movs	r3, #14
 8002788:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800278e:	4619      	mov	r1, r3
 8002790:	482c      	ldr	r0, [pc, #176]	; (8002844 <HAL_LTDC_MspInit+0x250>)
 8002792:	f002 fe1b 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002796:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800279a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027a8:	230e      	movs	r3, #14
 80027aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027b0:	4619      	mov	r1, r3
 80027b2:	4825      	ldr	r0, [pc, #148]	; (8002848 <HAL_LTDC_MspInit+0x254>)
 80027b4:	f002 fe0a 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80027b8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80027bc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027ca:	230e      	movs	r3, #14
 80027cc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027d2:	4619      	mov	r1, r3
 80027d4:	481d      	ldr	r0, [pc, #116]	; (800284c <HAL_LTDC_MspInit+0x258>)
 80027d6:	f002 fdf9 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80027da:	2348      	movs	r3, #72	; 0x48
 80027dc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027ea:	230e      	movs	r3, #14
 80027ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027f2:	4619      	mov	r1, r3
 80027f4:	4816      	ldr	r0, [pc, #88]	; (8002850 <HAL_LTDC_MspInit+0x25c>)
 80027f6:	f002 fde9 	bl	80053cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80027fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027fe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800280c:	2309      	movs	r3, #9
 800280e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002810:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002814:	4619      	mov	r1, r3
 8002816:	480c      	ldr	r0, [pc, #48]	; (8002848 <HAL_LTDC_MspInit+0x254>)
 8002818:	f002 fdd8 	bl	80053cc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2105      	movs	r1, #5
 8002820:	2058      	movs	r0, #88	; 0x58
 8002822:	f002 f833 	bl	800488c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002826:	2058      	movs	r0, #88	; 0x58
 8002828:	f002 f84c 	bl	80048c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	3768      	adds	r7, #104	; 0x68
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40016800 	.word	0x40016800
 8002838:	40023800 	.word	0x40023800
 800283c:	40021400 	.word	0x40021400
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40021800 	.word	0x40021800
 800284c:	40020800 	.word	0x40020800
 8002850:	40020c00 	.word	0x40020c00

08002854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_SPI_MspInit+0x84>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d12c      	bne.n	80028d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_SPI_MspInit+0x88>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_SPI_MspInit+0x88>)
 8002880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_SPI_MspInit+0x88>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_SPI_MspInit+0x88>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_SPI_MspInit+0x88>)
 800289c:	f043 0320 	orr.w	r3, r3, #32
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_SPI_MspInit+0x88>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80028ae:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80028c0:	2305      	movs	r3, #5
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4619      	mov	r1, r3
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <HAL_SPI_MspInit+0x8c>)
 80028cc:	f002 fd7e 	bl	80053cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80028d0:	bf00      	nop
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40015000 	.word	0x40015000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40021400 	.word	0x40021400

080028e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_SPI_MspDeInit+0x30>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10a      	bne.n	800290c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_SPI_MspDeInit+0x34>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <HAL_SPI_MspDeInit+0x34>)
 80028fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002902:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <HAL_SPI_MspDeInit+0x38>)
 8002908:	f002 ff0c 	bl	8005724 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40015000 	.word	0x40015000
 8002918:	40023800 	.word	0x40023800
 800291c:	40021400 	.word	0x40021400

08002920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0b      	ldr	r2, [pc, #44]	; (800295c <HAL_TIM_Base_MspInit+0x3c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10d      	bne.n	800294e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_TIM_Base_MspInit+0x40>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_TIM_Base_MspInit+0x40>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_TIM_Base_MspInit+0x40>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002978:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_FMC_MspInit+0x104>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d16f      	bne.n	8002a60 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_FMC_MspInit+0x104>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_FMC_MspInit+0x108>)
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	4a37      	ldr	r2, [pc, #220]	; (8002a6c <HAL_FMC_MspInit+0x108>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6393      	str	r3, [r2, #56]	; 0x38
 8002996:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_FMC_MspInit+0x108>)
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80029a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029a6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029b4:	230c      	movs	r3, #12
 80029b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	4619      	mov	r1, r3
 80029bc:	482c      	ldr	r0, [pc, #176]	; (8002a70 <HAL_FMC_MspInit+0x10c>)
 80029be:	f002 fd05 	bl	80053cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80029c2:	2301      	movs	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029d2:	230c      	movs	r3, #12
 80029d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4826      	ldr	r0, [pc, #152]	; (8002a74 <HAL_FMC_MspInit+0x110>)
 80029dc:	f002 fcf6 	bl	80053cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80029e0:	f248 1333 	movw	r3, #33075	; 0x8133
 80029e4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029f2:	230c      	movs	r3, #12
 80029f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	481f      	ldr	r0, [pc, #124]	; (8002a78 <HAL_FMC_MspInit+0x114>)
 80029fc:	f002 fce6 	bl	80053cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002a00:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a04:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a12:	230c      	movs	r3, #12
 8002a14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4818      	ldr	r0, [pc, #96]	; (8002a7c <HAL_FMC_MspInit+0x118>)
 8002a1c:	f002 fcd6 	bl	80053cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002a20:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a24:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a32:	230c      	movs	r3, #12
 8002a34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4811      	ldr	r0, [pc, #68]	; (8002a80 <HAL_FMC_MspInit+0x11c>)
 8002a3c:	f002 fcc6 	bl	80053cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002a40:	2360      	movs	r3, #96	; 0x60
 8002a42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a50:	230c      	movs	r3, #12
 8002a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	4619      	mov	r1, r3
 8002a58:	480a      	ldr	r0, [pc, #40]	; (8002a84 <HAL_FMC_MspInit+0x120>)
 8002a5a:	f002 fcb7 	bl	80053cc <HAL_GPIO_Init>
 8002a5e:	e000      	b.n	8002a62 <HAL_FMC_MspInit+0xfe>
    return;
 8002a60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200002b8 	.word	0x200002b8
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40021400 	.word	0x40021400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40020400 	.word	0x40020400

08002a88 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a90:	f7ff ff68 	bl	8002964 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08c      	sub	sp, #48	; 0x30
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	2036      	movs	r0, #54	; 0x36
 8002ab2:	f001 feeb 	bl	800488c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ab6:	2036      	movs	r0, #54	; 0x36
 8002ab8:	f001 ff04 	bl	80048c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_InitTick+0xa4>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_InitTick+0xa4>)
 8002ac6:	f043 0310 	orr.w	r3, r3, #16
 8002aca:	6413      	str	r3, [r2, #64]	; 0x40
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_InitTick+0xa4>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ad8:	f107 0210 	add.w	r2, r7, #16
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 f946 	bl	8006d74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ae8:	f004 f930 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 8002aec:	4603      	mov	r3, r0
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_InitTick+0xa8>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0c9b      	lsrs	r3, r3, #18
 8002afc:	3b01      	subs	r3, #1
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_InitTick+0xac>)
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <HAL_InitTick+0xb0>)
 8002b04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_InitTick+0xac>)
 8002b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <HAL_InitTick+0xac>)
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_InitTick+0xac>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_InitTick+0xac>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b20:	4809      	ldr	r0, [pc, #36]	; (8002b48 <HAL_InitTick+0xac>)
 8002b22:	f005 f975 	bl	8007e10 <HAL_TIM_Base_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b2c:	4806      	ldr	r0, [pc, #24]	; (8002b48 <HAL_InitTick+0xac>)
 8002b2e:	f005 f9bf 	bl	8007eb0 <HAL_TIM_Base_Start_IT>
 8002b32:	4603      	mov	r3, r0
 8002b34:	e000      	b.n	8002b38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3730      	adds	r7, #48	; 0x30
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	431bde83 	.word	0x431bde83
 8002b48:	2000068c 	.word	0x2000068c
 8002b4c:	40001000 	.word	0x40001000

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <NMI_Handler+0x4>

08002b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <HardFault_Handler+0x4>

08002b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <MemManage_Handler+0x4>

08002b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <BusFault_Handler+0x4>

08002b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <UsageFault_Handler+0x4>

08002b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bac:	4802      	ldr	r0, [pc, #8]	; (8002bb8 <TIM6_DAC_IRQHandler+0x10>)
 8002bae:	f005 f9ef 	bl	8007f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000068c 	.word	0x2000068c

08002bbc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002bc0:	4802      	ldr	r0, [pc, #8]	; (8002bcc <LTDC_IRQHandler+0x10>)
 8002bc2:	f003 f965 	bl	8005e90 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000528 	.word	0x20000528

08002bd0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <DMA2D_IRQHandler+0x10>)
 8002bd6:	f002 f9ba 	bl	8004f4e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000618 	.word	0x20000618

08002be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
	return 1;
 8002be8:	2301      	movs	r3, #1
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_kill>:

int _kill(int pid, int sig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bfe:	f005 fecb 	bl	8008998 <__errno>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2216      	movs	r2, #22
 8002c06:	601a      	str	r2, [r3, #0]
	return -1;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_exit>:

void _exit (int status)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffe7 	bl	8002bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c26:	e7fe      	b.n	8002c26 <_exit+0x12>

08002c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e00a      	b.n	8002c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c3a:	f3af 8000 	nop.w
 8002c3e:	4601      	mov	r1, r0
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60ba      	str	r2, [r7, #8]
 8002c46:	b2ca      	uxtb	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbf0      	blt.n	8002c3a <_read+0x12>
	}

return len;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e009      	b.n	8002c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	60ba      	str	r2, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbf1      	blt.n	8002c74 <_write+0x12>
	}
	return len;
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_close>:

int _close(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_isatty>:

int _isatty(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <_sbrk+0x5c>)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <_sbrk+0x60>)
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <_sbrk+0x64>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <_sbrk+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d207      	bcs.n	8002d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d34:	f005 fe30 	bl	8008998 <__errno>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e009      	b.n	8002d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <_sbrk+0x64>)
 8002d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20030000 	.word	0x20030000
 8002d64:	00000400 	.word	0x00000400
 8002d68:	200002bc 	.word	0x200002bc
 8002d6c:	20000798 	.word	0x20000798

08002d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SystemInit+0x20>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <SystemInit+0x20>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d9a:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002db0:	4c0b      	ldr	r4, [pc, #44]	; (8002de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dbe:	f7ff ffd7 	bl	8002d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f005 fdef 	bl	80089a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7fe ff51 	bl	8001c6c <main>
  bx  lr    
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002dcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd4:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002dd8:	0800e578 	.word	0x0800e578
  ldr r2, =_sbss
 8002ddc:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002de0:	20000794 	.word	0x20000794

08002de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC_IRQHandler>

08002de6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002dea:	f000 fa5d 	bl	80032a8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002dee:	20ca      	movs	r0, #202	; 0xca
 8002df0:	f000 f95d 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002df4:	20c3      	movs	r0, #195	; 0xc3
 8002df6:	f000 f967 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002dfa:	2008      	movs	r0, #8
 8002dfc:	f000 f964 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002e00:	2050      	movs	r0, #80	; 0x50
 8002e02:	f000 f961 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002e06:	20cf      	movs	r0, #207	; 0xcf
 8002e08:	f000 f951 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f000 f95b 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002e12:	20c1      	movs	r0, #193	; 0xc1
 8002e14:	f000 f958 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002e18:	2030      	movs	r0, #48	; 0x30
 8002e1a:	f000 f955 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002e1e:	20ed      	movs	r0, #237	; 0xed
 8002e20:	f000 f945 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002e24:	2064      	movs	r0, #100	; 0x64
 8002e26:	f000 f94f 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f000 f94c 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002e30:	2012      	movs	r0, #18
 8002e32:	f000 f949 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002e36:	2081      	movs	r0, #129	; 0x81
 8002e38:	f000 f946 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002e3c:	20e8      	movs	r0, #232	; 0xe8
 8002e3e:	f000 f936 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002e42:	2085      	movs	r0, #133	; 0x85
 8002e44:	f000 f940 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f000 f93d 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002e4e:	2078      	movs	r0, #120	; 0x78
 8002e50:	f000 f93a 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002e54:	20cb      	movs	r0, #203	; 0xcb
 8002e56:	f000 f92a 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002e5a:	2039      	movs	r0, #57	; 0x39
 8002e5c:	f000 f934 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002e60:	202c      	movs	r0, #44	; 0x2c
 8002e62:	f000 f931 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f000 f92e 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002e6c:	2034      	movs	r0, #52	; 0x34
 8002e6e:	f000 f92b 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002e72:	2002      	movs	r0, #2
 8002e74:	f000 f928 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002e78:	20f7      	movs	r0, #247	; 0xf7
 8002e7a:	f000 f918 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002e7e:	2020      	movs	r0, #32
 8002e80:	f000 f922 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002e84:	20ea      	movs	r0, #234	; 0xea
 8002e86:	f000 f912 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f000 f91c 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f000 f919 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002e96:	20b1      	movs	r0, #177	; 0xb1
 8002e98:	f000 f909 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f000 f913 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002ea2:	201b      	movs	r0, #27
 8002ea4:	f000 f910 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002ea8:	20b6      	movs	r0, #182	; 0xb6
 8002eaa:	f000 f900 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002eae:	200a      	movs	r0, #10
 8002eb0:	f000 f90a 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002eb4:	20a2      	movs	r0, #162	; 0xa2
 8002eb6:	f000 f907 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002eba:	20c0      	movs	r0, #192	; 0xc0
 8002ebc:	f000 f8f7 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ec0:	2010      	movs	r0, #16
 8002ec2:	f000 f901 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002ec6:	20c1      	movs	r0, #193	; 0xc1
 8002ec8:	f000 f8f1 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ecc:	2010      	movs	r0, #16
 8002ece:	f000 f8fb 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002ed2:	20c5      	movs	r0, #197	; 0xc5
 8002ed4:	f000 f8eb 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002ed8:	2045      	movs	r0, #69	; 0x45
 8002eda:	f000 f8f5 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002ede:	2015      	movs	r0, #21
 8002ee0:	f000 f8f2 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002ee4:	20c7      	movs	r0, #199	; 0xc7
 8002ee6:	f000 f8e2 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002eea:	2090      	movs	r0, #144	; 0x90
 8002eec:	f000 f8ec 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002ef0:	2036      	movs	r0, #54	; 0x36
 8002ef2:	f000 f8dc 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002ef6:	20c8      	movs	r0, #200	; 0xc8
 8002ef8:	f000 f8e6 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002efc:	20f2      	movs	r0, #242	; 0xf2
 8002efe:	f000 f8d6 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f000 f8e0 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002f08:	20b0      	movs	r0, #176	; 0xb0
 8002f0a:	f000 f8d0 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002f0e:	20c2      	movs	r0, #194	; 0xc2
 8002f10:	f000 f8da 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002f14:	20b6      	movs	r0, #182	; 0xb6
 8002f16:	f000 f8ca 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002f1a:	200a      	movs	r0, #10
 8002f1c:	f000 f8d4 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002f20:	20a7      	movs	r0, #167	; 0xa7
 8002f22:	f000 f8d1 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002f26:	2027      	movs	r0, #39	; 0x27
 8002f28:	f000 f8ce 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002f2c:	2004      	movs	r0, #4
 8002f2e:	f000 f8cb 	bl	80030c8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002f32:	202a      	movs	r0, #42	; 0x2a
 8002f34:	f000 f8bb 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f000 f8c5 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f000 f8c2 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f000 f8bf 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002f4a:	20ef      	movs	r0, #239	; 0xef
 8002f4c:	f000 f8bc 	bl	80030c8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002f50:	202b      	movs	r0, #43	; 0x2b
 8002f52:	f000 f8ac 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f000 f8b6 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f000 f8b3 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 f8b0 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002f68:	203f      	movs	r0, #63	; 0x3f
 8002f6a:	f000 f8ad 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002f6e:	20f6      	movs	r0, #246	; 0xf6
 8002f70:	f000 f89d 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f000 f8a7 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 f8a4 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002f80:	2006      	movs	r0, #6
 8002f82:	f000 f8a1 	bl	80030c8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002f86:	202c      	movs	r0, #44	; 0x2c
 8002f88:	f000 f891 	bl	80030ae <ili9341_WriteReg>
  LCD_Delay(200);
 8002f8c:	20c8      	movs	r0, #200	; 0xc8
 8002f8e:	f000 fa79 	bl	8003484 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002f92:	2026      	movs	r0, #38	; 0x26
 8002f94:	f000 f88b 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f000 f895 	bl	80030c8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002f9e:	20e0      	movs	r0, #224	; 0xe0
 8002fa0:	f000 f885 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002fa4:	200f      	movs	r0, #15
 8002fa6:	f000 f88f 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002faa:	2029      	movs	r0, #41	; 0x29
 8002fac:	f000 f88c 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002fb0:	2024      	movs	r0, #36	; 0x24
 8002fb2:	f000 f889 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002fb6:	200c      	movs	r0, #12
 8002fb8:	f000 f886 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002fbc:	200e      	movs	r0, #14
 8002fbe:	f000 f883 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002fc2:	2009      	movs	r0, #9
 8002fc4:	f000 f880 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002fc8:	204e      	movs	r0, #78	; 0x4e
 8002fca:	f000 f87d 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002fce:	2078      	movs	r0, #120	; 0x78
 8002fd0:	f000 f87a 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002fd4:	203c      	movs	r0, #60	; 0x3c
 8002fd6:	f000 f877 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002fda:	2009      	movs	r0, #9
 8002fdc:	f000 f874 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002fe0:	2013      	movs	r0, #19
 8002fe2:	f000 f871 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002fe6:	2005      	movs	r0, #5
 8002fe8:	f000 f86e 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002fec:	2017      	movs	r0, #23
 8002fee:	f000 f86b 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002ff2:	2011      	movs	r0, #17
 8002ff4:	f000 f868 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f000 f865 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002ffe:	20e1      	movs	r0, #225	; 0xe1
 8003000:	f000 f855 	bl	80030ae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f000 f85f 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800300a:	2016      	movs	r0, #22
 800300c:	f000 f85c 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003010:	201b      	movs	r0, #27
 8003012:	f000 f859 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003016:	2004      	movs	r0, #4
 8003018:	f000 f856 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800301c:	2011      	movs	r0, #17
 800301e:	f000 f853 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003022:	2007      	movs	r0, #7
 8003024:	f000 f850 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003028:	2031      	movs	r0, #49	; 0x31
 800302a:	f000 f84d 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800302e:	2033      	movs	r0, #51	; 0x33
 8003030:	f000 f84a 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003034:	2042      	movs	r0, #66	; 0x42
 8003036:	f000 f847 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800303a:	2005      	movs	r0, #5
 800303c:	f000 f844 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003040:	200c      	movs	r0, #12
 8003042:	f000 f841 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003046:	200a      	movs	r0, #10
 8003048:	f000 f83e 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800304c:	2028      	movs	r0, #40	; 0x28
 800304e:	f000 f83b 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003052:	202f      	movs	r0, #47	; 0x2f
 8003054:	f000 f838 	bl	80030c8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003058:	200f      	movs	r0, #15
 800305a:	f000 f835 	bl	80030c8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800305e:	2011      	movs	r0, #17
 8003060:	f000 f825 	bl	80030ae <ili9341_WriteReg>
  LCD_Delay(200);
 8003064:	20c8      	movs	r0, #200	; 0xc8
 8003066:	f000 fa0d 	bl	8003484 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800306a:	2029      	movs	r0, #41	; 0x29
 800306c:	f000 f81f 	bl	80030ae <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003070:	202c      	movs	r0, #44	; 0x2c
 8003072:	f000 f81c 	bl	80030ae <ili9341_WriteReg>
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}

0800307a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800307e:	f000 f913 	bl	80032a8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003082:	2103      	movs	r1, #3
 8003084:	20d3      	movs	r0, #211	; 0xd3
 8003086:	f000 f82c 	bl	80030e2 <ili9341_ReadData>
 800308a:	4603      	mov	r3, r0
 800308c:	b29b      	uxth	r3, r3
}
 800308e:	4618      	mov	r0, r3
 8003090:	bd80      	pop	{r7, pc}

08003092 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003096:	2029      	movs	r0, #41	; 0x29
 8003098:	f000 f809 	bl	80030ae <ili9341_WriteReg>
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}

080030a0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80030a4:	2028      	movs	r0, #40	; 0x28
 80030a6:	f000 f802 	bl	80030ae <ili9341_WriteReg>
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}

080030ae <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f98e 	bl	80033dc <LCD_IO_WriteReg>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f95f 	bl	8003398 <LCD_IO_WriteData>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	460a      	mov	r2, r1
 80030ec:	80fb      	strh	r3, [r7, #6]
 80030ee:	4613      	mov	r3, r2
 80030f0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80030f2:	797a      	ldrb	r2, [r7, #5]
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f991 	bl	8003420 <LCD_IO_ReadData>
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800310c:	23f0      	movs	r3, #240	; 0xf0
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800311c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003130:	4819      	ldr	r0, [pc, #100]	; (8003198 <SPIx_Init+0x6c>)
 8003132:	f004 fd2e 	bl	8007b92 <HAL_SPI_GetState>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d12b      	bne.n	8003194 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <SPIx_Init+0x6c>)
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <SPIx_Init+0x70>)
 8003140:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <SPIx_Init+0x6c>)
 8003144:	2218      	movs	r2, #24
 8003146:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <SPIx_Init+0x6c>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <SPIx_Init+0x6c>)
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <SPIx_Init+0x6c>)
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <SPIx_Init+0x6c>)
 800315c:	2200      	movs	r2, #0
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003160:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <SPIx_Init+0x6c>)
 8003162:	2207      	movs	r2, #7
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <SPIx_Init+0x6c>)
 8003168:	2200      	movs	r2, #0
 800316a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <SPIx_Init+0x6c>)
 800316e:	2200      	movs	r2, #0
 8003170:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <SPIx_Init+0x6c>)
 8003174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003178:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <SPIx_Init+0x6c>)
 800317c:	2200      	movs	r2, #0
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <SPIx_Init+0x6c>)
 8003182:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003186:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003188:	4803      	ldr	r0, [pc, #12]	; (8003198 <SPIx_Init+0x6c>)
 800318a:	f000 f853 	bl	8003234 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800318e:	4802      	ldr	r0, [pc, #8]	; (8003198 <SPIx_Init+0x6c>)
 8003190:	f004 f85f 	bl	8007252 <HAL_SPI_Init>
  } 
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	200002c0 	.word	0x200002c0
 800319c:	40015000 	.word	0x40015000

080031a0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <SPIx_Read+0x38>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f107 0108 	add.w	r1, r7, #8
 80031ba:	4808      	ldr	r0, [pc, #32]	; (80031dc <SPIx_Read+0x3c>)
 80031bc:	f004 fa36 	bl	800762c <HAL_SPI_Receive>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80031ca:	f000 f827 	bl	800321c <SPIx_Error>
  }
  
  return readvalue;
 80031ce:	68bb      	ldr	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200000a8 	.word	0x200000a8
 80031dc:	200002c0 	.word	0x200002c0

080031e0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <SPIx_Write+0x34>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1db9      	adds	r1, r7, #6
 80031f4:	2201      	movs	r2, #1
 80031f6:	4808      	ldr	r0, [pc, #32]	; (8003218 <SPIx_Write+0x38>)
 80031f8:	f004 f8dc 	bl	80073b4 <HAL_SPI_Transmit>
 80031fc:	4603      	mov	r3, r0
 80031fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003206:	f000 f809 	bl	800321c <SPIx_Error>
  }
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200000a8 	.word	0x200000a8
 8003218:	200002c0 	.word	0x200002c0

0800321c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003220:	4803      	ldr	r0, [pc, #12]	; (8003230 <SPIx_Error+0x14>)
 8003222:	f004 f89f 	bl	8007364 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003226:	f7ff ff81 	bl	800312c <SPIx_Init>
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200002c0 	.word	0x200002c0

08003234 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <SPIx_MspInit+0x6c>)
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <SPIx_MspInit+0x6c>)
 8003246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324a:	6453      	str	r3, [r2, #68]	; 0x44
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <SPIx_MspInit+0x6c>)
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <SPIx_MspInit+0x6c>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <SPIx_MspInit+0x6c>)
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	6313      	str	r3, [r2, #48]	; 0x30
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <SPIx_MspInit+0x6c>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003274:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003278:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800327e:	2302      	movs	r3, #2
 8003280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003282:	2301      	movs	r3, #1
 8003284:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003286:	2305      	movs	r3, #5
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	4619      	mov	r1, r3
 8003290:	4804      	ldr	r0, [pc, #16]	; (80032a4 <SPIx_MspInit+0x70>)
 8003292:	f002 f89b 	bl	80053cc <HAL_GPIO_Init>
}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40021400 	.word	0x40021400

080032a8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <LCD_IO_Init+0xe0>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d164      	bne.n	8003380 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80032b6:	4b34      	ldr	r3, [pc, #208]	; (8003388 <LCD_IO_Init+0xe0>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <LCD_IO_Init+0xe4>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4a31      	ldr	r2, [pc, #196]	; (800338c <LCD_IO_Init+0xe4>)
 80032c6:	f043 0308 	orr.w	r3, r3, #8
 80032ca:	6313      	str	r3, [r2, #48]	; 0x30
 80032cc:	4b2f      	ldr	r3, [pc, #188]	; (800338c <LCD_IO_Init+0xe4>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80032d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032de:	2301      	movs	r3, #1
 80032e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032e6:	2302      	movs	r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	4619      	mov	r1, r3
 80032f0:	4827      	ldr	r0, [pc, #156]	; (8003390 <LCD_IO_Init+0xe8>)
 80032f2:	f002 f86b 	bl	80053cc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <LCD_IO_Init+0xe4>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	4a23      	ldr	r2, [pc, #140]	; (800338c <LCD_IO_Init+0xe4>)
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	6313      	str	r3, [r2, #48]	; 0x30
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <LCD_IO_Init+0xe4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003318:	2301      	movs	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003320:	2302      	movs	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003324:	f107 030c 	add.w	r3, r7, #12
 8003328:	4619      	mov	r1, r3
 800332a:	4819      	ldr	r0, [pc, #100]	; (8003390 <LCD_IO_Init+0xe8>)
 800332c:	f002 f84e 	bl	80053cc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003330:	2300      	movs	r3, #0
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <LCD_IO_Init+0xe4>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <LCD_IO_Init+0xe4>)
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	6313      	str	r3, [r2, #48]	; 0x30
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <LCD_IO_Init+0xe4>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800334c:	2304      	movs	r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003350:	2301      	movs	r3, #1
 8003352:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003358:	2302      	movs	r3, #2
 800335a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	4619      	mov	r1, r3
 8003362:	480c      	ldr	r0, [pc, #48]	; (8003394 <LCD_IO_Init+0xec>)
 8003364:	f002 f832 	bl	80053cc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003368:	2200      	movs	r2, #0
 800336a:	2104      	movs	r1, #4
 800336c:	4809      	ldr	r0, [pc, #36]	; (8003394 <LCD_IO_Init+0xec>)
 800336e:	f002 fae5 	bl	800593c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003372:	2201      	movs	r2, #1
 8003374:	2104      	movs	r1, #4
 8003376:	4807      	ldr	r0, [pc, #28]	; (8003394 <LCD_IO_Init+0xec>)
 8003378:	f002 fae0 	bl	800593c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800337c:	f7ff fed6 	bl	800312c <SPIx_Init>
  }
}
 8003380:	bf00      	nop
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000318 	.word	0x20000318
 800338c:	40023800 	.word	0x40023800
 8003390:	40020c00 	.word	0x40020c00
 8003394:	40020800 	.word	0x40020800

08003398 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80033a2:	2201      	movs	r2, #1
 80033a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033a8:	480a      	ldr	r0, [pc, #40]	; (80033d4 <LCD_IO_WriteData+0x3c>)
 80033aa:	f002 fac7 	bl	800593c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80033ae:	2200      	movs	r2, #0
 80033b0:	2104      	movs	r1, #4
 80033b2:	4809      	ldr	r0, [pc, #36]	; (80033d8 <LCD_IO_WriteData+0x40>)
 80033b4:	f002 fac2 	bl	800593c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff10 	bl	80031e0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033c0:	2201      	movs	r2, #1
 80033c2:	2104      	movs	r1, #4
 80033c4:	4804      	ldr	r0, [pc, #16]	; (80033d8 <LCD_IO_WriteData+0x40>)
 80033c6:	f002 fab9 	bl	800593c <HAL_GPIO_WritePin>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40020800 	.word	0x40020800

080033dc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80033e6:	2200      	movs	r2, #0
 80033e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ec:	480a      	ldr	r0, [pc, #40]	; (8003418 <LCD_IO_WriteReg+0x3c>)
 80033ee:	f002 faa5 	bl	800593c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80033f2:	2200      	movs	r2, #0
 80033f4:	2104      	movs	r1, #4
 80033f6:	4809      	ldr	r0, [pc, #36]	; (800341c <LCD_IO_WriteReg+0x40>)
 80033f8:	f002 faa0 	bl	800593c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff feed 	bl	80031e0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003406:	2201      	movs	r2, #1
 8003408:	2104      	movs	r1, #4
 800340a:	4804      	ldr	r0, [pc, #16]	; (800341c <LCD_IO_WriteReg+0x40>)
 800340c:	f002 fa96 	bl	800593c <HAL_GPIO_WritePin>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40020800 	.word	0x40020800

08003420 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	460a      	mov	r2, r1
 800342a:	80fb      	strh	r3, [r7, #6]
 800342c:	4613      	mov	r3, r2
 800342e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003434:	2200      	movs	r2, #0
 8003436:	2104      	movs	r1, #4
 8003438:	4810      	ldr	r0, [pc, #64]	; (800347c <LCD_IO_ReadData+0x5c>)
 800343a:	f002 fa7f 	bl	800593c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800343e:	2200      	movs	r2, #0
 8003440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003444:	480e      	ldr	r0, [pc, #56]	; (8003480 <LCD_IO_ReadData+0x60>)
 8003446:	f002 fa79 	bl	800593c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fec7 	bl	80031e0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003452:	797b      	ldrb	r3, [r7, #5]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fea3 	bl	80031a0 <SPIx_Read>
 800345a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800345c:	2201      	movs	r2, #1
 800345e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003462:	4807      	ldr	r0, [pc, #28]	; (8003480 <LCD_IO_ReadData+0x60>)
 8003464:	f002 fa6a 	bl	800593c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003468:	2201      	movs	r2, #1
 800346a:	2104      	movs	r1, #4
 800346c:	4803      	ldr	r0, [pc, #12]	; (800347c <LCD_IO_ReadData+0x5c>)
 800346e:	f002 fa65 	bl	800593c <HAL_GPIO_WritePin>
  
  return readvalue;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00

08003484 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f001 f921 	bl	80046d4 <HAL_Delay>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034a2:	4a2e      	ldr	r2, [pc, #184]	; (800355c <BSP_LCD_Init+0xc0>)
 80034a4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80034a6:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034a8:	2209      	movs	r2, #9
 80034aa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034b4:	221d      	movs	r2, #29
 80034b6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034ba:	2203      	movs	r2, #3
 80034bc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034c0:	f240 120d 	movw	r2, #269	; 0x10d
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034c8:	f240 1243 	movw	r2, #323	; 0x143
 80034cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034d0:	f240 1217 	movw	r2, #279	; 0x117
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034d8:	f240 1247 	movw	r2, #327	; 0x147
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80034de:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <BSP_LCD_Init+0xbc>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <BSP_LCD_Init+0xc4>)
 80034f8:	2208      	movs	r2, #8
 80034fa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <BSP_LCD_Init+0xc4>)
 80034fe:	22c0      	movs	r2, #192	; 0xc0
 8003500:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <BSP_LCD_Init+0xc4>)
 8003504:	2204      	movs	r2, #4
 8003506:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <BSP_LCD_Init+0xc4>)
 800350a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003510:	4813      	ldr	r0, [pc, #76]	; (8003560 <BSP_LCD_Init+0xc4>)
 8003512:	f003 fc61 	bl	8006dd8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <BSP_LCD_Init+0xbc>)
 8003518:	2200      	movs	r2, #0
 800351a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <BSP_LCD_Init+0xbc>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <BSP_LCD_Init+0xbc>)
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <BSP_LCD_Init+0xbc>)
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800352e:	f000 fcd7 	bl	8003ee0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003532:	4809      	ldr	r0, [pc, #36]	; (8003558 <BSP_LCD_Init+0xbc>)
 8003534:	f002 fbdc 	bl	8005cf0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <BSP_LCD_Init+0xc8>)
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <BSP_LCD_Init+0xcc>)
 800353c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <BSP_LCD_Init+0xc8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003546:	f000 feb9 	bl	80042bc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800354a:	4808      	ldr	r0, [pc, #32]	; (800356c <BSP_LCD_Init+0xd0>)
 800354c:	f000 f8b4 	bl	80036b8 <BSP_LCD_SetFont>

  return LCD_OK;
 8003550:	2300      	movs	r3, #0
}  
 8003552:	4618      	mov	r0, r3
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200006d4 	.word	0x200006d4
 800355c:	40016800 	.word	0x40016800
 8003560:	2000035c 	.word	0x2000035c
 8003564:	2000077c 	.word	0x2000077c
 8003568:	20000070 	.word	0x20000070
 800356c:	200000ac 	.word	0x200000ac

08003570 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <BSP_LCD_GetXSize+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	4798      	blx	r3
 800357c:	4603      	mov	r3, r0
}
 800357e:	4618      	mov	r0, r3
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000077c 	.word	0x2000077c

08003588 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <BSP_LCD_GetYSize+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4798      	blx	r3
 8003594:	4603      	mov	r3, r0
}
 8003596:	4618      	mov	r0, r3
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000077c 	.word	0x2000077c

080035a0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b090      	sub	sp, #64	; 0x40
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80035b0:	f7ff ffde 	bl	8003570 <BSP_LCD_GetXSize>
 80035b4:	4603      	mov	r3, r0
 80035b6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80035bc:	f7ff ffe4 	bl	8003588 <BSP_LCD_GetYSize>
 80035c0:	4603      	mov	r3, r0
 80035c2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80035cc:	23ff      	movs	r3, #255	; 0xff
 80035ce:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80035e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80035ec:	2307      	movs	r3, #7
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80035f0:	f7ff ffbe 	bl	8003570 <BSP_LCD_GetXSize>
 80035f4:	4603      	mov	r3, r0
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80035f8:	f7ff ffc6 	bl	8003588 <BSP_LCD_GetYSize>
 80035fc:	4603      	mov	r3, r0
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	4619      	mov	r1, r3
 8003608:	4814      	ldr	r0, [pc, #80]	; (800365c <BSP_LCD_LayerDefaultInit+0xbc>)
 800360a:	f002 fd03 	bl	8006014 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	4913      	ldr	r1, [pc, #76]	; (8003660 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3304      	adds	r3, #4
 800361e:	f04f 32ff 	mov.w	r2, #4294967295
 8003622:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003624:	88fa      	ldrh	r2, [r7, #6]
 8003626:	490e      	ldr	r1, [pc, #56]	; (8003660 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3308      	adds	r3, #8
 8003634:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003636:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	4909      	ldr	r1, [pc, #36]	; (8003660 <BSP_LCD_LayerDefaultInit+0xc0>)
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800364a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800364c:	4803      	ldr	r0, [pc, #12]	; (800365c <BSP_LCD_LayerDefaultInit+0xbc>)
 800364e:	f002 fd1f 	bl	8006090 <HAL_LTDC_EnableDither>
}
 8003652:	bf00      	nop
 8003654:	3740      	adds	r7, #64	; 0x40
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200006d4 	.word	0x200006d4
 8003660:	20000390 	.word	0x20000390
 8003664:	200000ac 	.word	0x200000ac

08003668 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <BSP_LCD_SelectLayer+0x1c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6013      	str	r3, [r2, #0]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	2000038c 	.word	0x2000038c

08003688 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <BSP_LCD_SetTextColor+0x28>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4907      	ldr	r1, [pc, #28]	; (80036b4 <BSP_LCD_SetTextColor+0x2c>)
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	2000038c 	.word	0x2000038c
 80036b4:	20000390 	.word	0x20000390

080036b8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <BSP_LCD_SetFont+0x2c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4908      	ldr	r1, [pc, #32]	; (80036e8 <BSP_LCD_SetFont+0x30>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3308      	adds	r3, #8
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000038c 	.word	0x2000038c
 80036e8:	20000390 	.word	0x20000390

080036ec <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <BSP_LCD_GetFont+0x24>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <BSP_LCD_GetFont+0x28>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3308      	adds	r3, #8
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	2000038c 	.word	0x2000038c
 8003714:	20000390 	.word	0x20000390

08003718 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371a:	b085      	sub	sp, #20
 800371c:	af02      	add	r7, sp, #8
 800371e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <BSP_LCD_Clear+0x48>)
 8003722:	681c      	ldr	r4, [r3, #0]
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <BSP_LCD_Clear+0x48>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <BSP_LCD_Clear+0x4c>)
 800372a:	2134      	movs	r1, #52	; 0x34
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	335c      	adds	r3, #92	; 0x5c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461e      	mov	r6, r3
 8003738:	f7ff ff1a 	bl	8003570 <BSP_LCD_GetXSize>
 800373c:	4605      	mov	r5, r0
 800373e:	f7ff ff23 	bl	8003588 <BSP_LCD_GetYSize>
 8003742:	4602      	mov	r2, r0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	2300      	movs	r3, #0
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	462a      	mov	r2, r5
 8003750:	4631      	mov	r1, r6
 8003752:	4620      	mov	r0, r4
 8003754:	f000 fd7a 	bl	800424c <FillBuffer>
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003760:	2000038c 	.word	0x2000038c
 8003764:	200006d4 	.word	0x200006d4

08003768 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
 8003772:	460b      	mov	r3, r1
 8003774:	80bb      	strh	r3, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <BSP_LCD_DisplayChar+0x80>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	491b      	ldr	r1, [pc, #108]	; (80037ec <BSP_LCD_DisplayChar+0x84>)
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3308      	adds	r3, #8
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <BSP_LCD_DisplayChar+0x80>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4c14      	ldr	r4, [pc, #80]	; (80037ec <BSP_LCD_DisplayChar+0x84>)
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4423      	add	r3, r4
 80037a6:	3308      	adds	r3, #8
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037ac:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <BSP_LCD_DisplayChar+0x80>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4c0d      	ldr	r4, [pc, #52]	; (80037ec <BSP_LCD_DisplayChar+0x84>)
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4423      	add	r3, r4
 80037c0:	3308      	adds	r3, #8
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	889b      	ldrh	r3, [r3, #4]
 80037c6:	3307      	adds	r3, #7
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da00      	bge.n	80037ce <BSP_LCD_DisplayChar+0x66>
 80037cc:	3307      	adds	r3, #7
 80037ce:	10db      	asrs	r3, r3, #3
 80037d0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037d4:	18ca      	adds	r2, r1, r3
 80037d6:	88b9      	ldrh	r1, [r7, #4]
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fc7c 	bl	80040d8 <DrawChar>
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}
 80037e8:	2000038c 	.word	0x2000038c
 80037ec:	20000390 	.word	0x20000390

080037f0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60ba      	str	r2, [r7, #8]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	81fb      	strh	r3, [r7, #14]
 80037fe:	460b      	mov	r3, r1
 8003800:	81bb      	strh	r3, [r7, #12]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003806:	2301      	movs	r3, #1
 8003808:	83fb      	strh	r3, [r7, #30]
 800380a:	2300      	movs	r3, #0
 800380c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800381a:	e002      	b.n	8003822 <BSP_LCD_DisplayStringAt+0x32>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	3301      	adds	r3, #1
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	617a      	str	r2, [r7, #20]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f6      	bne.n	800381c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800382e:	f7ff fe9f 	bl	8003570 <BSP_LCD_GetXSize>
 8003832:	4601      	mov	r1, r0
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <BSP_LCD_DisplayStringAt+0x174>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	484b      	ldr	r0, [pc, #300]	; (8003968 <BSP_LCD_DisplayStringAt+0x178>)
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4403      	add	r3, r0
 8003844:	3308      	adds	r3, #8
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	889b      	ldrh	r3, [r3, #4]
 800384a:	fbb1 f3f3 	udiv	r3, r1, r3
 800384e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d01c      	beq.n	8003890 <BSP_LCD_DisplayStringAt+0xa0>
 8003856:	2b03      	cmp	r3, #3
 8003858:	dc33      	bgt.n	80038c2 <BSP_LCD_DisplayStringAt+0xd2>
 800385a:	2b01      	cmp	r3, #1
 800385c:	d002      	beq.n	8003864 <BSP_LCD_DisplayStringAt+0x74>
 800385e:	2b02      	cmp	r3, #2
 8003860:	d019      	beq.n	8003896 <BSP_LCD_DisplayStringAt+0xa6>
 8003862:	e02e      	b.n	80038c2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	1ad1      	subs	r1, r2, r3
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <BSP_LCD_DisplayStringAt+0x174>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	483e      	ldr	r0, [pc, #248]	; (8003968 <BSP_LCD_DisplayStringAt+0x178>)
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4403      	add	r3, r0
 800387a:	3308      	adds	r3, #8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	889b      	ldrh	r3, [r3, #4]
 8003880:	fb03 f301 	mul.w	r3, r3, r1
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	89fb      	ldrh	r3, [r7, #14]
 800388a:	4413      	add	r3, r2
 800388c:	83fb      	strh	r3, [r7, #30]
      break;
 800388e:	e01b      	b.n	80038c8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	83fb      	strh	r3, [r7, #30]
      break;
 8003894:	e018      	b.n	80038c8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b299      	uxth	r1, r3
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <BSP_LCD_DisplayStringAt+0x174>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4831      	ldr	r0, [pc, #196]	; (8003968 <BSP_LCD_DisplayStringAt+0x178>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4403      	add	r3, r0
 80038ae:	3308      	adds	r3, #8
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	889b      	ldrh	r3, [r3, #4]
 80038b4:	fb11 f303 	smulbb	r3, r1, r3
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	89fb      	ldrh	r3, [r7, #14]
 80038bc:	4413      	add	r3, r2
 80038be:	83fb      	strh	r3, [r7, #30]
      break;
 80038c0:	e002      	b.n	80038c8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80038c2:	89fb      	ldrh	r3, [r7, #14]
 80038c4:	83fb      	strh	r3, [r7, #30]
      break;
 80038c6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038c8:	e01a      	b.n	8003900 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	89b9      	ldrh	r1, [r7, #12]
 80038d0:	8bfb      	ldrh	r3, [r7, #30]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff48 	bl	8003768 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <BSP_LCD_DisplayStringAt+0x174>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4922      	ldr	r1, [pc, #136]	; (8003968 <BSP_LCD_DisplayStringAt+0x178>)
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3308      	adds	r3, #8
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	889a      	ldrh	r2, [r3, #4]
 80038ee:	8bfb      	ldrh	r3, [r7, #30]
 80038f0:	4413      	add	r3, r2
 80038f2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
    i++;
 80038fa:	8bbb      	ldrh	r3, [r7, #28]
 80038fc:	3301      	adds	r3, #1
 80038fe:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2dc      	uxtb	r4, r3
 800390e:	f7ff fe2f 	bl	8003570 <BSP_LCD_GetXSize>
 8003912:	8bb9      	ldrh	r1, [r7, #28]
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <BSP_LCD_DisplayStringAt+0x174>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4d13      	ldr	r5, [pc, #76]	; (8003968 <BSP_LCD_DisplayStringAt+0x178>)
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	442b      	add	r3, r5
 8003924:	3308      	adds	r3, #8
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	889b      	ldrh	r3, [r3, #4]
 800392a:	fb03 f301 	mul.w	r3, r3, r1
 800392e:	1ac3      	subs	r3, r0, r3
 8003930:	b299      	uxth	r1, r3
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <BSP_LCD_DisplayStringAt+0x174>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	480c      	ldr	r0, [pc, #48]	; (8003968 <BSP_LCD_DisplayStringAt+0x178>)
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4403      	add	r3, r0
 8003942:	3308      	adds	r3, #8
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	889b      	ldrh	r3, [r3, #4]
 8003948:	4299      	cmp	r1, r3
 800394a:	bf2c      	ite	cs
 800394c:	2301      	movcs	r3, #1
 800394e:	2300      	movcc	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4023      	ands	r3, r4
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1b7      	bne.n	80038ca <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bdb0      	pop	{r4, r5, r7, pc}
 8003964:	2000038c 	.word	0x2000038c
 8003968:	20000390 	.word	0x20000390

0800396c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003978:	f7ff feb8 	bl	80036ec <BSP_LCD_GetFont>
 800397c:	4603      	mov	r3, r0
 800397e:	88db      	ldrh	r3, [r3, #6]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	fb12 f303 	smulbb	r3, r2, r3
 8003986:	b299      	uxth	r1, r3
 8003988:	2303      	movs	r3, #3
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	2000      	movs	r0, #0
 800398e:	f7ff ff2f 	bl	80037f0 <BSP_LCD_DisplayStringAt>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	4603      	mov	r3, r0
 80039a4:	80fb      	strh	r3, [r7, #6]
 80039a6:	460b      	mov	r3, r1
 80039a8:	80bb      	strh	r3, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <BSP_LCD_DrawHLine+0x70>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <BSP_LCD_DrawHLine+0x74>)
 80039b8:	2134      	movs	r1, #52	; 0x34
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	335c      	adds	r3, #92	; 0x5c
 80039c2:	681c      	ldr	r4, [r3, #0]
 80039c4:	f7ff fdd4 	bl	8003570 <BSP_LCD_GetXSize>
 80039c8:	4602      	mov	r2, r0
 80039ca:	88bb      	ldrh	r3, [r7, #4]
 80039cc:	fb03 f202 	mul.w	r2, r3, r2
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4423      	add	r3, r4
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <BSP_LCD_DrawHLine+0x70>)
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	887c      	ldrh	r4, [r7, #2]
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <BSP_LCD_DrawHLine+0x70>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4d0b      	ldr	r5, [pc, #44]	; (8003a14 <BSP_LCD_DrawHLine+0x78>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	442b      	add	r3, r5
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	4622      	mov	r2, r4
 80039fe:	f000 fc25 	bl	800424c <FillBuffer>
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000038c 	.word	0x2000038c
 8003a10:	200006d4 	.word	0x200006d4
 8003a14:	20000390 	.word	0x20000390

08003a18 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b08b      	sub	sp, #44	; 0x2c
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	80fb      	strh	r3, [r7, #6]
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80bb      	strh	r3, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	807b      	strh	r3, [r7, #2]
 8003a32:	4613      	mov	r3, r2
 8003a34:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003a36:	2300      	movs	r3, #0
 8003a38:	823b      	strh	r3, [r7, #16]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	81fb      	strh	r3, [r7, #14]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a42:	2300      	movs	r3, #0
 8003a44:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003a46:	2300      	movs	r3, #0
 8003a48:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003a4e:	2300      	movs	r3, #0
 8003a50:	83fb      	strh	r3, [r7, #30]
 8003a52:	2300      	movs	r3, #0
 8003a54:	83bb      	strh	r3, [r7, #28]
 8003a56:	2300      	movs	r3, #0
 8003a58:	837b      	strh	r3, [r7, #26]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	833b      	strh	r3, [r7, #24]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	82fb      	strh	r3, [r7, #22]
 8003a62:	2300      	movs	r3, #0
 8003a64:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfb8      	it	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003a78:	883a      	ldrh	r2, [r7, #0]
 8003a7a:	88bb      	ldrh	r3, [r7, #4]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bfb8      	it	lt
 8003a82:	425b      	neglt	r3, r3
 8003a84:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003a8a:	88bb      	ldrh	r3, [r7, #4]
 8003a8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d304      	bcc.n	8003aa0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	843b      	strh	r3, [r7, #32]
 8003a9e:	e005      	b.n	8003aac <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aa4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aaa:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003aac:	883a      	ldrh	r2, [r7, #0]
 8003aae:	88bb      	ldrh	r3, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d304      	bcc.n	8003abe <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	83bb      	strh	r3, [r7, #28]
 8003abc:	e005      	b.n	8003aca <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ac2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ac8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003aca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003ace:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	db10      	blt.n	8003af8 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003ada:	2300      	movs	r3, #0
 8003adc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003ade:	8a3b      	ldrh	r3, [r7, #16]
 8003ae0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003ae2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ae6:	0fda      	lsrs	r2, r3, #31
 8003ae8:	4413      	add	r3, r2
 8003aea:	105b      	asrs	r3, r3, #1
 8003aec:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003aee:	89fb      	ldrh	r3, [r7, #14]
 8003af0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003af2:	8a3b      	ldrh	r3, [r7, #16]
 8003af4:	82bb      	strh	r3, [r7, #20]
 8003af6:	e00f      	b.n	8003b18 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003af8:	2300      	movs	r3, #0
 8003afa:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003afc:	2300      	movs	r3, #0
 8003afe:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003b00:	89fb      	ldrh	r3, [r7, #14]
 8003b02:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b08:	0fda      	lsrs	r2, r3, #31
 8003b0a:	4413      	add	r3, r2
 8003b0c:	105b      	asrs	r3, r3, #1
 8003b0e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003b10:	8a3b      	ldrh	r3, [r7, #16]
 8003b12:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003b14:	89fb      	ldrh	r3, [r7, #14]
 8003b16:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	827b      	strh	r3, [r7, #18]
 8003b1c:	e037      	b.n	8003b8e <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003b1e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003b20:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <BSP_LCD_DrawLine+0x18c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4c20      	ldr	r4, [pc, #128]	; (8003ba8 <BSP_LCD_DrawLine+0x190>)
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4423      	add	r3, r4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	f000 faa9 	bl	800408c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003b3a:	8b3a      	ldrh	r2, [r7, #24]
 8003b3c:	8afb      	ldrh	r3, [r7, #22]
 8003b3e:	4413      	add	r3, r2
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003b44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003b48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	db0e      	blt.n	8003b6e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003b50:	8b3a      	ldrh	r2, [r7, #24]
 8003b52:	8b7b      	ldrh	r3, [r7, #26]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003b5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b5e:	4413      	add	r3, r2
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003b64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b66:	8bfb      	ldrh	r3, [r7, #30]
 8003b68:	4413      	add	r3, r2
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003b6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b70:	8c3b      	ldrh	r3, [r7, #32]
 8003b72:	4413      	add	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003b78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b7a:	8bbb      	ldrh	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003b82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	827b      	strh	r3, [r7, #18]
 8003b8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003b92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	ddc1      	ble.n	8003b1e <BSP_LCD_DrawLine+0x106>
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	372c      	adds	r7, #44	; 0x2c
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	2000038c 	.word	0x2000038c
 8003ba8:	20000390 	.word	0x20000390

08003bac <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	80fb      	strh	r3, [r7, #6]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	80bb      	strh	r3, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	f1c3 0303 	rsb	r3, r3, #3
 8003bc6:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003bd0:	e0c7      	b.n	8003d62 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	4413      	add	r3, r2
 8003bda:	b298      	uxth	r0, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	88ba      	ldrh	r2, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b299      	uxth	r1, r3
 8003be6:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4c64      	ldr	r4, [pc, #400]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003bec:	4613      	mov	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4423      	add	r3, r4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 fa47 	bl	800408c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	b298      	uxth	r0, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	88ba      	ldrh	r2, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	b299      	uxth	r1, r3
 8003c12:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4c59      	ldr	r4, [pc, #356]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4423      	add	r3, r4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f000 fa31 	bl	800408c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	4413      	add	r3, r2
 8003c32:	b298      	uxth	r0, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	88ba      	ldrh	r2, [r7, #4]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	b299      	uxth	r1, r3
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4c4e      	ldr	r4, [pc, #312]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4423      	add	r3, r4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	f000 fa1b 	bl	800408c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	b298      	uxth	r0, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	88ba      	ldrh	r2, [r7, #4]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	b299      	uxth	r1, r3
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4c43      	ldr	r4, [pc, #268]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4423      	add	r3, r4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f000 fa05 	bl	800408c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	4413      	add	r3, r2
 8003c8a:	b298      	uxth	r0, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	88bb      	ldrh	r3, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	b299      	uxth	r1, r3
 8003c96:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4c38      	ldr	r4, [pc, #224]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4423      	add	r3, r4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f000 f9ef 	bl	800408c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	b298      	uxth	r0, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	88bb      	ldrh	r3, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	b299      	uxth	r1, r3
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4c2d      	ldr	r4, [pc, #180]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4423      	add	r3, r4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f000 f9d9 	bl	800408c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	b298      	uxth	r0, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	88bb      	ldrh	r3, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	b299      	uxth	r1, r3
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4c22      	ldr	r4, [pc, #136]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4423      	add	r3, r4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f000 f9c3 	bl	800408c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	b298      	uxth	r0, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	88bb      	ldrh	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	b299      	uxth	r1, r3
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <BSP_LCD_DrawCircle+0x1cc>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4c17      	ldr	r4, [pc, #92]	; (8003d7c <BSP_LCD_DrawCircle+0x1d0>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4423      	add	r3, r4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f000 f9ad 	bl	800408c <BSP_LCD_DrawPixel>

    if (d < 0)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	da06      	bge.n	8003d46 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	009a      	lsls	r2, r3, #2
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4413      	add	r3, r2
 8003d40:	3306      	adds	r3, #6
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e00a      	b.n	8003d5c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	009a      	lsls	r2, r3, #2
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4413      	add	r3, r2
 8003d52:	330a      	adds	r3, #10
 8003d54:	617b      	str	r3, [r7, #20]
      cury--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	f67f af33 	bls.w	8003bd2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd90      	pop	{r4, r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000038c 	.word	0x2000038c
 8003d7c:	20000390 	.word	0x20000390

08003d80 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	80bb      	strh	r3, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	f1c3 0303 	rsb	r3, r3, #3
 8003d9a:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003da4:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <BSP_LCD_FillCircle+0x138>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4944      	ldr	r1, [pc, #272]	; (8003ebc <BSP_LCD_FillCircle+0x13c>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fc66 	bl	8003688 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003dbc:	e061      	b.n	8003e82 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d021      	beq.n	8003e08 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	b298      	uxth	r0, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	88bb      	ldrh	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	f7ff fddb 	bl	800399c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	b298      	uxth	r0, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	88ba      	ldrh	r2, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	f7ff fdca 	bl	800399c <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d021      	beq.n	8003e52 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	b298      	uxth	r0, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	88ba      	ldrh	r2, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	b299      	uxth	r1, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f7ff fdb6 	bl	800399c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	b298      	uxth	r0, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	88bb      	ldrh	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	b299      	uxth	r1, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f7ff fda5 	bl	800399c <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	da06      	bge.n	8003e66 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3306      	adds	r3, #6
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e00a      	b.n	8003e7c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	330a      	adds	r3, #10
 8003e74:	617b      	str	r3, [r7, #20]
      cury--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d999      	bls.n	8003dbe <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <BSP_LCD_FillCircle+0x138>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	490b      	ldr	r1, [pc, #44]	; (8003ebc <BSP_LCD_FillCircle+0x13c>)
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fbf3 	bl	8003688 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	88b9      	ldrh	r1, [r7, #4]
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fe7f 	bl	8003bac <BSP_LCD_DrawCircle>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000038c 	.word	0x2000038c
 8003ebc:	20000390 	.word	0x20000390

08003ec0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <BSP_LCD_DisplayOn+0x1c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <BSP_LCD_DisplayOn+0x1c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4798      	blx	r3
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	2000077c 	.word	0x2000077c

08003ee0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	; 0x38
 8003ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	4b61      	ldr	r3, [pc, #388]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a60      	ldr	r2, [pc, #384]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b5e      	ldr	r3, [pc, #376]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	4b5a      	ldr	r3, [pc, #360]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a59      	ldr	r2, [pc, #356]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b57      	ldr	r3, [pc, #348]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	4b53      	ldr	r3, [pc, #332]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	4a52      	ldr	r2, [pc, #328]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2e:	4b50      	ldr	r3, [pc, #320]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	4b4c      	ldr	r3, [pc, #304]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4a:	4b49      	ldr	r3, [pc, #292]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	4b45      	ldr	r3, [pc, #276]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	4a44      	ldr	r2, [pc, #272]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f60:	f043 0304 	orr.w	r3, r3, #4
 8003f64:	6313      	str	r3, [r2, #48]	; 0x30
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a3d      	ldr	r2, [pc, #244]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a36      	ldr	r2, [pc, #216]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003f98:	f043 0320 	orr.w	r3, r3, #32
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b34      	ldr	r3, [pc, #208]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	4b30      	ldr	r3, [pc, #192]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4a2f      	ldr	r2, [pc, #188]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <BSP_LCD_MspInit+0x190>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003fc6:	f641 0358 	movw	r3, #6232	; 0x1858
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003fd8:	230e      	movs	r3, #14
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4824      	ldr	r0, [pc, #144]	; (8004074 <BSP_LCD_MspInit+0x194>)
 8003fe4:	f001 f9f2 	bl	80053cc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003fe8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4820      	ldr	r0, [pc, #128]	; (8004078 <BSP_LCD_MspInit+0x198>)
 8003ff6:	f001 f9e9 	bl	80053cc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003ffa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004004:	4619      	mov	r1, r3
 8004006:	481d      	ldr	r0, [pc, #116]	; (800407c <BSP_LCD_MspInit+0x19c>)
 8004008:	f001 f9e0 	bl	80053cc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800400c:	2348      	movs	r3, #72	; 0x48
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004014:	4619      	mov	r1, r3
 8004016:	481a      	ldr	r0, [pc, #104]	; (8004080 <BSP_LCD_MspInit+0x1a0>)
 8004018:	f001 f9d8 	bl	80053cc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800401c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004026:	4619      	mov	r1, r3
 8004028:	4816      	ldr	r0, [pc, #88]	; (8004084 <BSP_LCD_MspInit+0x1a4>)
 800402a:	f001 f9cf 	bl	80053cc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800402e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004038:	4619      	mov	r1, r3
 800403a:	4813      	ldr	r0, [pc, #76]	; (8004088 <BSP_LCD_MspInit+0x1a8>)
 800403c:	f001 f9c6 	bl	80053cc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004040:	2303      	movs	r3, #3
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004044:	2309      	movs	r3, #9
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800404c:	4619      	mov	r1, r3
 800404e:	480a      	ldr	r0, [pc, #40]	; (8004078 <BSP_LCD_MspInit+0x198>)
 8004050:	f001 f9bc 	bl	80053cc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004054:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800405a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800405e:	4619      	mov	r1, r3
 8004060:	4809      	ldr	r0, [pc, #36]	; (8004088 <BSP_LCD_MspInit+0x1a8>)
 8004062:	f001 f9b3 	bl	80053cc <HAL_GPIO_Init>
}
 8004066:	bf00      	nop
 8004068:	3738      	adds	r7, #56	; 0x38
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	40020000 	.word	0x40020000
 8004078:	40020400 	.word	0x40020400
 800407c:	40020800 	.word	0x40020800
 8004080:	40020c00 	.word	0x40020c00
 8004084:	40021400 	.word	0x40021400
 8004088:	40021800 	.word	0x40021800

0800408c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	603a      	str	r2, [r7, #0]
 8004096:	80fb      	strh	r3, [r7, #6]
 8004098:	460b      	mov	r3, r1
 800409a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <BSP_LCD_DrawPixel+0x44>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <BSP_LCD_DrawPixel+0x48>)
 80040a2:	2134      	movs	r1, #52	; 0x34
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	335c      	adds	r3, #92	; 0x5c
 80040ac:	681c      	ldr	r4, [r3, #0]
 80040ae:	88bd      	ldrh	r5, [r7, #4]
 80040b0:	f7ff fa5e 	bl	8003570 <BSP_LCD_GetXSize>
 80040b4:	4603      	mov	r3, r0
 80040b6:	fb03 f205 	mul.w	r2, r3, r5
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4423      	add	r3, r4
 80040c2:	461a      	mov	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bdb0      	pop	{r4, r5, r7, pc}
 80040d0:	2000038c 	.word	0x2000038c
 80040d4:	200006d4 	.word	0x200006d4

080040d8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	603a      	str	r2, [r7, #0]
 80040e2:	80fb      	strh	r3, [r7, #6]
 80040e4:	460b      	mov	r3, r1
 80040e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80040f4:	4b53      	ldr	r3, [pc, #332]	; (8004244 <DrawChar+0x16c>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4953      	ldr	r1, [pc, #332]	; (8004248 <DrawChar+0x170>)
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3308      	adds	r3, #8
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	88db      	ldrh	r3, [r3, #6]
 800410a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800410c:	4b4d      	ldr	r3, [pc, #308]	; (8004244 <DrawChar+0x16c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	494d      	ldr	r1, [pc, #308]	; (8004248 <DrawChar+0x170>)
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3308      	adds	r3, #8
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	889b      	ldrh	r3, [r3, #4]
 8004122:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004124:	8a3b      	ldrh	r3, [r7, #16]
 8004126:	3307      	adds	r3, #7
 8004128:	2b00      	cmp	r3, #0
 800412a:	da00      	bge.n	800412e <DrawChar+0x56>
 800412c:	3307      	adds	r3, #7
 800412e:	10db      	asrs	r3, r3, #3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	b2da      	uxtb	r2, r3
 8004136:	8a3b      	ldrh	r3, [r7, #16]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e076      	b.n	8004232 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004144:	8a3b      	ldrh	r3, [r7, #16]
 8004146:	3307      	adds	r3, #7
 8004148:	2b00      	cmp	r3, #0
 800414a:	da00      	bge.n	800414e <DrawChar+0x76>
 800414c:	3307      	adds	r3, #7
 800414e:	10db      	asrs	r3, r3, #3
 8004150:	461a      	mov	r2, r3
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fb03 f302 	mul.w	r3, r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	4413      	add	r3, r2
 800415c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800415e:	8a3b      	ldrh	r3, [r7, #16]
 8004160:	3307      	adds	r3, #7
 8004162:	2b00      	cmp	r3, #0
 8004164:	da00      	bge.n	8004168 <DrawChar+0x90>
 8004166:	3307      	adds	r3, #7
 8004168:	10db      	asrs	r3, r3, #3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d002      	beq.n	8004174 <DrawChar+0x9c>
 800416e:	2b02      	cmp	r3, #2
 8004170:	d004      	beq.n	800417c <DrawChar+0xa4>
 8004172:	e00c      	b.n	800418e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	e016      	b.n	80041aa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	3201      	adds	r2, #1
 8004186:	7812      	ldrb	r2, [r2, #0]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
      break;
 800418c:	e00d      	b.n	80041aa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	041a      	lsls	r2, r3, #16
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3301      	adds	r3, #1
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	4313      	orrs	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	3202      	adds	r2, #2
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
      break;
 80041a8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e036      	b.n	800421e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80041b0:	8a3a      	ldrh	r2, [r7, #16]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	1ad2      	subs	r2, r2, r3
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	4413      	add	r3, r2
 80041ba:	3b01      	subs	r3, #1
 80041bc:	2201      	movs	r2, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	4413      	add	r3, r2
 80041d4:	b298      	uxth	r0, r3
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <DrawChar+0x16c>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	491b      	ldr	r1, [pc, #108]	; (8004248 <DrawChar+0x170>)
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	88bb      	ldrh	r3, [r7, #4]
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7ff ff4e 	bl	800408c <BSP_LCD_DrawPixel>
 80041f0:	e012      	b.n	8004218 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	4413      	add	r3, r2
 80041fa:	b298      	uxth	r0, r3
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <DrawChar+0x16c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4911      	ldr	r1, [pc, #68]	; (8004248 <DrawChar+0x170>)
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	3304      	adds	r3, #4
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	88bb      	ldrh	r3, [r7, #4]
 8004212:	4619      	mov	r1, r3
 8004214:	f7ff ff3a 	bl	800408c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	3301      	adds	r3, #1
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	8a3b      	ldrh	r3, [r7, #16]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3c4      	bcc.n	80041b0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004226:	88bb      	ldrh	r3, [r7, #4]
 8004228:	3301      	adds	r3, #1
 800422a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	8a7b      	ldrh	r3, [r7, #18]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	429a      	cmp	r2, r3
 8004238:	d384      	bcc.n	8004144 <DrawChar+0x6c>
  }
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	3720      	adds	r7, #32
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	2000038c 	.word	0x2000038c
 8004248:	20000390 	.word	0x20000390

0800424c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800425a:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <FillBuffer+0x68>)
 800425c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004260:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <FillBuffer+0x68>)
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004268:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <FillBuffer+0x68>)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <FillBuffer+0x68>)
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <FillBuffer+0x6c>)
 8004272:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004274:	480f      	ldr	r0, [pc, #60]	; (80042b4 <FillBuffer+0x68>)
 8004276:	f000 fd0d 	bl	8004c94 <HAL_DMA2D_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d115      	bne.n	80042ac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	480c      	ldr	r0, [pc, #48]	; (80042b4 <FillBuffer+0x68>)
 8004284:	f000 ff74 	bl	8005170 <HAL_DMA2D_ConfigLayer>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10e      	bne.n	80042ac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69f9      	ldr	r1, [r7, #28]
 8004298:	4806      	ldr	r0, [pc, #24]	; (80042b4 <FillBuffer+0x68>)
 800429a:	f000 fd44 	bl	8004d26 <HAL_DMA2D_Start>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80042a4:	210a      	movs	r1, #10
 80042a6:	4803      	ldr	r0, [pc, #12]	; (80042b4 <FillBuffer+0x68>)
 80042a8:	f000 fd68 	bl	8004d7c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	2000031c 	.word	0x2000031c
 80042b8:	4002b000 	.word	0x4002b000

080042bc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <BSP_SDRAM_Init+0xac>)
 80042c2:	4a2a      	ldr	r2, [pc, #168]	; (800436c <BSP_SDRAM_Init+0xb0>)
 80042c4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 80042c8:	2202      	movs	r2, #2
 80042ca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80042cc:	4b28      	ldr	r3, [pc, #160]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 80042ce:	2207      	movs	r2, #7
 80042d0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80042d2:	4b27      	ldr	r3, [pc, #156]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 80042d4:	2204      	movs	r2, #4
 80042d6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 80042da:	2207      	movs	r2, #7
 80042dc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 80042e0:	2202      	movs	r2, #2
 80042e2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 80042e6:	2202      	movs	r2, #2
 80042e8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80042ea:	4b21      	ldr	r3, [pc, #132]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 80042ec:	2202      	movs	r2, #2
 80042ee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <BSP_SDRAM_Init+0xac>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <BSP_SDRAM_Init+0xac>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <BSP_SDRAM_Init+0xac>)
 80042fe:	2204      	movs	r2, #4
 8004300:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004302:	4b19      	ldr	r3, [pc, #100]	; (8004368 <BSP_SDRAM_Init+0xac>)
 8004304:	2210      	movs	r2, #16
 8004306:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <BSP_SDRAM_Init+0xac>)
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <BSP_SDRAM_Init+0xac>)
 8004310:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004314:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <BSP_SDRAM_Init+0xac>)
 8004318:	2200      	movs	r2, #0
 800431a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <BSP_SDRAM_Init+0xac>)
 800431e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004322:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <BSP_SDRAM_Init+0xac>)
 8004326:	2200      	movs	r2, #0
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <BSP_SDRAM_Init+0xac>)
 800432c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004332:	2100      	movs	r1, #0
 8004334:	480c      	ldr	r0, [pc, #48]	; (8004368 <BSP_SDRAM_Init+0xac>)
 8004336:	f000 f87f 	bl	8004438 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800433a:	490d      	ldr	r1, [pc, #52]	; (8004370 <BSP_SDRAM_Init+0xb4>)
 800433c:	480a      	ldr	r0, [pc, #40]	; (8004368 <BSP_SDRAM_Init+0xac>)
 800433e:	f002 ff09 	bl	8007154 <HAL_SDRAM_Init>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <BSP_SDRAM_Init+0xb8>)
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e002      	b.n	8004356 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <BSP_SDRAM_Init+0xb8>)
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004356:	f240 506a 	movw	r0, #1386	; 0x56a
 800435a:	f000 f80d 	bl	8004378 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <BSP_SDRAM_Init+0xb8>)
 8004360:	781b      	ldrb	r3, [r3, #0]
}
 8004362:	4618      	mov	r0, r3
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200003a8 	.word	0x200003a8
 800436c:	a0000140 	.word	0xa0000140
 8004370:	200003dc 	.word	0x200003dc
 8004374:	200000b4 	.word	0x200000b4

08004378 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004384:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800438a:	4b29      	ldr	r3, [pc, #164]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800438c:	2208      	movs	r2, #8
 800438e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004392:	2201      	movs	r2, #1
 8004394:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004396:	4b26      	ldr	r3, [pc, #152]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004398:	2200      	movs	r2, #0
 800439a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800439c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a0:	4923      	ldr	r1, [pc, #140]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043a2:	4824      	ldr	r0, [pc, #144]	; (8004434 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043a4:	f002 ff0a 	bl	80071bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80043a8:	2001      	movs	r0, #1
 80043aa:	f000 f993 	bl	80046d4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043b0:	2202      	movs	r2, #2
 80043b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80043b4:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043b6:	2208      	movs	r2, #8
 80043b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80043ba:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043bc:	2201      	movs	r2, #1
 80043be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80043c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ca:	4919      	ldr	r1, [pc, #100]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043cc:	4819      	ldr	r0, [pc, #100]	; (8004434 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043ce:	f002 fef5 	bl	80071bc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043d4:	2203      	movs	r2, #3
 80043d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043da:	2208      	movs	r2, #8
 80043dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043e0:	2204      	movs	r2, #4
 80043e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80043ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ee:	4910      	ldr	r1, [pc, #64]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043f0:	4810      	ldr	r0, [pc, #64]	; (8004434 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043f2:	f002 fee3 	bl	80071bc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80043f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80043fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043fe:	2204      	movs	r2, #4
 8004400:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004404:	2208      	movs	r2, #8
 8004406:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800440a:	2201      	movs	r2, #1
 800440c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a07      	ldr	r2, [pc, #28]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004412:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004418:	4905      	ldr	r1, [pc, #20]	; (8004430 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800441a:	4806      	ldr	r0, [pc, #24]	; (8004434 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800441c:	f002 fece 	bl	80071bc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4804      	ldr	r0, [pc, #16]	; (8004434 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004424:	f002 fef5 	bl	8007212 <HAL_SDRAM_ProgramRefreshRate>
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	200003f8 	.word	0x200003f8
 8004434:	200003a8 	.word	0x200003a8

08004438 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b090      	sub	sp, #64	; 0x40
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80ec 	beq.w	8004622 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	4b77      	ldr	r3, [pc, #476]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	4a76      	ldr	r2, [pc, #472]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	6393      	str	r3, [r2, #56]	; 0x38
 800445a:	4b74      	ldr	r3, [pc, #464]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	4b70      	ldr	r3, [pc, #448]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a6f      	ldr	r2, [pc, #444]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b6d      	ldr	r3, [pc, #436]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	4b69      	ldr	r3, [pc, #420]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a68      	ldr	r2, [pc, #416]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b66      	ldr	r3, [pc, #408]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	623b      	str	r3, [r7, #32]
 800449c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	4b62      	ldr	r3, [pc, #392]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a61      	ldr	r2, [pc, #388]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b5f      	ldr	r3, [pc, #380]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	4b5b      	ldr	r3, [pc, #364]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a5a      	ldr	r2, [pc, #360]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b58      	ldr	r3, [pc, #352]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	4b54      	ldr	r3, [pc, #336]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	4a53      	ldr	r2, [pc, #332]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044e0:	f043 0310 	orr.w	r3, r3, #16
 80044e4:	6313      	str	r3, [r2, #48]	; 0x30
 80044e6:	4b51      	ldr	r3, [pc, #324]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	4b4d      	ldr	r3, [pc, #308]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	4a4c      	ldr	r2, [pc, #304]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 80044fc:	f043 0320 	orr.w	r3, r3, #32
 8004500:	6313      	str	r3, [r2, #48]	; 0x30
 8004502:	4b4a      	ldr	r3, [pc, #296]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	4a45      	ldr	r2, [pc, #276]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451c:	6313      	str	r3, [r2, #48]	; 0x30
 800451e:	4b43      	ldr	r3, [pc, #268]	; (800462c <BSP_SDRAM_MspInit+0x1f4>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800452a:	2302      	movs	r3, #2
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800452e:	2302      	movs	r3, #2
 8004530:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004536:	230c      	movs	r3, #12
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800453a:	2360      	movs	r3, #96	; 0x60
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800453e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004542:	4619      	mov	r1, r3
 8004544:	483a      	ldr	r0, [pc, #232]	; (8004630 <BSP_SDRAM_MspInit+0x1f8>)
 8004546:	f000 ff41 	bl	80053cc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800454a:	2301      	movs	r3, #1
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800454e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004552:	4619      	mov	r1, r3
 8004554:	4837      	ldr	r0, [pc, #220]	; (8004634 <BSP_SDRAM_MspInit+0x1fc>)
 8004556:	f000 ff39 	bl	80053cc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800455a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004564:	4619      	mov	r1, r3
 8004566:	4834      	ldr	r0, [pc, #208]	; (8004638 <BSP_SDRAM_MspInit+0x200>)
 8004568:	f000 ff30 	bl	80053cc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800456c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	4830      	ldr	r0, [pc, #192]	; (800463c <BSP_SDRAM_MspInit+0x204>)
 800457a:	f000 ff27 	bl	80053cc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800457e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004588:	4619      	mov	r1, r3
 800458a:	482d      	ldr	r0, [pc, #180]	; (8004640 <BSP_SDRAM_MspInit+0x208>)
 800458c:	f000 ff1e 	bl	80053cc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004590:	f248 1333 	movw	r3, #33075	; 0x8133
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800459a:	4619      	mov	r1, r3
 800459c:	4829      	ldr	r0, [pc, #164]	; (8004644 <BSP_SDRAM_MspInit+0x20c>)
 800459e:	f000 ff15 	bl	80053cc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045bc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045be:	4b22      	ldr	r3, [pc, #136]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045c4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80045c6:	4b20      	ldr	r3, [pc, #128]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045cc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80045d4:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045da:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045de:	2200      	movs	r2, #0
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80045e2:	4b19      	ldr	r3, [pc, #100]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045e4:	2203      	movs	r2, #3
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80045e8:	4b17      	ldr	r3, [pc, #92]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045f6:	4a15      	ldr	r2, [pc, #84]	; (800464c <BSP_SDRAM_MspInit+0x214>)
 80045f8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a12      	ldr	r2, [pc, #72]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004600:	4a11      	ldr	r2, [pc, #68]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004606:	4810      	ldr	r0, [pc, #64]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 8004608:	f000 fa34 	bl	8004a74 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800460c:	480e      	ldr	r0, [pc, #56]	; (8004648 <BSP_SDRAM_MspInit+0x210>)
 800460e:	f000 f983 	bl	8004918 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004612:	2200      	movs	r2, #0
 8004614:	210f      	movs	r1, #15
 8004616:	2038      	movs	r0, #56	; 0x38
 8004618:	f000 f938 	bl	800488c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800461c:	2038      	movs	r0, #56	; 0x38
 800461e:	f000 f951 	bl	80048c4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004622:	bf00      	nop
 8004624:	3740      	adds	r7, #64	; 0x40
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	40020400 	.word	0x40020400
 8004634:	40020800 	.word	0x40020800
 8004638:	40020c00 	.word	0x40020c00
 800463c:	40021000 	.word	0x40021000
 8004640:	40021400 	.word	0x40021400
 8004644:	40021800 	.word	0x40021800
 8004648:	20000408 	.word	0x20000408
 800464c:	40026410 	.word	0x40026410

08004650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <HAL_Init+0x40>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <HAL_Init+0x40>)
 800465a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_Init+0x40>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_Init+0x40>)
 8004666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800466a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_Init+0x40>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a07      	ldr	r2, [pc, #28]	; (8004690 <HAL_Init+0x40>)
 8004672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004678:	2003      	movs	r0, #3
 800467a:	f000 f8fc 	bl	8004876 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800467e:	200f      	movs	r0, #15
 8004680:	f7fe fa0c 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004684:	f7fd feda 	bl	800243c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40023c00 	.word	0x40023c00

08004694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_IncTick+0x20>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_IncTick+0x24>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <HAL_IncTick+0x24>)
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	200000bc 	.word	0x200000bc
 80046b8:	20000780 	.word	0x20000780

080046bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return uwTick;
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_GetTick+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000780 	.word	0x20000780

080046d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046dc:	f7ff ffee 	bl	80046bc <HAL_GetTick>
 80046e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d005      	beq.n	80046fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_Delay+0x44>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046fa:	bf00      	nop
 80046fc:	f7ff ffde 	bl	80046bc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d8f7      	bhi.n	80046fc <HAL_Delay+0x28>
  {
  }
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200000bc 	.word	0x200000bc

0800471c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004738:	4013      	ands	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800474e:	4a04      	ldr	r2, [pc, #16]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	60d3      	str	r3, [r2, #12]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <__NVIC_GetPriorityGrouping+0x18>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 0307 	and.w	r3, r3, #7
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db0b      	blt.n	80047aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <__NVIC_EnableIRQ+0x38>)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2001      	movs	r0, #1
 80047a2:	fa00 f202 	lsl.w	r2, r0, r2
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000e100 	.word	0xe000e100

080047bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	6039      	str	r1, [r7, #0]
 80047c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	db0a      	blt.n	80047e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	490c      	ldr	r1, [pc, #48]	; (8004808 <__NVIC_SetPriority+0x4c>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	440b      	add	r3, r1
 80047e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047e4:	e00a      	b.n	80047fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <__NVIC_SetPriority+0x50>)
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	3b04      	subs	r3, #4
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	761a      	strb	r2, [r3, #24]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000e100 	.word	0xe000e100
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f1c3 0307 	rsb	r3, r3, #7
 800482a:	2b04      	cmp	r3, #4
 800482c:	bf28      	it	cs
 800482e:	2304      	movcs	r3, #4
 8004830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3304      	adds	r3, #4
 8004836:	2b06      	cmp	r3, #6
 8004838:	d902      	bls.n	8004840 <NVIC_EncodePriority+0x30>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3b03      	subs	r3, #3
 800483e:	e000      	b.n	8004842 <NVIC_EncodePriority+0x32>
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004844:	f04f 32ff 	mov.w	r2, #4294967295
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43da      	mvns	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	401a      	ands	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004858:	f04f 31ff 	mov.w	r1, #4294967295
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	43d9      	mvns	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004868:	4313      	orrs	r3, r2
         );
}
 800486a:	4618      	mov	r0, r3
 800486c:	3724      	adds	r7, #36	; 0x24
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff4c 	bl	800471c <__NVIC_SetPriorityGrouping>
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800489e:	f7ff ff61 	bl	8004764 <__NVIC_GetPriorityGrouping>
 80048a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f7ff ffb1 	bl	8004810 <NVIC_EncodePriority>
 80048ae:	4602      	mov	r2, r0
 80048b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ff80 	bl	80047bc <__NVIC_SetPriority>
}
 80048bc:	bf00      	nop
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ff54 	bl	8004780 <__NVIC_EnableIRQ>
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e00e      	b.n	8004910 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	795b      	ldrb	r3, [r3, #5]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd fdc2 	bl	800248c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004924:	f7ff feca 	bl	80046bc <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e099      	b.n	8004a68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004954:	e00f      	b.n	8004976 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004956:	f7ff feb1 	bl	80046bc <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b05      	cmp	r3, #5
 8004962:	d908      	bls.n	8004976 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2203      	movs	r2, #3
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e078      	b.n	8004a68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e8      	bne.n	8004956 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_DMA_Init+0x158>)
 8004990:	4013      	ands	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d107      	bne.n	80049e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	4313      	orrs	r3, r2
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d117      	bne.n	8004a3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8bd 	bl	8004b9c <DMA_CheckFifoParam>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2240      	movs	r2, #64	; 0x40
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a36:	2301      	movs	r3, #1
 8004a38:	e016      	b.n	8004a68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f874 	bl	8004b30 <DMA_CalcBaseAndBitshift>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	223f      	movs	r2, #63	; 0x3f
 8004a52:	409a      	lsls	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	f010803f 	.word	0xf010803f

08004a74 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e050      	b.n	8004b28 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d101      	bne.n	8004a96 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
 8004a94:	e048      	b.n	8004b28 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0201 	bic.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2221      	movs	r2, #33	; 0x21
 8004ad4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f82a 	bl	8004b30 <DMA_CalcBaseAndBitshift>
 8004adc:	4603      	mov	r3, r0
 8004ade:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	223f      	movs	r2, #63	; 0x3f
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	3b10      	subs	r3, #16
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <DMA_CalcBaseAndBitshift+0x64>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <DMA_CalcBaseAndBitshift+0x68>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d909      	bls.n	8004b72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	1d1a      	adds	r2, r3, #4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8004b70:	e007      	b.n	8004b82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	aaaaaaab 	.word	0xaaaaaaab
 8004b98:	0800dfa0 	.word	0x0800dfa0

08004b9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11f      	bne.n	8004bf6 <DMA_CheckFifoParam+0x5a>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d856      	bhi.n	8004c6a <DMA_CheckFifoParam+0xce>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <DMA_CheckFifoParam+0x28>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be7 	.word	0x08004be7
 8004bcc:	08004bd5 	.word	0x08004bd5
 8004bd0:	08004c6b 	.word	0x08004c6b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d046      	beq.n	8004c6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be4:	e043      	b.n	8004c6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bee:	d140      	bne.n	8004c72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf4:	e03d      	b.n	8004c72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfe:	d121      	bne.n	8004c44 <DMA_CheckFifoParam+0xa8>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d837      	bhi.n	8004c76 <DMA_CheckFifoParam+0xda>
 8004c06:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <DMA_CheckFifoParam+0x70>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c1d 	.word	0x08004c1d
 8004c10:	08004c23 	.word	0x08004c23
 8004c14:	08004c1d 	.word	0x08004c1d
 8004c18:	08004c35 	.word	0x08004c35
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c20:	e030      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d025      	beq.n	8004c7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c32:	e022      	b.n	8004c7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c3c:	d11f      	bne.n	8004c7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c42:	e01c      	b.n	8004c7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d903      	bls.n	8004c52 <DMA_CheckFifoParam+0xb6>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d003      	beq.n	8004c58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c50:	e018      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
      break;
 8004c56:	e015      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00e      	beq.n	8004c82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	e00b      	b.n	8004c82 <DMA_CheckFifoParam+0xe6>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e00a      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e008      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      break;
 8004c72:	bf00      	nop
 8004c74:	e006      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      break;
 8004c76:	bf00      	nop
 8004c78:	e004      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <DMA_CheckFifoParam+0xe8>
      break;
 8004c82:	bf00      	nop
    }
  } 
  
  return status; 
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop

08004c94 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e03b      	b.n	8004d1e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fd fc08 	bl	80024d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	f023 0107 	bic.w	r1, r3, #7
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004cfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68d1      	ldr	r1, [r2, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af02      	add	r7, sp, #8
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_DMA2D_Start+0x1c>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e018      	b.n	8004d74 <HAL_DMA2D_Start+0x4e>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fa99 	bl	8005294 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d056      	beq.n	8004e46 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d98:	f7ff fc90 	bl	80046bc <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d9e:	e04b      	b.n	8004e38 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d023      	beq.n	8004dfa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	f043 0202 	orr.w	r2, r3, #2
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2221      	movs	r2, #33	; 0x21
 8004de4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2204      	movs	r2, #4
 8004dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e0a5      	b.n	8004f46 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d01a      	beq.n	8004e38 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7ff fc5b 	bl	80046bc <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <HAL_DMA2D_PollForTransfer+0x9c>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	f043 0220 	orr.w	r2, r3, #32
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2203      	movs	r2, #3
 8004e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e086      	b.n	8004f46 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0ac      	beq.n	8004da0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d061      	beq.n	8004f2c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e68:	f7ff fc28 	bl	80046bc <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004e6e:	e056      	b.n	8004f1e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d02e      	beq.n	8004ee0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	f043 0204 	orr.w	r2, r3, #4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	f043 0202 	orr.w	r2, r3, #2
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	f043 0201 	orr.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2229      	movs	r2, #41	; 0x29
 8004eca:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee6:	d01a      	beq.n	8004f1e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ee8:	f7ff fbe8 	bl	80046bc <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d302      	bcc.n	8004efe <HAL_DMA2D_PollForTransfer+0x182>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10f      	bne.n	8004f1e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e013      	b.n	8004f46 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0a1      	beq.n	8004e70 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2212      	movs	r2, #18
 8004f32:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d026      	beq.n	8004fbe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d021      	beq.n	8004fbe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f88:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	f043 0201 	orr.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d026      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d021      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fe0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d026      	beq.n	800506e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005026:	2b00      	cmp	r3, #0
 8005028:	d021      	beq.n	800506e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005038:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2208      	movs	r2, #8
 8005040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	f043 0204 	orr.w	r2, r3, #4
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d013      	beq.n	80050a0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005090:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2204      	movs	r2, #4
 8005098:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f853 	bl	8005146 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d024      	beq.n	80050f4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01f      	beq.n	80050f4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2202      	movs	r2, #2
 80050ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01f      	beq.n	800513e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005116:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2210      	movs	r2, #16
 800511e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f80e 	bl	800515a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_DMA2D_ConfigLayer+0x20>
 800518c:	2302      	movs	r3, #2
 800518e:	e079      	b.n	8005284 <HAL_DMA2D_ConfigLayer+0x114>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	3318      	adds	r3, #24
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80051ba:	4b35      	ldr	r3, [pc, #212]	; (8005290 <HAL_DMA2D_ConfigLayer+0x120>)
 80051bc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b0a      	cmp	r3, #10
 80051c4:	d003      	beq.n	80051ce <HAL_DMA2D_ConfigLayer+0x5e>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b09      	cmp	r3, #9
 80051cc:	d107      	bne.n	80051de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	e005      	b.n	80051ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	061b      	lsls	r3, r3, #24
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d120      	bne.n	8005232 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	ea02 0103 	and.w	r1, r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	430a      	orrs	r2, r1
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b0a      	cmp	r3, #10
 8005218:	d003      	beq.n	8005222 <HAL_DMA2D_ConfigLayer+0xb2>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b09      	cmp	r3, #9
 8005220:	d127      	bne.n	8005272 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800522e:	629a      	str	r2, [r3, #40]	; 0x28
 8005230:	e01f      	b.n	8005272 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	43db      	mvns	r3, r3
 800523c:	ea02 0103 	and.w	r1, r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	430a      	orrs	r2, r1
 8005248:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b0a      	cmp	r3, #10
 800525a:	d003      	beq.n	8005264 <HAL_DMA2D_ConfigLayer+0xf4>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b09      	cmp	r3, #9
 8005262:	d106      	bne.n	8005272 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005270:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	ff03000f 	.word	0xff03000f

08005294 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005294:	b480      	push	{r7}
 8005296:	b08b      	sub	sp, #44	; 0x2c
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	041a      	lsls	r2, r3, #16
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052cc:	d174      	bne.n	80053b8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80052e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d108      	bne.n	8005306 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	e053      	b.n	80053ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d106      	bne.n	800531c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4313      	orrs	r3, r2
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
 800531a:	e048      	b.n	80053ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d111      	bne.n	8005348 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	0cdb      	lsrs	r3, r3, #19
 8005328:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	0a9b      	lsrs	r3, r3, #10
 800532e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	08db      	lsrs	r3, r3, #3
 8005334:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	02db      	lsls	r3, r3, #11
 800533e:	4313      	orrs	r3, r2
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	e032      	b.n	80053ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d117      	bne.n	8005380 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	0fdb      	lsrs	r3, r3, #31
 8005354:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	0cdb      	lsrs	r3, r3, #19
 800535a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	0adb      	lsrs	r3, r3, #11
 8005360:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	431a      	orrs	r2, r3
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	03db      	lsls	r3, r3, #15
 8005376:	4313      	orrs	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	e016      	b.n	80053ae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	0f1b      	lsrs	r3, r3, #28
 8005384:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	0d1b      	lsrs	r3, r3, #20
 800538a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	0b1b      	lsrs	r3, r3, #12
 8005390:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	011a      	lsls	r2, r3, #4
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	431a      	orrs	r2, r3
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	4313      	orrs	r3, r2
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80053b6:	e003      	b.n	80053c0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	60da      	str	r2, [r3, #12]
}
 80053c0:	bf00      	nop
 80053c2:	372c      	adds	r7, #44	; 0x2c
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b089      	sub	sp, #36	; 0x24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053da:	2300      	movs	r3, #0
 80053dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	e177      	b.n	80056d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053e8:	2201      	movs	r2, #1
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4013      	ands	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	429a      	cmp	r2, r3
 8005402:	f040 8166 	bne.w	80056d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d005      	beq.n	800541e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800541a:	2b02      	cmp	r3, #2
 800541c:	d130      	bne.n	8005480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	2203      	movs	r2, #3
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4013      	ands	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4313      	orrs	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005454:	2201      	movs	r2, #1
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	43db      	mvns	r3, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	4013      	ands	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 0201 	and.w	r2, r3, #1
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4313      	orrs	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b03      	cmp	r3, #3
 800548a:	d017      	beq.n	80054bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	2203      	movs	r2, #3
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d123      	bne.n	8005510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	08da      	lsrs	r2, r3, #3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3208      	adds	r2, #8
 80054d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	220f      	movs	r2, #15
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	08da      	lsrs	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3208      	adds	r2, #8
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2203      	movs	r2, #3
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 0203 	and.w	r2, r3, #3
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80c0 	beq.w	80056d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	4b66      	ldr	r3, [pc, #408]	; (80056f0 <HAL_GPIO_Init+0x324>)
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_GPIO_Init+0x324>)
 800555c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005560:	6453      	str	r3, [r2, #68]	; 0x44
 8005562:	4b63      	ldr	r3, [pc, #396]	; (80056f0 <HAL_GPIO_Init+0x324>)
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800556e:	4a61      	ldr	r2, [pc, #388]	; (80056f4 <HAL_GPIO_Init+0x328>)
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	3302      	adds	r3, #2
 8005576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	220f      	movs	r2, #15
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43db      	mvns	r3, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4013      	ands	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a58      	ldr	r2, [pc, #352]	; (80056f8 <HAL_GPIO_Init+0x32c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d037      	beq.n	800560a <HAL_GPIO_Init+0x23e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a57      	ldr	r2, [pc, #348]	; (80056fc <HAL_GPIO_Init+0x330>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d031      	beq.n	8005606 <HAL_GPIO_Init+0x23a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a56      	ldr	r2, [pc, #344]	; (8005700 <HAL_GPIO_Init+0x334>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d02b      	beq.n	8005602 <HAL_GPIO_Init+0x236>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a55      	ldr	r2, [pc, #340]	; (8005704 <HAL_GPIO_Init+0x338>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d025      	beq.n	80055fe <HAL_GPIO_Init+0x232>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a54      	ldr	r2, [pc, #336]	; (8005708 <HAL_GPIO_Init+0x33c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01f      	beq.n	80055fa <HAL_GPIO_Init+0x22e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a53      	ldr	r2, [pc, #332]	; (800570c <HAL_GPIO_Init+0x340>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d019      	beq.n	80055f6 <HAL_GPIO_Init+0x22a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a52      	ldr	r2, [pc, #328]	; (8005710 <HAL_GPIO_Init+0x344>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_GPIO_Init+0x226>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a51      	ldr	r2, [pc, #324]	; (8005714 <HAL_GPIO_Init+0x348>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00d      	beq.n	80055ee <HAL_GPIO_Init+0x222>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a50      	ldr	r2, [pc, #320]	; (8005718 <HAL_GPIO_Init+0x34c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <HAL_GPIO_Init+0x21e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a4f      	ldr	r2, [pc, #316]	; (800571c <HAL_GPIO_Init+0x350>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <HAL_GPIO_Init+0x21a>
 80055e2:	2309      	movs	r3, #9
 80055e4:	e012      	b.n	800560c <HAL_GPIO_Init+0x240>
 80055e6:	230a      	movs	r3, #10
 80055e8:	e010      	b.n	800560c <HAL_GPIO_Init+0x240>
 80055ea:	2308      	movs	r3, #8
 80055ec:	e00e      	b.n	800560c <HAL_GPIO_Init+0x240>
 80055ee:	2307      	movs	r3, #7
 80055f0:	e00c      	b.n	800560c <HAL_GPIO_Init+0x240>
 80055f2:	2306      	movs	r3, #6
 80055f4:	e00a      	b.n	800560c <HAL_GPIO_Init+0x240>
 80055f6:	2305      	movs	r3, #5
 80055f8:	e008      	b.n	800560c <HAL_GPIO_Init+0x240>
 80055fa:	2304      	movs	r3, #4
 80055fc:	e006      	b.n	800560c <HAL_GPIO_Init+0x240>
 80055fe:	2303      	movs	r3, #3
 8005600:	e004      	b.n	800560c <HAL_GPIO_Init+0x240>
 8005602:	2302      	movs	r3, #2
 8005604:	e002      	b.n	800560c <HAL_GPIO_Init+0x240>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <HAL_GPIO_Init+0x240>
 800560a:	2300      	movs	r3, #0
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	f002 0203 	and.w	r2, r2, #3
 8005612:	0092      	lsls	r2, r2, #2
 8005614:	4093      	lsls	r3, r2
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4313      	orrs	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800561c:	4935      	ldr	r1, [pc, #212]	; (80056f4 <HAL_GPIO_Init+0x328>)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	089b      	lsrs	r3, r3, #2
 8005622:	3302      	adds	r3, #2
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800562a:	4b3d      	ldr	r3, [pc, #244]	; (8005720 <HAL_GPIO_Init+0x354>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800564e:	4a34      	ldr	r2, [pc, #208]	; (8005720 <HAL_GPIO_Init+0x354>)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005654:	4b32      	ldr	r3, [pc, #200]	; (8005720 <HAL_GPIO_Init+0x354>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005678:	4a29      	ldr	r2, [pc, #164]	; (8005720 <HAL_GPIO_Init+0x354>)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800567e:	4b28      	ldr	r3, [pc, #160]	; (8005720 <HAL_GPIO_Init+0x354>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056a2:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <HAL_GPIO_Init+0x354>)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056a8:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <HAL_GPIO_Init+0x354>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4013      	ands	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056cc:	4a14      	ldr	r2, [pc, #80]	; (8005720 <HAL_GPIO_Init+0x354>)
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	f67f ae84 	bls.w	80053e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	3724      	adds	r7, #36	; 0x24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40023800 	.word	0x40023800
 80056f4:	40013800 	.word	0x40013800
 80056f8:	40020000 	.word	0x40020000
 80056fc:	40020400 	.word	0x40020400
 8005700:	40020800 	.word	0x40020800
 8005704:	40020c00 	.word	0x40020c00
 8005708:	40021000 	.word	0x40021000
 800570c:	40021400 	.word	0x40021400
 8005710:	40021800 	.word	0x40021800
 8005714:	40021c00 	.word	0x40021c00
 8005718:	40022000 	.word	0x40022000
 800571c:	40022400 	.word	0x40022400
 8005720:	40013c00 	.word	0x40013c00

08005724 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e0d9      	b.n	80058f4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005740:	2201      	movs	r2, #1
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	f040 80c9 	bne.w	80058ee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800575c:	4a6b      	ldr	r2, [pc, #428]	; (800590c <HAL_GPIO_DeInit+0x1e8>)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	089b      	lsrs	r3, r3, #2
 8005762:	3302      	adds	r3, #2
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	220f      	movs	r2, #15
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a63      	ldr	r2, [pc, #396]	; (8005910 <HAL_GPIO_DeInit+0x1ec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d037      	beq.n	80057f6 <HAL_GPIO_DeInit+0xd2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a62      	ldr	r2, [pc, #392]	; (8005914 <HAL_GPIO_DeInit+0x1f0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d031      	beq.n	80057f2 <HAL_GPIO_DeInit+0xce>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a61      	ldr	r2, [pc, #388]	; (8005918 <HAL_GPIO_DeInit+0x1f4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d02b      	beq.n	80057ee <HAL_GPIO_DeInit+0xca>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a60      	ldr	r2, [pc, #384]	; (800591c <HAL_GPIO_DeInit+0x1f8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d025      	beq.n	80057ea <HAL_GPIO_DeInit+0xc6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a5f      	ldr	r2, [pc, #380]	; (8005920 <HAL_GPIO_DeInit+0x1fc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <HAL_GPIO_DeInit+0xc2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a5e      	ldr	r2, [pc, #376]	; (8005924 <HAL_GPIO_DeInit+0x200>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d019      	beq.n	80057e2 <HAL_GPIO_DeInit+0xbe>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a5d      	ldr	r2, [pc, #372]	; (8005928 <HAL_GPIO_DeInit+0x204>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_GPIO_DeInit+0xba>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a5c      	ldr	r2, [pc, #368]	; (800592c <HAL_GPIO_DeInit+0x208>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00d      	beq.n	80057da <HAL_GPIO_DeInit+0xb6>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a5b      	ldr	r2, [pc, #364]	; (8005930 <HAL_GPIO_DeInit+0x20c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <HAL_GPIO_DeInit+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a5a      	ldr	r2, [pc, #360]	; (8005934 <HAL_GPIO_DeInit+0x210>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_GPIO_DeInit+0xae>
 80057ce:	2309      	movs	r3, #9
 80057d0:	e012      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057d2:	230a      	movs	r3, #10
 80057d4:	e010      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057d6:	2308      	movs	r3, #8
 80057d8:	e00e      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057da:	2307      	movs	r3, #7
 80057dc:	e00c      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057de:	2306      	movs	r3, #6
 80057e0:	e00a      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057e2:	2305      	movs	r3, #5
 80057e4:	e008      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e006      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057ea:	2303      	movs	r3, #3
 80057ec:	e004      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e002      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <HAL_GPIO_DeInit+0xd4>
 80057f6:	2300      	movs	r3, #0
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	f002 0203 	and.w	r2, r2, #3
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	4093      	lsls	r3, r2
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	429a      	cmp	r2, r3
 8005806:	d132      	bne.n	800586e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005808:	4b4b      	ldr	r3, [pc, #300]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	43db      	mvns	r3, r3
 8005810:	4949      	ldr	r1, [pc, #292]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 8005812:	4013      	ands	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005816:	4b48      	ldr	r3, [pc, #288]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	43db      	mvns	r3, r3
 800581e:	4946      	ldr	r1, [pc, #280]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 8005820:	4013      	ands	r3, r2
 8005822:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005824:	4b44      	ldr	r3, [pc, #272]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	43db      	mvns	r3, r3
 800582c:	4942      	ldr	r1, [pc, #264]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 800582e:	4013      	ands	r3, r2
 8005830:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005832:	4b41      	ldr	r3, [pc, #260]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	43db      	mvns	r3, r3
 800583a:	493f      	ldr	r1, [pc, #252]	; (8005938 <HAL_GPIO_DeInit+0x214>)
 800583c:	4013      	ands	r3, r2
 800583e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	220f      	movs	r2, #15
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005850:	4a2e      	ldr	r2, [pc, #184]	; (800590c <HAL_GPIO_DeInit+0x1e8>)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	089b      	lsrs	r3, r3, #2
 8005856:	3302      	adds	r3, #2
 8005858:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	43da      	mvns	r2, r3
 8005860:	482a      	ldr	r0, [pc, #168]	; (800590c <HAL_GPIO_DeInit+0x1e8>)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	400a      	ands	r2, r1
 8005868:	3302      	adds	r3, #2
 800586a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2103      	movs	r1, #3
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	401a      	ands	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	08da      	lsrs	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3208      	adds	r2, #8
 800588c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	220f      	movs	r2, #15
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	08d2      	lsrs	r2, r2, #3
 80058a4:	4019      	ands	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3208      	adds	r2, #8
 80058aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	2103      	movs	r1, #3
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	401a      	ands	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	2101      	movs	r1, #1
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	2103      	movs	r1, #3
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	401a      	ands	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	3301      	adds	r3, #1
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	f67f af22 	bls.w	8005740 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40013800 	.word	0x40013800
 8005910:	40020000 	.word	0x40020000
 8005914:	40020400 	.word	0x40020400
 8005918:	40020800 	.word	0x40020800
 800591c:	40020c00 	.word	0x40020c00
 8005920:	40021000 	.word	0x40021000
 8005924:	40021400 	.word	0x40021400
 8005928:	40021800 	.word	0x40021800
 800592c:	40021c00 	.word	0x40021c00
 8005930:	40022000 	.word	0x40022000
 8005934:	40022400 	.word	0x40022400
 8005938:	40013c00 	.word	0x40013c00

0800593c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
 8005948:	4613      	mov	r3, r2
 800594a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800594c:	787b      	ldrb	r3, [r7, #1]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005958:	e003      	b.n	8005962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800595a:	887b      	ldrh	r3, [r7, #2]
 800595c:	041a      	lsls	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	619a      	str	r2, [r3, #24]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e12b      	b.n	8005bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fdc2 	bl	8002520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2224      	movs	r2, #36	; 0x24
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059d4:	f001 f9ba 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 80059d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4a81      	ldr	r2, [pc, #516]	; (8005be4 <HAL_I2C_Init+0x274>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d807      	bhi.n	80059f4 <HAL_I2C_Init+0x84>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a80      	ldr	r2, [pc, #512]	; (8005be8 <HAL_I2C_Init+0x278>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	bf94      	ite	ls
 80059ec:	2301      	movls	r3, #1
 80059ee:	2300      	movhi	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e006      	b.n	8005a02 <HAL_I2C_Init+0x92>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a7d      	ldr	r2, [pc, #500]	; (8005bec <HAL_I2C_Init+0x27c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bf94      	ite	ls
 80059fc:	2301      	movls	r3, #1
 80059fe:	2300      	movhi	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e0e7      	b.n	8005bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a78      	ldr	r2, [pc, #480]	; (8005bf0 <HAL_I2C_Init+0x280>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0c9b      	lsrs	r3, r3, #18
 8005a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4a6a      	ldr	r2, [pc, #424]	; (8005be4 <HAL_I2C_Init+0x274>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d802      	bhi.n	8005a44 <HAL_I2C_Init+0xd4>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	3301      	adds	r3, #1
 8005a42:	e009      	b.n	8005a58 <HAL_I2C_Init+0xe8>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	4a69      	ldr	r2, [pc, #420]	; (8005bf4 <HAL_I2C_Init+0x284>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	099b      	lsrs	r3, r3, #6
 8005a56:	3301      	adds	r3, #1
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	495c      	ldr	r1, [pc, #368]	; (8005be4 <HAL_I2C_Init+0x274>)
 8005a74:	428b      	cmp	r3, r1
 8005a76:	d819      	bhi.n	8005aac <HAL_I2C_Init+0x13c>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1e59      	subs	r1, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a8c:	400b      	ands	r3, r1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_I2C_Init+0x138>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1e59      	subs	r1, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa6:	e051      	b.n	8005b4c <HAL_I2C_Init+0x1dc>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	e04f      	b.n	8005b4c <HAL_I2C_Init+0x1dc>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d111      	bne.n	8005ad8 <HAL_I2C_Init+0x168>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1e58      	subs	r0, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	440b      	add	r3, r1
 8005ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e012      	b.n	8005afe <HAL_I2C_Init+0x18e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1e58      	subs	r0, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	0099      	lsls	r1, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aee:	3301      	adds	r3, #1
 8005af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Init+0x196>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e022      	b.n	8005b4c <HAL_I2C_Init+0x1dc>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10e      	bne.n	8005b2c <HAL_I2C_Init+0x1bc>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1e58      	subs	r0, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6859      	ldr	r1, [r3, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	440b      	add	r3, r1
 8005b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b20:	3301      	adds	r3, #1
 8005b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2a:	e00f      	b.n	8005b4c <HAL_I2C_Init+0x1dc>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1e58      	subs	r0, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	0099      	lsls	r1, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b42:	3301      	adds	r3, #1
 8005b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	6809      	ldr	r1, [r1, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6911      	ldr	r1, [r2, #16]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68d2      	ldr	r2, [r2, #12]
 8005b86:	4311      	orrs	r1, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	000186a0 	.word	0x000186a0
 8005be8:	001e847f 	.word	0x001e847f
 8005bec:	003d08ff 	.word	0x003d08ff
 8005bf0:	431bde83 	.word	0x431bde83
 8005bf4:	10624dd3 	.word	0x10624dd3

08005bf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d129      	bne.n	8005c62 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2224      	movs	r2, #36	; 0x24
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0210 	bic.w	r2, r2, #16
 8005c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e000      	b.n	8005c64 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
  }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d12a      	bne.n	8005ce0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2224      	movs	r2, #36	; 0x24
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005caa:	89fb      	ldrh	r3, [r7, #14]
 8005cac:	f023 030f 	bic.w	r3, r3, #15
 8005cb0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	89fb      	ldrh	r3, [r7, #14]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	89fa      	ldrh	r2, [r7, #14]
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0bf      	b.n	8005e82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc fc6c 	bl	80025f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6899      	ldr	r1, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005d64:	400b      	ands	r3, r1
 8005d66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	041b      	lsls	r3, r3, #16
 8005d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6899      	ldr	r1, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68d9      	ldr	r1, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b3e      	ldr	r3, [pc, #248]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005d92:	400b      	ands	r3, r1
 8005d94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68d9      	ldr	r1, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1a      	ldr	r2, [r3, #32]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6919      	ldr	r1, [r3, #16]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b33      	ldr	r3, [pc, #204]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005dc0:	400b      	ands	r3, r1
 8005dc2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6919      	ldr	r1, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6959      	ldr	r1, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005dee:	400b      	ands	r3, r1
 8005df0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6959      	ldr	r1, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0206 	orr.w	r2, r2, #6
 8005e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	f000f800 	.word	0xf000f800

08005e90 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d023      	beq.n	8005efa <HAL_LTDC_IRQHandler+0x6a>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01e      	beq.n	8005efa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0204 	bic.w	r2, r2, #4
 8005eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005eda:	f043 0201 	orr.w	r2, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f86f 	bl	8005fd8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d023      	beq.n	8005f4c <HAL_LTDC_IRQHandler+0xbc>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01e      	beq.n	8005f4c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0202 	bic.w	r2, r2, #2
 8005f1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2202      	movs	r2, #2
 8005f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f2c:	f043 0202 	orr.w	r2, r3, #2
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f846 	bl	8005fd8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01b      	beq.n	8005f8e <HAL_LTDC_IRQHandler+0xfe>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d016      	beq.n	8005f8e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0201 	bic.w	r2, r2, #1
 8005f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2201      	movs	r2, #1
 8005f76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f82f 	bl	8005fec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <HAL_LTDC_IRQHandler+0x140>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0208 	bic.w	r2, r2, #8
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f818 	bl	8006000 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006014:	b5b0      	push	{r4, r5, r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_LTDC_ConfigLayer+0x1a>
 800602a:	2302      	movs	r3, #2
 800602c:	e02c      	b.n	8006088 <HAL_LTDC_ConfigLayer+0x74>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2134      	movs	r1, #52	; 0x34
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	4413      	add	r3, r2
 800604a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	4614      	mov	r4, r2
 8006052:	461d      	mov	r5, r3
 8006054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800605a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800605c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800605e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f83b 	bl	80060e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2201      	movs	r2, #1
 8006074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bdb0      	pop	{r4, r5, r7, pc}

08006090 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_LTDC_EnableDither+0x16>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e016      	b.n	80060d4 <HAL_LTDC_EnableDither+0x44>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <HAL_LTDC_EnableDither+0x50>)
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <HAL_LTDC_EnableDither+0x50>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40016800 	.word	0x40016800

080060e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	0c1b      	lsrs	r3, r3, #16
 80060fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006100:	4413      	add	r3, r2
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	01db      	lsls	r3, r3, #7
 8006110:	4413      	add	r3, r2
 8006112:	3384      	adds	r3, #132	; 0x84
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	4611      	mov	r1, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	01d2      	lsls	r2, r2, #7
 8006120:	440a      	add	r2, r1
 8006122:	3284      	adds	r2, #132	; 0x84
 8006124:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006128:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800613a:	4413      	add	r3, r2
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4619      	mov	r1, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	01db      	lsls	r3, r3, #7
 8006148:	440b      	add	r3, r1
 800614a:	3384      	adds	r3, #132	; 0x84
 800614c:	4619      	mov	r1, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	4313      	orrs	r3, r2
 8006152:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006162:	4413      	add	r3, r2
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	01db      	lsls	r3, r3, #7
 8006172:	4413      	add	r3, r2
 8006174:	3384      	adds	r3, #132	; 0x84
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	4611      	mov	r1, r2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	01d2      	lsls	r2, r2, #7
 8006182:	440a      	add	r2, r1
 8006184:	3284      	adds	r2, #132	; 0x84
 8006186:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800618a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800619a:	4413      	add	r3, r2
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	01db      	lsls	r3, r3, #7
 80061a8:	440b      	add	r3, r1
 80061aa:	3384      	adds	r3, #132	; 0x84
 80061ac:	4619      	mov	r1, r3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	01db      	lsls	r3, r3, #7
 80061be:	4413      	add	r3, r2
 80061c0:	3384      	adds	r3, #132	; 0x84
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	4611      	mov	r1, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	01d2      	lsls	r2, r2, #7
 80061ce:	440a      	add	r2, r1
 80061d0:	3284      	adds	r2, #132	; 0x84
 80061d2:	f023 0307 	bic.w	r3, r3, #7
 80061d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	01db      	lsls	r3, r3, #7
 80061e2:	4413      	add	r3, r2
 80061e4:	3384      	adds	r3, #132	; 0x84
 80061e6:	461a      	mov	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	01db      	lsls	r3, r3, #7
 8006214:	4413      	add	r3, r2
 8006216:	3384      	adds	r3, #132	; 0x84
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	01db      	lsls	r3, r3, #7
 8006224:	4413      	add	r3, r2
 8006226:	3384      	adds	r3, #132	; 0x84
 8006228:	461a      	mov	r2, r3
 800622a:	2300      	movs	r3, #0
 800622c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006234:	461a      	mov	r2, r3
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	431a      	orrs	r2, r3
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4619      	mov	r1, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	01db      	lsls	r3, r3, #7
 8006248:	440b      	add	r3, r1
 800624a:	3384      	adds	r3, #132	; 0x84
 800624c:	4619      	mov	r1, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	01db      	lsls	r3, r3, #7
 800625e:	4413      	add	r3, r2
 8006260:	3384      	adds	r3, #132	; 0x84
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	4611      	mov	r1, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	01d2      	lsls	r2, r2, #7
 800626e:	440a      	add	r2, r1
 8006270:	3284      	adds	r2, #132	; 0x84
 8006272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006276:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	01db      	lsls	r3, r3, #7
 8006282:	4413      	add	r3, r2
 8006284:	3384      	adds	r3, #132	; 0x84
 8006286:	461a      	mov	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	01db      	lsls	r3, r3, #7
 8006298:	4413      	add	r3, r2
 800629a:	3384      	adds	r3, #132	; 0x84
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	4611      	mov	r1, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	01d2      	lsls	r2, r2, #7
 80062a8:	440a      	add	r2, r1
 80062aa:	3284      	adds	r2, #132	; 0x84
 80062ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062b0:	f023 0307 	bic.w	r3, r3, #7
 80062b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	69da      	ldr	r2, [r3, #28]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6809      	ldr	r1, [r1, #0]
 80062c2:	4608      	mov	r0, r1
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	01c9      	lsls	r1, r1, #7
 80062c8:	4401      	add	r1, r0
 80062ca:	3184      	adds	r1, #132	; 0x84
 80062cc:	4313      	orrs	r3, r2
 80062ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	01db      	lsls	r3, r3, #7
 80062da:	4413      	add	r3, r2
 80062dc:	3384      	adds	r3, #132	; 0x84
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	01db      	lsls	r3, r3, #7
 80062ea:	4413      	add	r3, r2
 80062ec:	3384      	adds	r3, #132	; 0x84
 80062ee:	461a      	mov	r2, r3
 80062f0:	2300      	movs	r3, #0
 80062f2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	01db      	lsls	r3, r3, #7
 80062fe:	4413      	add	r3, r2
 8006300:	3384      	adds	r3, #132	; 0x84
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006312:	2304      	movs	r3, #4
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	e01b      	b.n	8006350 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d102      	bne.n	8006326 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006320:	2303      	movs	r3, #3
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e014      	b.n	8006350 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b04      	cmp	r3, #4
 800632c:	d00b      	beq.n	8006346 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006332:	2b02      	cmp	r3, #2
 8006334:	d007      	beq.n	8006346 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800633a:	2b03      	cmp	r3, #3
 800633c:	d003      	beq.n	8006346 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006342:	2b07      	cmp	r3, #7
 8006344:	d102      	bne.n	800634c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006346:	2302      	movs	r3, #2
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	e001      	b.n	8006350 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800634c:	2301      	movs	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	01db      	lsls	r3, r3, #7
 800635a:	4413      	add	r3, r2
 800635c:	3384      	adds	r3, #132	; 0x84
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	4611      	mov	r1, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	01d2      	lsls	r2, r2, #7
 800636a:	440a      	add	r2, r1
 800636c:	3284      	adds	r2, #132	; 0x84
 800636e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006372:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	fb02 f303 	mul.w	r3, r2, r3
 800637e:	041a      	lsls	r2, r3, #16
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	1acb      	subs	r3, r1, r3
 800638a:	69f9      	ldr	r1, [r7, #28]
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	3303      	adds	r3, #3
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	6809      	ldr	r1, [r1, #0]
 8006396:	4608      	mov	r0, r1
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	01c9      	lsls	r1, r1, #7
 800639c:	4401      	add	r1, r0
 800639e:	3184      	adds	r1, #132	; 0x84
 80063a0:	4313      	orrs	r3, r2
 80063a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	01db      	lsls	r3, r3, #7
 80063ae:	4413      	add	r3, r2
 80063b0:	3384      	adds	r3, #132	; 0x84
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	4611      	mov	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	01d2      	lsls	r2, r2, #7
 80063be:	440a      	add	r2, r1
 80063c0:	3284      	adds	r2, #132	; 0x84
 80063c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	4413      	add	r3, r2
 80063d8:	3384      	adds	r3, #132	; 0x84
 80063da:	461a      	mov	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	01db      	lsls	r3, r3, #7
 80063ec:	4413      	add	r3, r2
 80063ee:	3384      	adds	r3, #132	; 0x84
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	4611      	mov	r1, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	01d2      	lsls	r2, r2, #7
 80063fc:	440a      	add	r2, r1
 80063fe:	3284      	adds	r2, #132	; 0x84
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	6013      	str	r3, [r2, #0]
}
 8006406:	bf00      	nop
 8006408:	3724      	adds	r7, #36	; 0x24
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642c:	6413      	str	r3, [r2, #64]	; 0x40
 800642e:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800643c:	2201      	movs	r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006440:	f7fe f93c 	bl	80046bc <HAL_GetTick>
 8006444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006446:	e009      	b.n	800645c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006448:	f7fe f938 	bl	80046bc <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006456:	d901      	bls.n	800645c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e01f      	b.n	800649c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800645c:	4b13      	ldr	r3, [pc, #76]	; (80064ac <HAL_PWREx_EnableOverDrive+0x98>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d1ee      	bne.n	8006448 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006470:	f7fe f924 	bl	80046bc <HAL_GetTick>
 8006474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006476:	e009      	b.n	800648c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006478:	f7fe f920 	bl	80046bc <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006486:	d901      	bls.n	800648c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e007      	b.n	800649c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <HAL_PWREx_EnableOverDrive+0x98>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006498:	d1ee      	bne.n	8006478 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40023800 	.word	0x40023800
 80064a8:	420e0040 	.word	0x420e0040
 80064ac:	40007000 	.word	0x40007000
 80064b0:	420e0044 	.word	0x420e0044

080064b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e264      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d075      	beq.n	80065be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064d2:	4ba3      	ldr	r3, [pc, #652]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d00c      	beq.n	80064f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064de:	4ba0      	ldr	r3, [pc, #640]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d112      	bne.n	8006510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064ea:	4b9d      	ldr	r3, [pc, #628]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f6:	d10b      	bne.n	8006510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f8:	4b99      	ldr	r3, [pc, #612]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d05b      	beq.n	80065bc <HAL_RCC_OscConfig+0x108>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d157      	bne.n	80065bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e23f      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006518:	d106      	bne.n	8006528 <HAL_RCC_OscConfig+0x74>
 800651a:	4b91      	ldr	r3, [pc, #580]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a90      	ldr	r2, [pc, #576]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	e01d      	b.n	8006564 <HAL_RCC_OscConfig+0xb0>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006530:	d10c      	bne.n	800654c <HAL_RCC_OscConfig+0x98>
 8006532:	4b8b      	ldr	r3, [pc, #556]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a8a      	ldr	r2, [pc, #552]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	4b88      	ldr	r3, [pc, #544]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a87      	ldr	r2, [pc, #540]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e00b      	b.n	8006564 <HAL_RCC_OscConfig+0xb0>
 800654c:	4b84      	ldr	r3, [pc, #528]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a83      	ldr	r2, [pc, #524]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	4b81      	ldr	r3, [pc, #516]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a80      	ldr	r2, [pc, #512]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 800655e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d013      	beq.n	8006594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656c:	f7fe f8a6 	bl	80046bc <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006574:	f7fe f8a2 	bl	80046bc <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b64      	cmp	r3, #100	; 0x64
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e204      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006586:	4b76      	ldr	r3, [pc, #472]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0xc0>
 8006592:	e014      	b.n	80065be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fe f892 	bl	80046bc <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800659c:	f7fe f88e 	bl	80046bc <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	; 0x64
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e1f0      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ae:	4b6c      	ldr	r3, [pc, #432]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0xe8>
 80065ba:	e000      	b.n	80065be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d063      	beq.n	8006692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065ca:	4b65      	ldr	r3, [pc, #404]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00b      	beq.n	80065ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065d6:	4b62      	ldr	r3, [pc, #392]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d11c      	bne.n	800661c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065e2:	4b5f      	ldr	r3, [pc, #380]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d116      	bne.n	800661c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ee:	4b5c      	ldr	r3, [pc, #368]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_RCC_OscConfig+0x152>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d001      	beq.n	8006606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e1c4      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006606:	4b56      	ldr	r3, [pc, #344]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4952      	ldr	r1, [pc, #328]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006616:	4313      	orrs	r3, r2
 8006618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800661a:	e03a      	b.n	8006692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d020      	beq.n	8006666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006624:	4b4f      	ldr	r3, [pc, #316]	; (8006764 <HAL_RCC_OscConfig+0x2b0>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662a:	f7fe f847 	bl	80046bc <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006632:	f7fe f843 	bl	80046bc <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e1a5      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006644:	4b46      	ldr	r3, [pc, #280]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f0      	beq.n	8006632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006650:	4b43      	ldr	r3, [pc, #268]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	4940      	ldr	r1, [pc, #256]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006660:	4313      	orrs	r3, r2
 8006662:	600b      	str	r3, [r1, #0]
 8006664:	e015      	b.n	8006692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006666:	4b3f      	ldr	r3, [pc, #252]	; (8006764 <HAL_RCC_OscConfig+0x2b0>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fe f826 	bl	80046bc <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006674:	f7fe f822 	bl	80046bc <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e184      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006686:	4b36      	ldr	r3, [pc, #216]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d030      	beq.n	8006700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d016      	beq.n	80066d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066a6:	4b30      	ldr	r3, [pc, #192]	; (8006768 <HAL_RCC_OscConfig+0x2b4>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ac:	f7fe f806 	bl	80046bc <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066b4:	f7fe f802 	bl	80046bc <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e164      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c6:	4b26      	ldr	r3, [pc, #152]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80066c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCC_OscConfig+0x200>
 80066d2:	e015      	b.n	8006700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d4:	4b24      	ldr	r3, [pc, #144]	; (8006768 <HAL_RCC_OscConfig+0x2b4>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066da:	f7fd ffef 	bl	80046bc <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066e2:	f7fd ffeb 	bl	80046bc <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e14d      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f4:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 80066f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f0      	bne.n	80066e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80a0 	beq.w	800684e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10f      	bne.n	800673e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
 8006722:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	4a0e      	ldr	r2, [pc, #56]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672c:	6413      	str	r3, [r2, #64]	; 0x40
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <HAL_RCC_OscConfig+0x2ac>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006736:	60bb      	str	r3, [r7, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d121      	bne.n	800678e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800674a:	4b08      	ldr	r3, [pc, #32]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a07      	ldr	r2, [pc, #28]	; (800676c <HAL_RCC_OscConfig+0x2b8>)
 8006750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006756:	f7fd ffb1 	bl	80046bc <HAL_GetTick>
 800675a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675c:	e011      	b.n	8006782 <HAL_RCC_OscConfig+0x2ce>
 800675e:	bf00      	nop
 8006760:	40023800 	.word	0x40023800
 8006764:	42470000 	.word	0x42470000
 8006768:	42470e80 	.word	0x42470e80
 800676c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006770:	f7fd ffa4 	bl	80046bc <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e106      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006782:	4b85      	ldr	r3, [pc, #532]	; (8006998 <HAL_RCC_OscConfig+0x4e4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f0      	beq.n	8006770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d106      	bne.n	80067a4 <HAL_RCC_OscConfig+0x2f0>
 8006796:	4b81      	ldr	r3, [pc, #516]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4a80      	ldr	r2, [pc, #512]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	6713      	str	r3, [r2, #112]	; 0x70
 80067a2:	e01c      	b.n	80067de <HAL_RCC_OscConfig+0x32a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	d10c      	bne.n	80067c6 <HAL_RCC_OscConfig+0x312>
 80067ac:	4b7b      	ldr	r3, [pc, #492]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b0:	4a7a      	ldr	r2, [pc, #488]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067b2:	f043 0304 	orr.w	r3, r3, #4
 80067b6:	6713      	str	r3, [r2, #112]	; 0x70
 80067b8:	4b78      	ldr	r3, [pc, #480]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	4a77      	ldr	r2, [pc, #476]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	6713      	str	r3, [r2, #112]	; 0x70
 80067c4:	e00b      	b.n	80067de <HAL_RCC_OscConfig+0x32a>
 80067c6:	4b75      	ldr	r3, [pc, #468]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	4a74      	ldr	r2, [pc, #464]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70
 80067d2:	4b72      	ldr	r3, [pc, #456]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4a71      	ldr	r2, [pc, #452]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d015      	beq.n	8006812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e6:	f7fd ff69 	bl	80046bc <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ec:	e00a      	b.n	8006804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ee:	f7fd ff65 	bl	80046bc <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e0c5      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006804:	4b65      	ldr	r3, [pc, #404]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0ee      	beq.n	80067ee <HAL_RCC_OscConfig+0x33a>
 8006810:	e014      	b.n	800683c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006812:	f7fd ff53 	bl	80046bc <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006818:	e00a      	b.n	8006830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800681a:	f7fd ff4f 	bl	80046bc <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f241 3288 	movw	r2, #5000	; 0x1388
 8006828:	4293      	cmp	r3, r2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e0af      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006830:	4b5a      	ldr	r3, [pc, #360]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 8006832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ee      	bne.n	800681a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d105      	bne.n	800684e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006842:	4b56      	ldr	r3, [pc, #344]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	4a55      	ldr	r2, [pc, #340]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 8006848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800684c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 809b 	beq.w	800698e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006858:	4b50      	ldr	r3, [pc, #320]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 030c 	and.w	r3, r3, #12
 8006860:	2b08      	cmp	r3, #8
 8006862:	d05c      	beq.n	800691e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d141      	bne.n	80068f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686c:	4b4c      	ldr	r3, [pc, #304]	; (80069a0 <HAL_RCC_OscConfig+0x4ec>)
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006872:	f7fd ff23 	bl	80046bc <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687a:	f7fd ff1f 	bl	80046bc <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e081      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688c:	4b43      	ldr	r3, [pc, #268]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1f0      	bne.n	800687a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	019b      	lsls	r3, r3, #6
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	3b01      	subs	r3, #1
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	061b      	lsls	r3, r3, #24
 80068bc:	4937      	ldr	r1, [pc, #220]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068c2:	4b37      	ldr	r3, [pc, #220]	; (80069a0 <HAL_RCC_OscConfig+0x4ec>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fd fef8 	bl	80046bc <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fd fef4 	bl	80046bc <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e056      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e2:	4b2e      	ldr	r3, [pc, #184]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f0      	beq.n	80068d0 <HAL_RCC_OscConfig+0x41c>
 80068ee:	e04e      	b.n	800698e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f0:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <HAL_RCC_OscConfig+0x4ec>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f6:	f7fd fee1 	bl	80046bc <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068fe:	f7fd fedd 	bl	80046bc <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e03f      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006910:	4b22      	ldr	r3, [pc, #136]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1f0      	bne.n	80068fe <HAL_RCC_OscConfig+0x44a>
 800691c:	e037      	b.n	800698e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e032      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800692a:	4b1c      	ldr	r3, [pc, #112]	; (800699c <HAL_RCC_OscConfig+0x4e8>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d028      	beq.n	800698a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006942:	429a      	cmp	r2, r3
 8006944:	d121      	bne.n	800698a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d11a      	bne.n	800698a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800695a:	4013      	ands	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006960:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006962:	4293      	cmp	r3, r2
 8006964:	d111      	bne.n	800698a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d107      	bne.n	800698a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006986:	429a      	cmp	r2, r3
 8006988:	d001      	beq.n	800698e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40007000 	.word	0x40007000
 800699c:	40023800 	.word	0x40023800
 80069a0:	42470060 	.word	0x42470060

080069a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0cc      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069b8:	4b68      	ldr	r3, [pc, #416]	; (8006b5c <HAL_RCC_ClockConfig+0x1b8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d90c      	bls.n	80069e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c6:	4b65      	ldr	r3, [pc, #404]	; (8006b5c <HAL_RCC_ClockConfig+0x1b8>)
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ce:	4b63      	ldr	r3, [pc, #396]	; (8006b5c <HAL_RCC_ClockConfig+0x1b8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0b8      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d020      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f8:	4b59      	ldr	r3, [pc, #356]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	4a58      	ldr	r2, [pc, #352]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a10:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4a52      	ldr	r2, [pc, #328]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a1c:	4b50      	ldr	r3, [pc, #320]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	494d      	ldr	r1, [pc, #308]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d044      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d107      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	4b47      	ldr	r3, [pc, #284]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d119      	bne.n	8006a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e07f      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d003      	beq.n	8006a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d107      	bne.n	8006a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a62:	4b3f      	ldr	r3, [pc, #252]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e06f      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a72:	4b3b      	ldr	r3, [pc, #236]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e067      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a82:	4b37      	ldr	r3, [pc, #220]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f023 0203 	bic.w	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	4934      	ldr	r1, [pc, #208]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a94:	f7fd fe12 	bl	80046bc <HAL_GetTick>
 8006a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9a:	e00a      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a9c:	f7fd fe0e 	bl	80046bc <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e04f      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ab2:	4b2b      	ldr	r3, [pc, #172]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 020c 	and.w	r2, r3, #12
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d1eb      	bne.n	8006a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ac4:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d20c      	bcs.n	8006aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad2:	4b22      	ldr	r3, [pc, #136]	; (8006b5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ada:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <HAL_RCC_ClockConfig+0x1b8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d001      	beq.n	8006aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e032      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af8:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4916      	ldr	r1, [pc, #88]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d009      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	490e      	ldr	r1, [pc, #56]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b2a:	f000 f821 	bl	8006b70 <HAL_RCC_GetSysClockFreq>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	490a      	ldr	r1, [pc, #40]	; (8006b64 <HAL_RCC_ClockConfig+0x1c0>)
 8006b3c:	5ccb      	ldrb	r3, [r1, r3]
 8006b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b42:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <HAL_RCC_ClockConfig+0x1c4>)
 8006b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <HAL_RCC_ClockConfig+0x1c8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fb ffa6 	bl	8002a9c <HAL_InitTick>

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40023c00 	.word	0x40023c00
 8006b60:	40023800 	.word	0x40023800
 8006b64:	0800c4d0 	.word	0x0800c4d0
 8006b68:	2000006c 	.word	0x2000006c
 8006b6c:	200000b8 	.word	0x200000b8

08006b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	607b      	str	r3, [r7, #4]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	2300      	movs	r3, #0
 8006b82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b88:	4b67      	ldr	r3, [pc, #412]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d00d      	beq.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	f200 80bd 	bhi.w	8006d14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d003      	beq.n	8006baa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ba2:	e0b7      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ba4:	4b61      	ldr	r3, [pc, #388]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ba6:	60bb      	str	r3, [r7, #8]
       break;
 8006ba8:	e0b7      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006baa:	4b61      	ldr	r3, [pc, #388]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006bac:	60bb      	str	r3, [r7, #8]
      break;
 8006bae:	e0b4      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bb0:	4b5d      	ldr	r3, [pc, #372]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bba:	4b5b      	ldr	r3, [pc, #364]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d04d      	beq.n	8006c62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bc6:	4b58      	ldr	r3, [pc, #352]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	099b      	lsrs	r3, r3, #6
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bd6:	f04f 0100 	mov.w	r1, #0
 8006bda:	ea02 0800 	and.w	r8, r2, r0
 8006bde:	ea03 0901 	and.w	r9, r3, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	014b      	lsls	r3, r1, #5
 8006bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006bf4:	0142      	lsls	r2, r0, #5
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	ebb0 0008 	subs.w	r0, r0, r8
 8006bfe:	eb61 0109 	sbc.w	r1, r1, r9
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	018b      	lsls	r3, r1, #6
 8006c0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c10:	0182      	lsls	r2, r0, #6
 8006c12:	1a12      	subs	r2, r2, r0
 8006c14:	eb63 0301 	sbc.w	r3, r3, r1
 8006c18:	f04f 0000 	mov.w	r0, #0
 8006c1c:	f04f 0100 	mov.w	r1, #0
 8006c20:	00d9      	lsls	r1, r3, #3
 8006c22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c26:	00d0      	lsls	r0, r2, #3
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	eb12 0208 	adds.w	r2, r2, r8
 8006c30:	eb43 0309 	adc.w	r3, r3, r9
 8006c34:	f04f 0000 	mov.w	r0, #0
 8006c38:	f04f 0100 	mov.w	r1, #0
 8006c3c:	0259      	lsls	r1, r3, #9
 8006c3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006c42:	0250      	lsls	r0, r2, #9
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	f7fa f808 	bl	8000c68 <__aeabi_uldivmod>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e04a      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c62:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	099b      	lsrs	r3, r3, #6
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c72:	f04f 0100 	mov.w	r1, #0
 8006c76:	ea02 0400 	and.w	r4, r2, r0
 8006c7a:	ea03 0501 	and.w	r5, r3, r1
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	014b      	lsls	r3, r1, #5
 8006c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c90:	0142      	lsls	r2, r0, #5
 8006c92:	4610      	mov	r0, r2
 8006c94:	4619      	mov	r1, r3
 8006c96:	1b00      	subs	r0, r0, r4
 8006c98:	eb61 0105 	sbc.w	r1, r1, r5
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	018b      	lsls	r3, r1, #6
 8006ca6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006caa:	0182      	lsls	r2, r0, #6
 8006cac:	1a12      	subs	r2, r2, r0
 8006cae:	eb63 0301 	sbc.w	r3, r3, r1
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f04f 0100 	mov.w	r1, #0
 8006cba:	00d9      	lsls	r1, r3, #3
 8006cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cc0:	00d0      	lsls	r0, r2, #3
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	1912      	adds	r2, r2, r4
 8006cc8:	eb45 0303 	adc.w	r3, r5, r3
 8006ccc:	f04f 0000 	mov.w	r0, #0
 8006cd0:	f04f 0100 	mov.w	r1, #0
 8006cd4:	0299      	lsls	r1, r3, #10
 8006cd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006cda:	0290      	lsls	r0, r2, #10
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	f7f9 ffbc 	bl	8000c68 <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	3301      	adds	r3, #1
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d10:	60bb      	str	r3, [r7, #8]
      break;
 8006d12:	e002      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d16:	60bb      	str	r3, [r7, #8]
      break;
 8006d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	00f42400 	.word	0x00f42400
 8006d30:	007a1200 	.word	0x007a1200

08006d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000006c 	.word	0x2000006c

08006d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d50:	f7ff fff0 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d54:	4602      	mov	r2, r0
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0a9b      	lsrs	r3, r3, #10
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	4903      	ldr	r1, [pc, #12]	; (8006d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d62:	5ccb      	ldrb	r3, [r1, r3]
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	0800c4e0 	.word	0x0800c4e0

08006d74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	220f      	movs	r2, #15
 8006d82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d84:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 0203 	and.w	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d90:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	08db      	lsrs	r3, r3, #3
 8006dae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006db6:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <HAL_RCC_GetClockConfig+0x60>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 020f 	and.w	r2, r3, #15
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	40023c00 	.word	0x40023c00

08006dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10b      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d105      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d075      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e0c:	4bad      	ldr	r3, [pc, #692]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e12:	f7fd fc53 	bl	80046bc <HAL_GetTick>
 8006e16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e18:	e008      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e1a:	f7fd fc4f 	bl	80046bc <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e18b      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e2c:	4ba6      	ldr	r3, [pc, #664]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1f0      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	019a      	lsls	r2, r3, #6
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	071b      	lsls	r3, r3, #28
 8006e50:	499d      	ldr	r1, [pc, #628]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01f      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e64:	4b98      	ldr	r3, [pc, #608]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6a:	0f1b      	lsrs	r3, r3, #28
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	019a      	lsls	r2, r3, #6
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	071b      	lsls	r3, r3, #28
 8006e84:	4990      	ldr	r1, [pc, #576]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e8c:	4b8e      	ldr	r3, [pc, #568]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e92:	f023 021f 	bic.w	r2, r3, #31
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	498a      	ldr	r1, [pc, #552]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	019a      	lsls	r2, r3, #6
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	061b      	lsls	r3, r3, #24
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	071b      	lsls	r3, r3, #28
 8006ec4:	4980      	ldr	r1, [pc, #512]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ecc:	4b7d      	ldr	r3, [pc, #500]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ed2:	f7fd fbf3 	bl	80046bc <HAL_GetTick>
 8006ed6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ed8:	e008      	b.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006eda:	f7fd fbef 	bl	80046bc <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e12b      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eec:	4b76      	ldr	r3, [pc, #472]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0f0      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d105      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d079      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f10:	4b6e      	ldr	r3, [pc, #440]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f16:	f7fd fbd1 	bl	80046bc <HAL_GetTick>
 8006f1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006f1e:	f7fd fbcd 	bl	80046bc <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e109      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f30:	4b65      	ldr	r3, [pc, #404]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3c:	d0ef      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f4a:	4b5f      	ldr	r3, [pc, #380]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	0f1b      	lsrs	r3, r3, #28
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	019a      	lsls	r2, r3, #6
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	061b      	lsls	r3, r3, #24
 8006f64:	431a      	orrs	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	071b      	lsls	r3, r3, #28
 8006f6a:	4957      	ldr	r1, [pc, #348]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f72:	4b55      	ldr	r3, [pc, #340]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	4950      	ldr	r1, [pc, #320]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01e      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f98:	4b4b      	ldr	r3, [pc, #300]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9e:	0e1b      	lsrs	r3, r3, #24
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	019a      	lsls	r2, r3, #6
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	061b      	lsls	r3, r3, #24
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	071b      	lsls	r3, r3, #28
 8006fb8:	4943      	ldr	r1, [pc, #268]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006fc0:	4b41      	ldr	r3, [pc, #260]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	493e      	ldr	r1, [pc, #248]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006fd6:	4b3d      	ldr	r3, [pc, #244]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fdc:	f7fd fb6e 	bl	80046bc <HAL_GetTick>
 8006fe0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fe4:	f7fd fb6a 	bl	80046bc <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e0a6      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ff6:	4b34      	ldr	r3, [pc, #208]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007002:	d1ef      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 808d 	beq.w	800712c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	4b2c      	ldr	r3, [pc, #176]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	4a2b      	ldr	r2, [pc, #172]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800701c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007020:	6413      	str	r3, [r2, #64]	; 0x40
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800702e:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a27      	ldr	r2, [pc, #156]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007038:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800703a:	f7fd fb3f 	bl	80046bc <HAL_GetTick>
 800703e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007040:	e008      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007042:	f7fd fb3b 	bl	80046bc <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e077      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007054:	4b1e      	ldr	r3, [pc, #120]	; (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0f0      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007060:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007068:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d039      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	429a      	cmp	r2, r3
 800707c:	d032      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007086:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007088:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800708e:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007094:	4a0c      	ldr	r2, [pc, #48]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800709a:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d11e      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070a6:	f7fd fb09 	bl	80046bc <HAL_GetTick>
 80070aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ac:	e014      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ae:	f7fd fb05 	bl	80046bc <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070bc:	4293      	cmp	r3, r2
 80070be:	d90b      	bls.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e03f      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80070c4:	42470068 	.word	0x42470068
 80070c8:	40023800 	.word	0x40023800
 80070cc:	42470070 	.word	0x42470070
 80070d0:	40007000 	.word	0x40007000
 80070d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d8:	4b1c      	ldr	r3, [pc, #112]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0e4      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070f0:	d10d      	bne.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x336>
 80070f2:	4b16      	ldr	r3, [pc, #88]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007106:	4911      	ldr	r1, [pc, #68]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007108:	4313      	orrs	r3, r2
 800710a:	608b      	str	r3, [r1, #8]
 800710c:	e005      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	4a0e      	ldr	r2, [pc, #56]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007114:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007118:	6093      	str	r3, [r2, #8]
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800711c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007126:	4909      	ldr	r1, [pc, #36]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007128:	4313      	orrs	r3, r2
 800712a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800713e:	4b04      	ldr	r3, [pc, #16]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007140:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40023800 	.word	0x40023800
 8007150:	424711e0 	.word	0x424711e0

08007154 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e025      	b.n	80071b4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fb fc83 	bl	8002a88 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3304      	adds	r3, #4
 8007192:	4619      	mov	r1, r3
 8007194:	4610      	mov	r0, r2
 8007196:	f001 fabd 	bl	8008714 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	f001 fb28 	bl	80087fa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d101      	bne.n	80071d8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80071d4:	2302      	movs	r3, #2
 80071d6:	e018      	b.n	800720a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 fb85 	bl	80088f8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d104      	bne.n	8007200 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2205      	movs	r2, #5
 80071fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80071fe:	e003      	b.n	8007208 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d101      	bne.n	800722c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
 800722a:	e00e      	b.n	800724a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f001 fb98 	bl	8008970 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e07b      	b.n	800735c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d108      	bne.n	800727e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007274:	d009      	beq.n	800728a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	61da      	str	r2, [r3, #28]
 800727c:	e005      	b.n	800728a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d106      	bne.n	80072aa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7fb fad5 	bl	8002854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007304:	431a      	orrs	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	ea42 0103 	orr.w	r1, r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	0c1b      	lsrs	r3, r3, #16
 8007328:	f003 0104 	and.w	r1, r3, #4
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	f003 0210 	and.w	r2, r3, #16
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800734a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e01a      	b.n	80073ac <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fb faa8 	bl	80028e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	4613      	mov	r3, r2
 80073c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_SPI_Transmit+0x22>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e126      	b.n	8007624 <HAL_SPI_Transmit+0x270>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073de:	f7fd f96d 	bl	80046bc <HAL_GetTick>
 80073e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d002      	beq.n	80073fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073f4:	2302      	movs	r3, #2
 80073f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073f8:	e10b      	b.n	8007612 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_Transmit+0x52>
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	77fb      	strb	r3, [r7, #31]
    goto error;
 800740a:	e102      	b.n	8007612 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2203      	movs	r2, #3
 8007410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007452:	d10f      	bne.n	8007474 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007462:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007472:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d007      	beq.n	8007492 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800749a:	d14b      	bne.n	8007534 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <HAL_SPI_Transmit+0xf6>
 80074a4:	8afb      	ldrh	r3, [r7, #22]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d13e      	bne.n	8007528 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ae:	881a      	ldrh	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	1c9a      	adds	r2, r3, #2
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074ce:	e02b      	b.n	8007528 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d112      	bne.n	8007504 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	86da      	strh	r2, [r3, #54]	; 0x36
 8007502:	e011      	b.n	8007528 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007504:	f7fd f8da 	bl	80046bc <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d803      	bhi.n	800751c <HAL_SPI_Transmit+0x168>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d102      	bne.n	8007522 <HAL_SPI_Transmit+0x16e>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007526:	e074      	b.n	8007612 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ce      	bne.n	80074d0 <HAL_SPI_Transmit+0x11c>
 8007532:	e04c      	b.n	80075ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_SPI_Transmit+0x18e>
 800753c:	8afb      	ldrh	r3, [r7, #22]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d140      	bne.n	80075c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007568:	e02c      	b.n	80075c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	d113      	bne.n	80075a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	7812      	ldrb	r2, [r2, #0]
 8007584:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	86da      	strh	r2, [r3, #54]	; 0x36
 800759e:	e011      	b.n	80075c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a0:	f7fd f88c 	bl	80046bc <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d803      	bhi.n	80075b8 <HAL_SPI_Transmit+0x204>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d102      	bne.n	80075be <HAL_SPI_Transmit+0x20a>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075c2:	e026      	b.n	8007612 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1cd      	bne.n	800756a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fbda 	bl	8007d8c <SPI_EndRxTxTransaction>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ec:	2300      	movs	r3, #0
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	e000      	b.n	8007612 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007610:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007622:	7ffb      	ldrb	r3, [r7, #31]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af02      	add	r7, sp, #8
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007648:	d112      	bne.n	8007670 <HAL_SPI_Receive+0x44>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10e      	bne.n	8007670 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2204      	movs	r2, #4
 8007656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4613      	mov	r3, r2
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 f8f1 	bl	800784e <HAL_SPI_TransmitReceive>
 800766c:	4603      	mov	r3, r0
 800766e:	e0ea      	b.n	8007846 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_SPI_Receive+0x52>
 800767a:	2302      	movs	r3, #2
 800767c:	e0e3      	b.n	8007846 <HAL_SPI_Receive+0x21a>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007686:	f7fd f819 	bl	80046bc <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	d002      	beq.n	800769e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007698:	2302      	movs	r3, #2
 800769a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800769c:	e0ca      	b.n	8007834 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_SPI_Receive+0x7e>
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d102      	bne.n	80076b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076ae:	e0c1      	b.n	8007834 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2204      	movs	r2, #4
 80076b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	88fa      	ldrh	r2, [r7, #6]
 80076ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f6:	d10f      	bne.n	8007718 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007706:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007716:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d007      	beq.n	8007736 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007734:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d162      	bne.n	8007804 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800773e:	e02e      	b.n	800779e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d115      	bne.n	800777a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f103 020c 	add.w	r2, r3, #12
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	7812      	ldrb	r2, [r2, #0]
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007778:	e011      	b.n	800779e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800777a:	f7fc ff9f 	bl	80046bc <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d803      	bhi.n	8007792 <HAL_SPI_Receive+0x166>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d102      	bne.n	8007798 <HAL_SPI_Receive+0x16c>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800779c:	e04a      	b.n	8007834 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1cb      	bne.n	8007740 <HAL_SPI_Receive+0x114>
 80077a8:	e031      	b.n	800780e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d113      	bne.n	80077e0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	b292      	uxth	r2, r2
 80077c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	1c9a      	adds	r2, r3, #2
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077de:	e011      	b.n	8007804 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077e0:	f7fc ff6c 	bl	80046bc <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d803      	bhi.n	80077f8 <HAL_SPI_Receive+0x1cc>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d102      	bne.n	80077fe <HAL_SPI_Receive+0x1d2>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d102      	bne.n	8007804 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007802:	e017      	b.n	8007834 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1cd      	bne.n	80077aa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fa54 	bl	8007cc0 <SPI_EndRxTransaction>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
 8007830:	e000      	b.n	8007834 <HAL_SPI_Receive+0x208>
  }

error :
 8007832:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b08c      	sub	sp, #48	; 0x30
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800785c:	2301      	movs	r3, #1
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_SPI_TransmitReceive+0x26>
 8007870:	2302      	movs	r3, #2
 8007872:	e18a      	b.n	8007b8a <HAL_SPI_TransmitReceive+0x33c>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800787c:	f7fc ff1e 	bl	80046bc <HAL_GetTick>
 8007880:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007892:	887b      	ldrh	r3, [r7, #2]
 8007894:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800789a:	2b01      	cmp	r3, #1
 800789c:	d00f      	beq.n	80078be <HAL_SPI_TransmitReceive+0x70>
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078a4:	d107      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0x68>
 80078ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d003      	beq.n	80078be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078b6:	2302      	movs	r3, #2
 80078b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078bc:	e15b      	b.n	8007b76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x82>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x82>
 80078ca:	887b      	ldrh	r3, [r7, #2]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078d6:	e14e      	b.n	8007b76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d003      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2205      	movs	r2, #5
 80078e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	887a      	ldrh	r2, [r7, #2]
 80078fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	887a      	ldrh	r2, [r7, #2]
 8007902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	887a      	ldrh	r2, [r7, #2]
 800790e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	887a      	ldrh	r2, [r7, #2]
 8007914:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	d007      	beq.n	8007940 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007948:	d178      	bne.n	8007a3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_SPI_TransmitReceive+0x10a>
 8007952:	8b7b      	ldrh	r3, [r7, #26]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d166      	bne.n	8007a26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	881a      	ldrh	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	1c9a      	adds	r2, r3, #2
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800797c:	e053      	b.n	8007a26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b02      	cmp	r3, #2
 800798a:	d11b      	bne.n	80079c4 <HAL_SPI_TransmitReceive+0x176>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007990:	b29b      	uxth	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d016      	beq.n	80079c4 <HAL_SPI_TransmitReceive+0x176>
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	2b01      	cmp	r3, #1
 800799a:	d113      	bne.n	80079c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	881a      	ldrh	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	1c9a      	adds	r2, r3, #2
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d119      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x1b8>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d014      	beq.n	8007a06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	b292      	uxth	r2, r2
 80079e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	1c9a      	adds	r2, r3, #2
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a02:	2301      	movs	r3, #1
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a06:	f7fc fe59 	bl	80046bc <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d807      	bhi.n	8007a26 <HAL_SPI_TransmitReceive+0x1d8>
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d003      	beq.n	8007a26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a24:	e0a7      	b.n	8007b76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1a6      	bne.n	800797e <HAL_SPI_TransmitReceive+0x130>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1a1      	bne.n	800797e <HAL_SPI_TransmitReceive+0x130>
 8007a3a:	e07c      	b.n	8007b36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_SPI_TransmitReceive+0x1fc>
 8007a44:	8b7b      	ldrh	r3, [r7, #26]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d16b      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a70:	e057      	b.n	8007b22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d11c      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x26c>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d017      	beq.n	8007aba <HAL_SPI_TransmitReceive+0x26c>
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d114      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	7812      	ldrb	r2, [r2, #0]
 8007a9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	1c5a      	adds	r2, r3, #1
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d119      	bne.n	8007afc <HAL_SPI_TransmitReceive+0x2ae>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d014      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007af8:	2301      	movs	r3, #1
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007afc:	f7fc fdde 	bl	80046bc <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d803      	bhi.n	8007b14 <HAL_SPI_TransmitReceive+0x2c6>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d102      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x2cc>
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d103      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b20:	e029      	b.n	8007b76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1a2      	bne.n	8007a72 <HAL_SPI_TransmitReceive+0x224>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d19d      	bne.n	8007a72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 f926 	bl	8007d8c <SPI_EndRxTxTransaction>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b52:	e010      	b.n	8007b76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10b      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	e000      	b.n	8007b76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3730      	adds	r7, #48	; 0x30
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ba0:	b2db      	uxtb	r3, r3
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bc0:	f7fc fd7c 	bl	80046bc <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4413      	add	r3, r2
 8007bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bd0:	f7fc fd74 	bl	80046bc <HAL_GetTick>
 8007bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bd6:	4b39      	ldr	r3, [pc, #228]	; (8007cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	015b      	lsls	r3, r3, #5
 8007bdc:	0d1b      	lsrs	r3, r3, #20
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	fb02 f303 	mul.w	r3, r2, r3
 8007be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007be6:	e054      	b.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d050      	beq.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bf0:	f7fc fd64 	bl	80046bc <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d902      	bls.n	8007c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d13d      	bne.n	8007c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c1e:	d111      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c28:	d004      	beq.n	8007c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c32:	d107      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c4c:	d10f      	bne.n	8007c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e017      	b.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	bf0c      	ite	eq
 8007ca2:	2301      	moveq	r3, #1
 8007ca4:	2300      	movne	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d19b      	bne.n	8007be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3720      	adds	r7, #32
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2000006c 	.word	0x2000006c

08007cc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cd4:	d111      	bne.n	8007cfa <SPI_EndRxTransaction+0x3a>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cde:	d004      	beq.n	8007cea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce8:	d107      	bne.n	8007cfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d02:	d12a      	bne.n	8007d5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d0c:	d012      	beq.n	8007d34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2200      	movs	r2, #0
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff ff49 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d02d      	beq.n	8007d80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e026      	b.n	8007d82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff ff36 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d01a      	beq.n	8007d80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	f043 0220 	orr.w	r2, r3, #32
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e013      	b.n	8007d82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2101      	movs	r1, #1
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff ff23 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e000      	b.n	8007d82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <SPI_EndRxTxTransaction+0x7c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1b      	ldr	r2, [pc, #108]	; (8007e0c <SPI_EndRxTxTransaction+0x80>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	0d5b      	lsrs	r3, r3, #21
 8007da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007da8:	fb02 f303 	mul.w	r3, r2, r3
 8007dac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db6:	d112      	bne.n	8007dde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2180      	movs	r1, #128	; 0x80
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7ff fef4 	bl	8007bb0 <SPI_WaitFlagStateUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d016      	beq.n	8007dfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f043 0220 	orr.w	r2, r3, #32
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e00f      	b.n	8007dfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df4:	2b80      	cmp	r3, #128	; 0x80
 8007df6:	d0f2      	beq.n	8007dde <SPI_EndRxTxTransaction+0x52>
 8007df8:	e000      	b.n	8007dfc <SPI_EndRxTxTransaction+0x70>
        break;
 8007dfa:	bf00      	nop
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	2000006c 	.word	0x2000006c
 8007e0c:	165e9f81 	.word	0x165e9f81

08007e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e041      	b.n	8007ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fa fd72 	bl	8002920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f000 fa96 	bl	8008380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d001      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e04e      	b.n	8007f66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a23      	ldr	r2, [pc, #140]	; (8007f74 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d022      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x80>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef2:	d01d      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x80>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1f      	ldr	r2, [pc, #124]	; (8007f78 <HAL_TIM_Base_Start_IT+0xc8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d018      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x80>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1e      	ldr	r2, [pc, #120]	; (8007f7c <HAL_TIM_Base_Start_IT+0xcc>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d013      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x80>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a1c      	ldr	r2, [pc, #112]	; (8007f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00e      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x80>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a1b      	ldr	r2, [pc, #108]	; (8007f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d009      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x80>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a19      	ldr	r2, [pc, #100]	; (8007f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d004      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x80>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a18      	ldr	r2, [pc, #96]	; (8007f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d111      	bne.n	8007f54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b06      	cmp	r3, #6
 8007f40:	d010      	beq.n	8007f64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0201 	orr.w	r2, r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f52:	e007      	b.n	8007f64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40010000 	.word	0x40010000
 8007f78:	40000400 	.word	0x40000400
 8007f7c:	40000800 	.word	0x40000800
 8007f80:	40000c00 	.word	0x40000c00
 8007f84:	40010400 	.word	0x40010400
 8007f88:	40014000 	.word	0x40014000
 8007f8c:	40001800 	.word	0x40001800

08007f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d122      	bne.n	8007fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d11b      	bne.n	8007fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f06f 0202 	mvn.w	r2, #2
 8007fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9b5 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8007fd8:	e005      	b.n	8007fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f9a7 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f9b8 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d122      	bne.n	8008040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b04      	cmp	r3, #4
 8008006:	d11b      	bne.n	8008040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0204 	mvn.w	r2, #4
 8008010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f98b 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 800802c:	e005      	b.n	800803a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f97d 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f98e 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b08      	cmp	r3, #8
 800804c:	d122      	bne.n	8008094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	2b08      	cmp	r3, #8
 800805a:	d11b      	bne.n	8008094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0208 	mvn.w	r2, #8
 8008064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f961 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f953 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f964 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b10      	cmp	r3, #16
 80080a0:	d122      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d11b      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0210 	mvn.w	r2, #16
 80080b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2208      	movs	r2, #8
 80080be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f937 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f929 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f93a 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d10e      	bne.n	8008114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b01      	cmp	r3, #1
 8008102:	d107      	bne.n	8008114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0201 	mvn.w	r2, #1
 800810c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fa f97c 	bl	800240c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811e:	2b80      	cmp	r3, #128	; 0x80
 8008120:	d10e      	bne.n	8008140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812c:	2b80      	cmp	r3, #128	; 0x80
 800812e:	d107      	bne.n	8008140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fae0 	bl	8008700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d10e      	bne.n	800816c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b40      	cmp	r3, #64	; 0x40
 800815a:	d107      	bne.n	800816c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f8ff 	bl	800836a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b20      	cmp	r3, #32
 8008178:	d10e      	bne.n	8008198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b20      	cmp	r3, #32
 8008186:	d107      	bne.n	8008198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0220 	mvn.w	r2, #32
 8008190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 faaa 	bl	80086ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_TIM_ConfigClockSource+0x1c>
 80081b8:	2302      	movs	r3, #2
 80081ba:	e0b4      	b.n	8008326 <HAL_TIM_ConfigClockSource+0x186>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f4:	d03e      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0xd4>
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fa:	f200 8087 	bhi.w	800830c <HAL_TIM_ConfigClockSource+0x16c>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008202:	f000 8086 	beq.w	8008312 <HAL_TIM_ConfigClockSource+0x172>
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820a:	d87f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800820c:	2b70      	cmp	r3, #112	; 0x70
 800820e:	d01a      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0xa6>
 8008210:	2b70      	cmp	r3, #112	; 0x70
 8008212:	d87b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b60      	cmp	r3, #96	; 0x60
 8008216:	d050      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0x11a>
 8008218:	2b60      	cmp	r3, #96	; 0x60
 800821a:	d877      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b50      	cmp	r3, #80	; 0x50
 800821e:	d03c      	beq.n	800829a <HAL_TIM_ConfigClockSource+0xfa>
 8008220:	2b50      	cmp	r3, #80	; 0x50
 8008222:	d873      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	d058      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x13a>
 8008228:	2b40      	cmp	r3, #64	; 0x40
 800822a:	d86f      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	d064      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008230:	2b30      	cmp	r3, #48	; 0x30
 8008232:	d86b      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 8008234:	2b20      	cmp	r3, #32
 8008236:	d060      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d867      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
 800823c:	2b00      	cmp	r3, #0
 800823e:	d05c      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008240:	2b10      	cmp	r3, #16
 8008242:	d05a      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	e062      	b.n	800830c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6899      	ldr	r1, [r3, #8]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f000 f9ad 	bl	80085b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	609a      	str	r2, [r3, #8]
      break;
 8008272:	e04f      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6899      	ldr	r1, [r3, #8]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f000 f996 	bl	80085b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008296:	609a      	str	r2, [r3, #8]
      break;
 8008298:	e03c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6859      	ldr	r1, [r3, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f000 f90a 	bl	80084c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2150      	movs	r1, #80	; 0x50
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f963 	bl	800857e <TIM_ITRx_SetConfig>
      break;
 80082b8:	e02c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6859      	ldr	r1, [r3, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	461a      	mov	r2, r3
 80082c8:	f000 f929 	bl	800851e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2160      	movs	r1, #96	; 0x60
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f953 	bl	800857e <TIM_ITRx_SetConfig>
      break;
 80082d8:	e01c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 f8ea 	bl	80084c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2140      	movs	r1, #64	; 0x40
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f943 	bl	800857e <TIM_ITRx_SetConfig>
      break;
 80082f8:	e00c      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f000 f93a 	bl	800857e <TIM_ITRx_SetConfig>
      break;
 800830a:	e003      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	e000      	b.n	8008314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a40      	ldr	r2, [pc, #256]	; (8008494 <TIM_Base_SetConfig+0x114>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d013      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d00f      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a3d      	ldr	r2, [pc, #244]	; (8008498 <TIM_Base_SetConfig+0x118>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a3c      	ldr	r2, [pc, #240]	; (800849c <TIM_Base_SetConfig+0x11c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a3b      	ldr	r2, [pc, #236]	; (80084a0 <TIM_Base_SetConfig+0x120>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a3a      	ldr	r2, [pc, #232]	; (80084a4 <TIM_Base_SetConfig+0x124>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d108      	bne.n	80083d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2f      	ldr	r2, [pc, #188]	; (8008494 <TIM_Base_SetConfig+0x114>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d02b      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e0:	d027      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2c      	ldr	r2, [pc, #176]	; (8008498 <TIM_Base_SetConfig+0x118>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d023      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a2b      	ldr	r2, [pc, #172]	; (800849c <TIM_Base_SetConfig+0x11c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d01f      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <TIM_Base_SetConfig+0x120>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01b      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <TIM_Base_SetConfig+0x124>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d017      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a28      	ldr	r2, [pc, #160]	; (80084a8 <TIM_Base_SetConfig+0x128>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a27      	ldr	r2, [pc, #156]	; (80084ac <TIM_Base_SetConfig+0x12c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a26      	ldr	r2, [pc, #152]	; (80084b0 <TIM_Base_SetConfig+0x130>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00b      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a25      	ldr	r2, [pc, #148]	; (80084b4 <TIM_Base_SetConfig+0x134>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d007      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a24      	ldr	r2, [pc, #144]	; (80084b8 <TIM_Base_SetConfig+0x138>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a23      	ldr	r2, [pc, #140]	; (80084bc <TIM_Base_SetConfig+0x13c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d108      	bne.n	8008444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a0a      	ldr	r2, [pc, #40]	; (8008494 <TIM_Base_SetConfig+0x114>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a0c      	ldr	r2, [pc, #48]	; (80084a4 <TIM_Base_SetConfig+0x124>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d103      	bne.n	8008480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	615a      	str	r2, [r3, #20]
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40010000 	.word	0x40010000
 8008498:	40000400 	.word	0x40000400
 800849c:	40000800 	.word	0x40000800
 80084a0:	40000c00 	.word	0x40000c00
 80084a4:	40010400 	.word	0x40010400
 80084a8:	40014000 	.word	0x40014000
 80084ac:	40014400 	.word	0x40014400
 80084b0:	40014800 	.word	0x40014800
 80084b4:	40001800 	.word	0x40001800
 80084b8:	40001c00 	.word	0x40001c00
 80084bc:	40002000 	.word	0x40002000

080084c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	f023 0201 	bic.w	r2, r3, #1
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f023 030a 	bic.w	r3, r3, #10
 80084fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	621a      	str	r2, [r3, #32]
}
 8008512:	bf00      	nop
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800851e:	b480      	push	{r7}
 8008520:	b087      	sub	sp, #28
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	f023 0210 	bic.w	r2, r3, #16
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	031b      	lsls	r3, r3, #12
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4313      	orrs	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800855a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	621a      	str	r2, [r3, #32]
}
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	f043 0307 	orr.w	r3, r3, #7
 80085a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	609a      	str	r2, [r3, #8]
}
 80085a8:	bf00      	nop
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	021a      	lsls	r2, r3, #8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4313      	orrs	r3, r2
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	609a      	str	r2, [r3, #8]
}
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008608:	2302      	movs	r3, #2
 800860a:	e05a      	b.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a21      	ldr	r2, [pc, #132]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d022      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008658:	d01d      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d018      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1b      	ldr	r2, [pc, #108]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d013      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d00e      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a18      	ldr	r2, [pc, #96]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d009      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a17      	ldr	r2, [pc, #92]	; (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d004      	beq.n	8008696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a15      	ldr	r2, [pc, #84]	; (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d10c      	bne.n	80086b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40010000 	.word	0x40010000
 80086d4:	40000400 	.word	0x40000400
 80086d8:	40000800 	.word	0x40000800
 80086dc:	40000c00 	.word	0x40000c00
 80086e0:	40010400 	.word	0x40010400
 80086e4:	40014000 	.word	0x40014000
 80086e8:	40001800 	.word	0x40001800

080086ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d029      	beq.n	8008782 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800873a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800873e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008748:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800874e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008754:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800875a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008760:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008766:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800876c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008772:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	e034      	b.n	80087ec <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800878e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008798:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800879e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80087b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087b6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80087c0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80087c6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80087cc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80087d2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80087d8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b087      	sub	sp, #28
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d02e      	beq.n	8008872 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008820:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	3b01      	subs	r3, #1
 800882e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008830:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	3b01      	subs	r3, #1
 8008838:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800883a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	3b01      	subs	r3, #1
 8008842:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008844:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	3b01      	subs	r3, #1
 800884c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800884e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	3b01      	subs	r3, #1
 8008856:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008858:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	3b01      	subs	r3, #1
 8008860:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008862:	4313      	orrs	r3, r2
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	609a      	str	r2, [r3, #8]
 8008870:	e03b      	b.n	80088ea <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800887e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008882:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	3b01      	subs	r3, #1
 800888a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	3b01      	subs	r3, #1
 8008892:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008894:	4313      	orrs	r3, r2
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088a8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80088b8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	3b01      	subs	r3, #1
 80088c0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80088c2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80088cc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80088d6:	4313      	orrs	r3, r2
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008914:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	3b01      	subs	r3, #1
 800891c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800891e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008926:	4313      	orrs	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008930:	f7fb fec4 	bl	80046bc <HAL_GetTick>
 8008934:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008936:	e010      	b.n	800895a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d00c      	beq.n	800895a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <FMC_SDRAM_SendCommand+0x5e>
 8008946:	f7fb feb9 	bl	80046bc <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d201      	bcs.n	800895a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e006      	b.n	8008968 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b20      	cmp	r3, #32
 8008964:	d0e8      	beq.n	8008938 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695a      	ldr	r2, [r3, #20]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <__errno>:
 8008998:	4b01      	ldr	r3, [pc, #4]	; (80089a0 <__errno+0x8>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	200000c0 	.word	0x200000c0

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4d0d      	ldr	r5, [pc, #52]	; (80089dc <__libc_init_array+0x38>)
 80089a8:	4c0d      	ldr	r4, [pc, #52]	; (80089e0 <__libc_init_array+0x3c>)
 80089aa:	1b64      	subs	r4, r4, r5
 80089ac:	10a4      	asrs	r4, r4, #2
 80089ae:	2600      	movs	r6, #0
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	4d0b      	ldr	r5, [pc, #44]	; (80089e4 <__libc_init_array+0x40>)
 80089b6:	4c0c      	ldr	r4, [pc, #48]	; (80089e8 <__libc_init_array+0x44>)
 80089b8:	f003 fd78 	bl	800c4ac <_init>
 80089bc:	1b64      	subs	r4, r4, r5
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2600      	movs	r6, #0
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089cc:	4798      	blx	r3
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d6:	4798      	blx	r3
 80089d8:	3601      	adds	r6, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	0800e570 	.word	0x0800e570
 80089e0:	0800e570 	.word	0x0800e570
 80089e4:	0800e570 	.word	0x0800e570
 80089e8:	0800e574 	.word	0x0800e574

080089ec <memset>:
 80089ec:	4402      	add	r2, r0
 80089ee:	4603      	mov	r3, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <__cvt>:
 80089fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a00:	ec55 4b10 	vmov	r4, r5, d0
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	460e      	mov	r6, r1
 8008a08:	4619      	mov	r1, r3
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	bfbb      	ittet	lt
 8008a0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a12:	461d      	movlt	r5, r3
 8008a14:	2300      	movge	r3, #0
 8008a16:	232d      	movlt	r3, #45	; 0x2d
 8008a18:	700b      	strb	r3, [r1, #0]
 8008a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a20:	4691      	mov	r9, r2
 8008a22:	f023 0820 	bic.w	r8, r3, #32
 8008a26:	bfbc      	itt	lt
 8008a28:	4622      	movlt	r2, r4
 8008a2a:	4614      	movlt	r4, r2
 8008a2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a30:	d005      	beq.n	8008a3e <__cvt+0x42>
 8008a32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a36:	d100      	bne.n	8008a3a <__cvt+0x3e>
 8008a38:	3601      	adds	r6, #1
 8008a3a:	2102      	movs	r1, #2
 8008a3c:	e000      	b.n	8008a40 <__cvt+0x44>
 8008a3e:	2103      	movs	r1, #3
 8008a40:	ab03      	add	r3, sp, #12
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	ab02      	add	r3, sp, #8
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	ec45 4b10 	vmov	d0, r4, r5
 8008a4c:	4653      	mov	r3, sl
 8008a4e:	4632      	mov	r2, r6
 8008a50:	f000 fcca 	bl	80093e8 <_dtoa_r>
 8008a54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a58:	4607      	mov	r7, r0
 8008a5a:	d102      	bne.n	8008a62 <__cvt+0x66>
 8008a5c:	f019 0f01 	tst.w	r9, #1
 8008a60:	d022      	beq.n	8008aa8 <__cvt+0xac>
 8008a62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a66:	eb07 0906 	add.w	r9, r7, r6
 8008a6a:	d110      	bne.n	8008a8e <__cvt+0x92>
 8008a6c:	783b      	ldrb	r3, [r7, #0]
 8008a6e:	2b30      	cmp	r3, #48	; 0x30
 8008a70:	d10a      	bne.n	8008a88 <__cvt+0x8c>
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f8 f835 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a7e:	b918      	cbnz	r0, 8008a88 <__cvt+0x8c>
 8008a80:	f1c6 0601 	rsb	r6, r6, #1
 8008a84:	f8ca 6000 	str.w	r6, [sl]
 8008a88:	f8da 3000 	ldr.w	r3, [sl]
 8008a8c:	4499      	add	r9, r3
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2300      	movs	r3, #0
 8008a92:	4620      	mov	r0, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	f7f8 f827 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a9a:	b108      	cbz	r0, 8008aa0 <__cvt+0xa4>
 8008a9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008aa0:	2230      	movs	r2, #48	; 0x30
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	454b      	cmp	r3, r9
 8008aa6:	d307      	bcc.n	8008ab8 <__cvt+0xbc>
 8008aa8:	9b03      	ldr	r3, [sp, #12]
 8008aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aac:	1bdb      	subs	r3, r3, r7
 8008aae:	4638      	mov	r0, r7
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	b004      	add	sp, #16
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	1c59      	adds	r1, r3, #1
 8008aba:	9103      	str	r1, [sp, #12]
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	e7f0      	b.n	8008aa2 <__cvt+0xa6>

08008ac0 <__exponent>:
 8008ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	bfb8      	it	lt
 8008ac8:	4249      	neglt	r1, r1
 8008aca:	f803 2b02 	strb.w	r2, [r3], #2
 8008ace:	bfb4      	ite	lt
 8008ad0:	222d      	movlt	r2, #45	; 0x2d
 8008ad2:	222b      	movge	r2, #43	; 0x2b
 8008ad4:	2909      	cmp	r1, #9
 8008ad6:	7042      	strb	r2, [r0, #1]
 8008ad8:	dd2a      	ble.n	8008b30 <__exponent+0x70>
 8008ada:	f10d 0407 	add.w	r4, sp, #7
 8008ade:	46a4      	mov	ip, r4
 8008ae0:	270a      	movs	r7, #10
 8008ae2:	46a6      	mov	lr, r4
 8008ae4:	460a      	mov	r2, r1
 8008ae6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008aea:	fb07 1516 	mls	r5, r7, r6, r1
 8008aee:	3530      	adds	r5, #48	; 0x30
 8008af0:	2a63      	cmp	r2, #99	; 0x63
 8008af2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008af6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008afa:	4631      	mov	r1, r6
 8008afc:	dcf1      	bgt.n	8008ae2 <__exponent+0x22>
 8008afe:	3130      	adds	r1, #48	; 0x30
 8008b00:	f1ae 0502 	sub.w	r5, lr, #2
 8008b04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b08:	1c44      	adds	r4, r0, #1
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4561      	cmp	r1, ip
 8008b0e:	d30a      	bcc.n	8008b26 <__exponent+0x66>
 8008b10:	f10d 0209 	add.w	r2, sp, #9
 8008b14:	eba2 020e 	sub.w	r2, r2, lr
 8008b18:	4565      	cmp	r5, ip
 8008b1a:	bf88      	it	hi
 8008b1c:	2200      	movhi	r2, #0
 8008b1e:	4413      	add	r3, r2
 8008b20:	1a18      	subs	r0, r3, r0
 8008b22:	b003      	add	sp, #12
 8008b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b2e:	e7ed      	b.n	8008b0c <__exponent+0x4c>
 8008b30:	2330      	movs	r3, #48	; 0x30
 8008b32:	3130      	adds	r1, #48	; 0x30
 8008b34:	7083      	strb	r3, [r0, #2]
 8008b36:	70c1      	strb	r1, [r0, #3]
 8008b38:	1d03      	adds	r3, r0, #4
 8008b3a:	e7f1      	b.n	8008b20 <__exponent+0x60>

08008b3c <_printf_float>:
 8008b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b40:	ed2d 8b02 	vpush	{d8}
 8008b44:	b08d      	sub	sp, #52	; 0x34
 8008b46:	460c      	mov	r4, r1
 8008b48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	461f      	mov	r7, r3
 8008b50:	4605      	mov	r5, r0
 8008b52:	f001 fa35 	bl	8009fc0 <_localeconv_r>
 8008b56:	f8d0 a000 	ldr.w	sl, [r0]
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	f7f7 fb48 	bl	80001f0 <strlen>
 8008b60:	2300      	movs	r3, #0
 8008b62:	930a      	str	r3, [sp, #40]	; 0x28
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	9305      	str	r3, [sp, #20]
 8008b68:	f8d8 3000 	ldr.w	r3, [r8]
 8008b6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b70:	3307      	adds	r3, #7
 8008b72:	f023 0307 	bic.w	r3, r3, #7
 8008b76:	f103 0208 	add.w	r2, r3, #8
 8008b7a:	f8c8 2000 	str.w	r2, [r8]
 8008b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b94:	ee08 0a10 	vmov	s16, r0
 8008b98:	4b9f      	ldr	r3, [pc, #636]	; (8008e18 <_printf_float+0x2dc>)
 8008b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba2:	f7f7 ffd3 	bl	8000b4c <__aeabi_dcmpun>
 8008ba6:	bb88      	cbnz	r0, 8008c0c <_printf_float+0xd0>
 8008ba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bac:	4b9a      	ldr	r3, [pc, #616]	; (8008e18 <_printf_float+0x2dc>)
 8008bae:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb2:	f7f7 ffad 	bl	8000b10 <__aeabi_dcmple>
 8008bb6:	bb48      	cbnz	r0, 8008c0c <_printf_float+0xd0>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	f7f7 ff9c 	bl	8000afc <__aeabi_dcmplt>
 8008bc4:	b110      	cbz	r0, 8008bcc <_printf_float+0x90>
 8008bc6:	232d      	movs	r3, #45	; 0x2d
 8008bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bcc:	4b93      	ldr	r3, [pc, #588]	; (8008e1c <_printf_float+0x2e0>)
 8008bce:	4894      	ldr	r0, [pc, #592]	; (8008e20 <_printf_float+0x2e4>)
 8008bd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008bd4:	bf94      	ite	ls
 8008bd6:	4698      	movls	r8, r3
 8008bd8:	4680      	movhi	r8, r0
 8008bda:	2303      	movs	r3, #3
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	9b05      	ldr	r3, [sp, #20]
 8008be0:	f023 0204 	bic.w	r2, r3, #4
 8008be4:	6022      	str	r2, [r4, #0]
 8008be6:	f04f 0900 	mov.w	r9, #0
 8008bea:	9700      	str	r7, [sp, #0]
 8008bec:	4633      	mov	r3, r6
 8008bee:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f000 f9d8 	bl	8008fa8 <_printf_common>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f040 8090 	bne.w	8008d1e <_printf_float+0x1e2>
 8008bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008c02:	b00d      	add	sp, #52	; 0x34
 8008c04:	ecbd 8b02 	vpop	{d8}
 8008c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	464b      	mov	r3, r9
 8008c10:	4640      	mov	r0, r8
 8008c12:	4649      	mov	r1, r9
 8008c14:	f7f7 ff9a 	bl	8000b4c <__aeabi_dcmpun>
 8008c18:	b140      	cbz	r0, 8008c2c <_printf_float+0xf0>
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfbc      	itt	lt
 8008c20:	232d      	movlt	r3, #45	; 0x2d
 8008c22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c26:	487f      	ldr	r0, [pc, #508]	; (8008e24 <_printf_float+0x2e8>)
 8008c28:	4b7f      	ldr	r3, [pc, #508]	; (8008e28 <_printf_float+0x2ec>)
 8008c2a:	e7d1      	b.n	8008bd0 <_printf_float+0x94>
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c32:	9206      	str	r2, [sp, #24]
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	d13f      	bne.n	8008cb8 <_printf_float+0x17c>
 8008c38:	2306      	movs	r3, #6
 8008c3a:	6063      	str	r3, [r4, #4]
 8008c3c:	9b05      	ldr	r3, [sp, #20]
 8008c3e:	6861      	ldr	r1, [r4, #4]
 8008c40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c44:	2300      	movs	r3, #0
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	ab0a      	add	r3, sp, #40	; 0x28
 8008c4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c4e:	ab09      	add	r3, sp, #36	; 0x24
 8008c50:	ec49 8b10 	vmov	d0, r8, r9
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	6022      	str	r2, [r4, #0]
 8008c58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f7ff fecd 	bl	80089fc <__cvt>
 8008c62:	9b06      	ldr	r3, [sp, #24]
 8008c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c66:	2b47      	cmp	r3, #71	; 0x47
 8008c68:	4680      	mov	r8, r0
 8008c6a:	d108      	bne.n	8008c7e <_printf_float+0x142>
 8008c6c:	1cc8      	adds	r0, r1, #3
 8008c6e:	db02      	blt.n	8008c76 <_printf_float+0x13a>
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	4299      	cmp	r1, r3
 8008c74:	dd41      	ble.n	8008cfa <_printf_float+0x1be>
 8008c76:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c7a:	fa5f fb8b 	uxtb.w	fp, fp
 8008c7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c82:	d820      	bhi.n	8008cc6 <_printf_float+0x18a>
 8008c84:	3901      	subs	r1, #1
 8008c86:	465a      	mov	r2, fp
 8008c88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c8c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c8e:	f7ff ff17 	bl	8008ac0 <__exponent>
 8008c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c94:	1813      	adds	r3, r2, r0
 8008c96:	2a01      	cmp	r2, #1
 8008c98:	4681      	mov	r9, r0
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	dc02      	bgt.n	8008ca4 <_printf_float+0x168>
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	07d2      	lsls	r2, r2, #31
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_float+0x16c>
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d09c      	beq.n	8008bea <_printf_float+0xae>
 8008cb0:	232d      	movs	r3, #45	; 0x2d
 8008cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb6:	e798      	b.n	8008bea <_printf_float+0xae>
 8008cb8:	9a06      	ldr	r2, [sp, #24]
 8008cba:	2a47      	cmp	r2, #71	; 0x47
 8008cbc:	d1be      	bne.n	8008c3c <_printf_float+0x100>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1bc      	bne.n	8008c3c <_printf_float+0x100>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7b9      	b.n	8008c3a <_printf_float+0xfe>
 8008cc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008cca:	d118      	bne.n	8008cfe <_printf_float+0x1c2>
 8008ccc:	2900      	cmp	r1, #0
 8008cce:	6863      	ldr	r3, [r4, #4]
 8008cd0:	dd0b      	ble.n	8008cea <_printf_float+0x1ae>
 8008cd2:	6121      	str	r1, [r4, #16]
 8008cd4:	b913      	cbnz	r3, 8008cdc <_printf_float+0x1a0>
 8008cd6:	6822      	ldr	r2, [r4, #0]
 8008cd8:	07d0      	lsls	r0, r2, #31
 8008cda:	d502      	bpl.n	8008ce2 <_printf_float+0x1a6>
 8008cdc:	3301      	adds	r3, #1
 8008cde:	440b      	add	r3, r1
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ce4:	f04f 0900 	mov.w	r9, #0
 8008ce8:	e7de      	b.n	8008ca8 <_printf_float+0x16c>
 8008cea:	b913      	cbnz	r3, 8008cf2 <_printf_float+0x1b6>
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	07d2      	lsls	r2, r2, #31
 8008cf0:	d501      	bpl.n	8008cf6 <_printf_float+0x1ba>
 8008cf2:	3302      	adds	r3, #2
 8008cf4:	e7f4      	b.n	8008ce0 <_printf_float+0x1a4>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e7f2      	b.n	8008ce0 <_printf_float+0x1a4>
 8008cfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d00:	4299      	cmp	r1, r3
 8008d02:	db05      	blt.n	8008d10 <_printf_float+0x1d4>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	6121      	str	r1, [r4, #16]
 8008d08:	07d8      	lsls	r0, r3, #31
 8008d0a:	d5ea      	bpl.n	8008ce2 <_printf_float+0x1a6>
 8008d0c:	1c4b      	adds	r3, r1, #1
 8008d0e:	e7e7      	b.n	8008ce0 <_printf_float+0x1a4>
 8008d10:	2900      	cmp	r1, #0
 8008d12:	bfd4      	ite	le
 8008d14:	f1c1 0202 	rsble	r2, r1, #2
 8008d18:	2201      	movgt	r2, #1
 8008d1a:	4413      	add	r3, r2
 8008d1c:	e7e0      	b.n	8008ce0 <_printf_float+0x1a4>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	055a      	lsls	r2, r3, #21
 8008d22:	d407      	bmi.n	8008d34 <_printf_float+0x1f8>
 8008d24:	6923      	ldr	r3, [r4, #16]
 8008d26:	4642      	mov	r2, r8
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b8      	blx	r7
 8008d2e:	3001      	adds	r0, #1
 8008d30:	d12c      	bne.n	8008d8c <_printf_float+0x250>
 8008d32:	e764      	b.n	8008bfe <_printf_float+0xc2>
 8008d34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d38:	f240 80e0 	bls.w	8008efc <_printf_float+0x3c0>
 8008d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d40:	2200      	movs	r2, #0
 8008d42:	2300      	movs	r3, #0
 8008d44:	f7f7 fed0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d034      	beq.n	8008db6 <_printf_float+0x27a>
 8008d4c:	4a37      	ldr	r2, [pc, #220]	; (8008e2c <_printf_float+0x2f0>)
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4631      	mov	r1, r6
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	f43f af51 	beq.w	8008bfe <_printf_float+0xc2>
 8008d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d60:	429a      	cmp	r2, r3
 8008d62:	db02      	blt.n	8008d6a <_printf_float+0x22e>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07d8      	lsls	r0, r3, #31
 8008d68:	d510      	bpl.n	8008d8c <_printf_float+0x250>
 8008d6a:	ee18 3a10 	vmov	r3, s16
 8008d6e:	4652      	mov	r2, sl
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f af41 	beq.w	8008bfe <_printf_float+0xc2>
 8008d7c:	f04f 0800 	mov.w	r8, #0
 8008d80:	f104 091a 	add.w	r9, r4, #26
 8008d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d86:	3b01      	subs	r3, #1
 8008d88:	4543      	cmp	r3, r8
 8008d8a:	dc09      	bgt.n	8008da0 <_printf_float+0x264>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	079b      	lsls	r3, r3, #30
 8008d90:	f100 8105 	bmi.w	8008f9e <_printf_float+0x462>
 8008d94:	68e0      	ldr	r0, [r4, #12]
 8008d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d98:	4298      	cmp	r0, r3
 8008d9a:	bfb8      	it	lt
 8008d9c:	4618      	movlt	r0, r3
 8008d9e:	e730      	b.n	8008c02 <_printf_float+0xc6>
 8008da0:	2301      	movs	r3, #1
 8008da2:	464a      	mov	r2, r9
 8008da4:	4631      	mov	r1, r6
 8008da6:	4628      	mov	r0, r5
 8008da8:	47b8      	blx	r7
 8008daa:	3001      	adds	r0, #1
 8008dac:	f43f af27 	beq.w	8008bfe <_printf_float+0xc2>
 8008db0:	f108 0801 	add.w	r8, r8, #1
 8008db4:	e7e6      	b.n	8008d84 <_printf_float+0x248>
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	dc39      	bgt.n	8008e30 <_printf_float+0x2f4>
 8008dbc:	4a1b      	ldr	r2, [pc, #108]	; (8008e2c <_printf_float+0x2f0>)
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f43f af19 	beq.w	8008bfe <_printf_float+0xc2>
 8008dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	d102      	bne.n	8008dda <_printf_float+0x29e>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	d5d8      	bpl.n	8008d8c <_printf_float+0x250>
 8008dda:	ee18 3a10 	vmov	r3, s16
 8008dde:	4652      	mov	r2, sl
 8008de0:	4631      	mov	r1, r6
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b8      	blx	r7
 8008de6:	3001      	adds	r0, #1
 8008de8:	f43f af09 	beq.w	8008bfe <_printf_float+0xc2>
 8008dec:	f04f 0900 	mov.w	r9, #0
 8008df0:	f104 0a1a 	add.w	sl, r4, #26
 8008df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df6:	425b      	negs	r3, r3
 8008df8:	454b      	cmp	r3, r9
 8008dfa:	dc01      	bgt.n	8008e00 <_printf_float+0x2c4>
 8008dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfe:	e792      	b.n	8008d26 <_printf_float+0x1ea>
 8008e00:	2301      	movs	r3, #1
 8008e02:	4652      	mov	r2, sl
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	47b8      	blx	r7
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	f43f aef7 	beq.w	8008bfe <_printf_float+0xc2>
 8008e10:	f109 0901 	add.w	r9, r9, #1
 8008e14:	e7ee      	b.n	8008df4 <_printf_float+0x2b8>
 8008e16:	bf00      	nop
 8008e18:	7fefffff 	.word	0x7fefffff
 8008e1c:	0800dfac 	.word	0x0800dfac
 8008e20:	0800dfb0 	.word	0x0800dfb0
 8008e24:	0800dfb8 	.word	0x0800dfb8
 8008e28:	0800dfb4 	.word	0x0800dfb4
 8008e2c:	0800dfbc 	.word	0x0800dfbc
 8008e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e34:	429a      	cmp	r2, r3
 8008e36:	bfa8      	it	ge
 8008e38:	461a      	movge	r2, r3
 8008e3a:	2a00      	cmp	r2, #0
 8008e3c:	4691      	mov	r9, r2
 8008e3e:	dc37      	bgt.n	8008eb0 <_printf_float+0x374>
 8008e40:	f04f 0b00 	mov.w	fp, #0
 8008e44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e48:	f104 021a 	add.w	r2, r4, #26
 8008e4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e4e:	9305      	str	r3, [sp, #20]
 8008e50:	eba3 0309 	sub.w	r3, r3, r9
 8008e54:	455b      	cmp	r3, fp
 8008e56:	dc33      	bgt.n	8008ec0 <_printf_float+0x384>
 8008e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	db3b      	blt.n	8008ed8 <_printf_float+0x39c>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	07da      	lsls	r2, r3, #31
 8008e64:	d438      	bmi.n	8008ed8 <_printf_float+0x39c>
 8008e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e68:	9b05      	ldr	r3, [sp, #20]
 8008e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	eba2 0901 	sub.w	r9, r2, r1
 8008e72:	4599      	cmp	r9, r3
 8008e74:	bfa8      	it	ge
 8008e76:	4699      	movge	r9, r3
 8008e78:	f1b9 0f00 	cmp.w	r9, #0
 8008e7c:	dc35      	bgt.n	8008eea <_printf_float+0x3ae>
 8008e7e:	f04f 0800 	mov.w	r8, #0
 8008e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e86:	f104 0a1a 	add.w	sl, r4, #26
 8008e8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	eba3 0309 	sub.w	r3, r3, r9
 8008e94:	4543      	cmp	r3, r8
 8008e96:	f77f af79 	ble.w	8008d8c <_printf_float+0x250>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b8      	blx	r7
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f43f aeaa 	beq.w	8008bfe <_printf_float+0xc2>
 8008eaa:	f108 0801 	add.w	r8, r8, #1
 8008eae:	e7ec      	b.n	8008e8a <_printf_float+0x34e>
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d1c0      	bne.n	8008e40 <_printf_float+0x304>
 8008ebe:	e69e      	b.n	8008bfe <_printf_float+0xc2>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	9205      	str	r2, [sp, #20]
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f43f ae97 	beq.w	8008bfe <_printf_float+0xc2>
 8008ed0:	9a05      	ldr	r2, [sp, #20]
 8008ed2:	f10b 0b01 	add.w	fp, fp, #1
 8008ed6:	e7b9      	b.n	8008e4c <_printf_float+0x310>
 8008ed8:	ee18 3a10 	vmov	r3, s16
 8008edc:	4652      	mov	r2, sl
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d1be      	bne.n	8008e66 <_printf_float+0x32a>
 8008ee8:	e689      	b.n	8008bfe <_printf_float+0xc2>
 8008eea:	9a05      	ldr	r2, [sp, #20]
 8008eec:	464b      	mov	r3, r9
 8008eee:	4442      	add	r2, r8
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d1c1      	bne.n	8008e7e <_printf_float+0x342>
 8008efa:	e680      	b.n	8008bfe <_printf_float+0xc2>
 8008efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008efe:	2a01      	cmp	r2, #1
 8008f00:	dc01      	bgt.n	8008f06 <_printf_float+0x3ca>
 8008f02:	07db      	lsls	r3, r3, #31
 8008f04:	d538      	bpl.n	8008f78 <_printf_float+0x43c>
 8008f06:	2301      	movs	r3, #1
 8008f08:	4642      	mov	r2, r8
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b8      	blx	r7
 8008f10:	3001      	adds	r0, #1
 8008f12:	f43f ae74 	beq.w	8008bfe <_printf_float+0xc2>
 8008f16:	ee18 3a10 	vmov	r3, s16
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	f43f ae6b 	beq.w	8008bfe <_printf_float+0xc2>
 8008f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f7f7 fdda 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f34:	b9d8      	cbnz	r0, 8008f6e <_printf_float+0x432>
 8008f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f38:	f108 0201 	add.w	r2, r8, #1
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b8      	blx	r7
 8008f44:	3001      	adds	r0, #1
 8008f46:	d10e      	bne.n	8008f66 <_printf_float+0x42a>
 8008f48:	e659      	b.n	8008bfe <_printf_float+0xc2>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b8      	blx	r7
 8008f54:	3001      	adds	r0, #1
 8008f56:	f43f ae52 	beq.w	8008bfe <_printf_float+0xc2>
 8008f5a:	f108 0801 	add.w	r8, r8, #1
 8008f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f60:	3b01      	subs	r3, #1
 8008f62:	4543      	cmp	r3, r8
 8008f64:	dcf1      	bgt.n	8008f4a <_printf_float+0x40e>
 8008f66:	464b      	mov	r3, r9
 8008f68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f6c:	e6dc      	b.n	8008d28 <_printf_float+0x1ec>
 8008f6e:	f04f 0800 	mov.w	r8, #0
 8008f72:	f104 0a1a 	add.w	sl, r4, #26
 8008f76:	e7f2      	b.n	8008f5e <_printf_float+0x422>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	e7df      	b.n	8008f3e <_printf_float+0x402>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	464a      	mov	r2, r9
 8008f82:	4631      	mov	r1, r6
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b8      	blx	r7
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f43f ae38 	beq.w	8008bfe <_printf_float+0xc2>
 8008f8e:	f108 0801 	add.w	r8, r8, #1
 8008f92:	68e3      	ldr	r3, [r4, #12]
 8008f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f96:	1a5b      	subs	r3, r3, r1
 8008f98:	4543      	cmp	r3, r8
 8008f9a:	dcf0      	bgt.n	8008f7e <_printf_float+0x442>
 8008f9c:	e6fa      	b.n	8008d94 <_printf_float+0x258>
 8008f9e:	f04f 0800 	mov.w	r8, #0
 8008fa2:	f104 0919 	add.w	r9, r4, #25
 8008fa6:	e7f4      	b.n	8008f92 <_printf_float+0x456>

08008fa8 <_printf_common>:
 8008fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	4616      	mov	r6, r2
 8008fae:	4699      	mov	r9, r3
 8008fb0:	688a      	ldr	r2, [r1, #8]
 8008fb2:	690b      	ldr	r3, [r1, #16]
 8008fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	bfb8      	it	lt
 8008fbc:	4613      	movlt	r3, r2
 8008fbe:	6033      	str	r3, [r6, #0]
 8008fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	b10a      	cbz	r2, 8008fce <_printf_common+0x26>
 8008fca:	3301      	adds	r3, #1
 8008fcc:	6033      	str	r3, [r6, #0]
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	0699      	lsls	r1, r3, #26
 8008fd2:	bf42      	ittt	mi
 8008fd4:	6833      	ldrmi	r3, [r6, #0]
 8008fd6:	3302      	addmi	r3, #2
 8008fd8:	6033      	strmi	r3, [r6, #0]
 8008fda:	6825      	ldr	r5, [r4, #0]
 8008fdc:	f015 0506 	ands.w	r5, r5, #6
 8008fe0:	d106      	bne.n	8008ff0 <_printf_common+0x48>
 8008fe2:	f104 0a19 	add.w	sl, r4, #25
 8008fe6:	68e3      	ldr	r3, [r4, #12]
 8008fe8:	6832      	ldr	r2, [r6, #0]
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	42ab      	cmp	r3, r5
 8008fee:	dc26      	bgt.n	800903e <_printf_common+0x96>
 8008ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ff4:	1e13      	subs	r3, r2, #0
 8008ff6:	6822      	ldr	r2, [r4, #0]
 8008ff8:	bf18      	it	ne
 8008ffa:	2301      	movne	r3, #1
 8008ffc:	0692      	lsls	r2, r2, #26
 8008ffe:	d42b      	bmi.n	8009058 <_printf_common+0xb0>
 8009000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009004:	4649      	mov	r1, r9
 8009006:	4638      	mov	r0, r7
 8009008:	47c0      	blx	r8
 800900a:	3001      	adds	r0, #1
 800900c:	d01e      	beq.n	800904c <_printf_common+0xa4>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	68e5      	ldr	r5, [r4, #12]
 8009012:	6832      	ldr	r2, [r6, #0]
 8009014:	f003 0306 	and.w	r3, r3, #6
 8009018:	2b04      	cmp	r3, #4
 800901a:	bf08      	it	eq
 800901c:	1aad      	subeq	r5, r5, r2
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	6922      	ldr	r2, [r4, #16]
 8009022:	bf0c      	ite	eq
 8009024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009028:	2500      	movne	r5, #0
 800902a:	4293      	cmp	r3, r2
 800902c:	bfc4      	itt	gt
 800902e:	1a9b      	subgt	r3, r3, r2
 8009030:	18ed      	addgt	r5, r5, r3
 8009032:	2600      	movs	r6, #0
 8009034:	341a      	adds	r4, #26
 8009036:	42b5      	cmp	r5, r6
 8009038:	d11a      	bne.n	8009070 <_printf_common+0xc8>
 800903a:	2000      	movs	r0, #0
 800903c:	e008      	b.n	8009050 <_printf_common+0xa8>
 800903e:	2301      	movs	r3, #1
 8009040:	4652      	mov	r2, sl
 8009042:	4649      	mov	r1, r9
 8009044:	4638      	mov	r0, r7
 8009046:	47c0      	blx	r8
 8009048:	3001      	adds	r0, #1
 800904a:	d103      	bne.n	8009054 <_printf_common+0xac>
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009054:	3501      	adds	r5, #1
 8009056:	e7c6      	b.n	8008fe6 <_printf_common+0x3e>
 8009058:	18e1      	adds	r1, r4, r3
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	2030      	movs	r0, #48	; 0x30
 800905e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009062:	4422      	add	r2, r4
 8009064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800906c:	3302      	adds	r3, #2
 800906e:	e7c7      	b.n	8009000 <_printf_common+0x58>
 8009070:	2301      	movs	r3, #1
 8009072:	4622      	mov	r2, r4
 8009074:	4649      	mov	r1, r9
 8009076:	4638      	mov	r0, r7
 8009078:	47c0      	blx	r8
 800907a:	3001      	adds	r0, #1
 800907c:	d0e6      	beq.n	800904c <_printf_common+0xa4>
 800907e:	3601      	adds	r6, #1
 8009080:	e7d9      	b.n	8009036 <_printf_common+0x8e>
	...

08009084 <_printf_i>:
 8009084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	460c      	mov	r4, r1
 800908a:	4691      	mov	r9, r2
 800908c:	7e27      	ldrb	r7, [r4, #24]
 800908e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009090:	2f78      	cmp	r7, #120	; 0x78
 8009092:	4680      	mov	r8, r0
 8009094:	469a      	mov	sl, r3
 8009096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800909a:	d807      	bhi.n	80090ac <_printf_i+0x28>
 800909c:	2f62      	cmp	r7, #98	; 0x62
 800909e:	d80a      	bhi.n	80090b6 <_printf_i+0x32>
 80090a0:	2f00      	cmp	r7, #0
 80090a2:	f000 80d8 	beq.w	8009256 <_printf_i+0x1d2>
 80090a6:	2f58      	cmp	r7, #88	; 0x58
 80090a8:	f000 80a3 	beq.w	80091f2 <_printf_i+0x16e>
 80090ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090b4:	e03a      	b.n	800912c <_printf_i+0xa8>
 80090b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ba:	2b15      	cmp	r3, #21
 80090bc:	d8f6      	bhi.n	80090ac <_printf_i+0x28>
 80090be:	a001      	add	r0, pc, #4	; (adr r0, 80090c4 <_printf_i+0x40>)
 80090c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80090c4:	0800911d 	.word	0x0800911d
 80090c8:	08009131 	.word	0x08009131
 80090cc:	080090ad 	.word	0x080090ad
 80090d0:	080090ad 	.word	0x080090ad
 80090d4:	080090ad 	.word	0x080090ad
 80090d8:	080090ad 	.word	0x080090ad
 80090dc:	08009131 	.word	0x08009131
 80090e0:	080090ad 	.word	0x080090ad
 80090e4:	080090ad 	.word	0x080090ad
 80090e8:	080090ad 	.word	0x080090ad
 80090ec:	080090ad 	.word	0x080090ad
 80090f0:	0800923d 	.word	0x0800923d
 80090f4:	08009161 	.word	0x08009161
 80090f8:	0800921f 	.word	0x0800921f
 80090fc:	080090ad 	.word	0x080090ad
 8009100:	080090ad 	.word	0x080090ad
 8009104:	0800925f 	.word	0x0800925f
 8009108:	080090ad 	.word	0x080090ad
 800910c:	08009161 	.word	0x08009161
 8009110:	080090ad 	.word	0x080090ad
 8009114:	080090ad 	.word	0x080090ad
 8009118:	08009227 	.word	0x08009227
 800911c:	680b      	ldr	r3, [r1, #0]
 800911e:	1d1a      	adds	r2, r3, #4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	600a      	str	r2, [r1, #0]
 8009124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800912c:	2301      	movs	r3, #1
 800912e:	e0a3      	b.n	8009278 <_printf_i+0x1f4>
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	6808      	ldr	r0, [r1, #0]
 8009134:	062e      	lsls	r6, r5, #24
 8009136:	f100 0304 	add.w	r3, r0, #4
 800913a:	d50a      	bpl.n	8009152 <_printf_i+0xce>
 800913c:	6805      	ldr	r5, [r0, #0]
 800913e:	600b      	str	r3, [r1, #0]
 8009140:	2d00      	cmp	r5, #0
 8009142:	da03      	bge.n	800914c <_printf_i+0xc8>
 8009144:	232d      	movs	r3, #45	; 0x2d
 8009146:	426d      	negs	r5, r5
 8009148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800914c:	485e      	ldr	r0, [pc, #376]	; (80092c8 <_printf_i+0x244>)
 800914e:	230a      	movs	r3, #10
 8009150:	e019      	b.n	8009186 <_printf_i+0x102>
 8009152:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009156:	6805      	ldr	r5, [r0, #0]
 8009158:	600b      	str	r3, [r1, #0]
 800915a:	bf18      	it	ne
 800915c:	b22d      	sxthne	r5, r5
 800915e:	e7ef      	b.n	8009140 <_printf_i+0xbc>
 8009160:	680b      	ldr	r3, [r1, #0]
 8009162:	6825      	ldr	r5, [r4, #0]
 8009164:	1d18      	adds	r0, r3, #4
 8009166:	6008      	str	r0, [r1, #0]
 8009168:	0628      	lsls	r0, r5, #24
 800916a:	d501      	bpl.n	8009170 <_printf_i+0xec>
 800916c:	681d      	ldr	r5, [r3, #0]
 800916e:	e002      	b.n	8009176 <_printf_i+0xf2>
 8009170:	0669      	lsls	r1, r5, #25
 8009172:	d5fb      	bpl.n	800916c <_printf_i+0xe8>
 8009174:	881d      	ldrh	r5, [r3, #0]
 8009176:	4854      	ldr	r0, [pc, #336]	; (80092c8 <_printf_i+0x244>)
 8009178:	2f6f      	cmp	r7, #111	; 0x6f
 800917a:	bf0c      	ite	eq
 800917c:	2308      	moveq	r3, #8
 800917e:	230a      	movne	r3, #10
 8009180:	2100      	movs	r1, #0
 8009182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009186:	6866      	ldr	r6, [r4, #4]
 8009188:	60a6      	str	r6, [r4, #8]
 800918a:	2e00      	cmp	r6, #0
 800918c:	bfa2      	ittt	ge
 800918e:	6821      	ldrge	r1, [r4, #0]
 8009190:	f021 0104 	bicge.w	r1, r1, #4
 8009194:	6021      	strge	r1, [r4, #0]
 8009196:	b90d      	cbnz	r5, 800919c <_printf_i+0x118>
 8009198:	2e00      	cmp	r6, #0
 800919a:	d04d      	beq.n	8009238 <_printf_i+0x1b4>
 800919c:	4616      	mov	r6, r2
 800919e:	fbb5 f1f3 	udiv	r1, r5, r3
 80091a2:	fb03 5711 	mls	r7, r3, r1, r5
 80091a6:	5dc7      	ldrb	r7, [r0, r7]
 80091a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091ac:	462f      	mov	r7, r5
 80091ae:	42bb      	cmp	r3, r7
 80091b0:	460d      	mov	r5, r1
 80091b2:	d9f4      	bls.n	800919e <_printf_i+0x11a>
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d10b      	bne.n	80091d0 <_printf_i+0x14c>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	07df      	lsls	r7, r3, #31
 80091bc:	d508      	bpl.n	80091d0 <_printf_i+0x14c>
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	6861      	ldr	r1, [r4, #4]
 80091c2:	4299      	cmp	r1, r3
 80091c4:	bfde      	ittt	le
 80091c6:	2330      	movle	r3, #48	; 0x30
 80091c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091d0:	1b92      	subs	r2, r2, r6
 80091d2:	6122      	str	r2, [r4, #16]
 80091d4:	f8cd a000 	str.w	sl, [sp]
 80091d8:	464b      	mov	r3, r9
 80091da:	aa03      	add	r2, sp, #12
 80091dc:	4621      	mov	r1, r4
 80091de:	4640      	mov	r0, r8
 80091e0:	f7ff fee2 	bl	8008fa8 <_printf_common>
 80091e4:	3001      	adds	r0, #1
 80091e6:	d14c      	bne.n	8009282 <_printf_i+0x1fe>
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	b004      	add	sp, #16
 80091ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f2:	4835      	ldr	r0, [pc, #212]	; (80092c8 <_printf_i+0x244>)
 80091f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	680e      	ldr	r6, [r1, #0]
 80091fc:	061f      	lsls	r7, r3, #24
 80091fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8009202:	600e      	str	r6, [r1, #0]
 8009204:	d514      	bpl.n	8009230 <_printf_i+0x1ac>
 8009206:	07d9      	lsls	r1, r3, #31
 8009208:	bf44      	itt	mi
 800920a:	f043 0320 	orrmi.w	r3, r3, #32
 800920e:	6023      	strmi	r3, [r4, #0]
 8009210:	b91d      	cbnz	r5, 800921a <_printf_i+0x196>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	f023 0320 	bic.w	r3, r3, #32
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	2310      	movs	r3, #16
 800921c:	e7b0      	b.n	8009180 <_printf_i+0xfc>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f043 0320 	orr.w	r3, r3, #32
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	2378      	movs	r3, #120	; 0x78
 8009228:	4828      	ldr	r0, [pc, #160]	; (80092cc <_printf_i+0x248>)
 800922a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800922e:	e7e3      	b.n	80091f8 <_printf_i+0x174>
 8009230:	065e      	lsls	r6, r3, #25
 8009232:	bf48      	it	mi
 8009234:	b2ad      	uxthmi	r5, r5
 8009236:	e7e6      	b.n	8009206 <_printf_i+0x182>
 8009238:	4616      	mov	r6, r2
 800923a:	e7bb      	b.n	80091b4 <_printf_i+0x130>
 800923c:	680b      	ldr	r3, [r1, #0]
 800923e:	6826      	ldr	r6, [r4, #0]
 8009240:	6960      	ldr	r0, [r4, #20]
 8009242:	1d1d      	adds	r5, r3, #4
 8009244:	600d      	str	r5, [r1, #0]
 8009246:	0635      	lsls	r5, r6, #24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	d501      	bpl.n	8009250 <_printf_i+0x1cc>
 800924c:	6018      	str	r0, [r3, #0]
 800924e:	e002      	b.n	8009256 <_printf_i+0x1d2>
 8009250:	0671      	lsls	r1, r6, #25
 8009252:	d5fb      	bpl.n	800924c <_printf_i+0x1c8>
 8009254:	8018      	strh	r0, [r3, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	6123      	str	r3, [r4, #16]
 800925a:	4616      	mov	r6, r2
 800925c:	e7ba      	b.n	80091d4 <_printf_i+0x150>
 800925e:	680b      	ldr	r3, [r1, #0]
 8009260:	1d1a      	adds	r2, r3, #4
 8009262:	600a      	str	r2, [r1, #0]
 8009264:	681e      	ldr	r6, [r3, #0]
 8009266:	6862      	ldr	r2, [r4, #4]
 8009268:	2100      	movs	r1, #0
 800926a:	4630      	mov	r0, r6
 800926c:	f7f6 ffc8 	bl	8000200 <memchr>
 8009270:	b108      	cbz	r0, 8009276 <_printf_i+0x1f2>
 8009272:	1b80      	subs	r0, r0, r6
 8009274:	6060      	str	r0, [r4, #4]
 8009276:	6863      	ldr	r3, [r4, #4]
 8009278:	6123      	str	r3, [r4, #16]
 800927a:	2300      	movs	r3, #0
 800927c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009280:	e7a8      	b.n	80091d4 <_printf_i+0x150>
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	4632      	mov	r2, r6
 8009286:	4649      	mov	r1, r9
 8009288:	4640      	mov	r0, r8
 800928a:	47d0      	blx	sl
 800928c:	3001      	adds	r0, #1
 800928e:	d0ab      	beq.n	80091e8 <_printf_i+0x164>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	079b      	lsls	r3, r3, #30
 8009294:	d413      	bmi.n	80092be <_printf_i+0x23a>
 8009296:	68e0      	ldr	r0, [r4, #12]
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	4298      	cmp	r0, r3
 800929c:	bfb8      	it	lt
 800929e:	4618      	movlt	r0, r3
 80092a0:	e7a4      	b.n	80091ec <_printf_i+0x168>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4632      	mov	r2, r6
 80092a6:	4649      	mov	r1, r9
 80092a8:	4640      	mov	r0, r8
 80092aa:	47d0      	blx	sl
 80092ac:	3001      	adds	r0, #1
 80092ae:	d09b      	beq.n	80091e8 <_printf_i+0x164>
 80092b0:	3501      	adds	r5, #1
 80092b2:	68e3      	ldr	r3, [r4, #12]
 80092b4:	9903      	ldr	r1, [sp, #12]
 80092b6:	1a5b      	subs	r3, r3, r1
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	dcf2      	bgt.n	80092a2 <_printf_i+0x21e>
 80092bc:	e7eb      	b.n	8009296 <_printf_i+0x212>
 80092be:	2500      	movs	r5, #0
 80092c0:	f104 0619 	add.w	r6, r4, #25
 80092c4:	e7f5      	b.n	80092b2 <_printf_i+0x22e>
 80092c6:	bf00      	nop
 80092c8:	0800dfbe 	.word	0x0800dfbe
 80092cc:	0800dfcf 	.word	0x0800dfcf

080092d0 <quorem>:
 80092d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	6903      	ldr	r3, [r0, #16]
 80092d6:	690c      	ldr	r4, [r1, #16]
 80092d8:	42a3      	cmp	r3, r4
 80092da:	4607      	mov	r7, r0
 80092dc:	f2c0 8081 	blt.w	80093e2 <quorem+0x112>
 80092e0:	3c01      	subs	r4, #1
 80092e2:	f101 0814 	add.w	r8, r1, #20
 80092e6:	f100 0514 	add.w	r5, r0, #20
 80092ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092f8:	3301      	adds	r3, #1
 80092fa:	429a      	cmp	r2, r3
 80092fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009300:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009304:	fbb2 f6f3 	udiv	r6, r2, r3
 8009308:	d331      	bcc.n	800936e <quorem+0x9e>
 800930a:	f04f 0e00 	mov.w	lr, #0
 800930e:	4640      	mov	r0, r8
 8009310:	46ac      	mov	ip, r5
 8009312:	46f2      	mov	sl, lr
 8009314:	f850 2b04 	ldr.w	r2, [r0], #4
 8009318:	b293      	uxth	r3, r2
 800931a:	fb06 e303 	mla	r3, r6, r3, lr
 800931e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009322:	b29b      	uxth	r3, r3
 8009324:	ebaa 0303 	sub.w	r3, sl, r3
 8009328:	0c12      	lsrs	r2, r2, #16
 800932a:	f8dc a000 	ldr.w	sl, [ip]
 800932e:	fb06 e202 	mla	r2, r6, r2, lr
 8009332:	fa13 f38a 	uxtah	r3, r3, sl
 8009336:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800933a:	fa1f fa82 	uxth.w	sl, r2
 800933e:	f8dc 2000 	ldr.w	r2, [ip]
 8009342:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009346:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800934a:	b29b      	uxth	r3, r3
 800934c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009350:	4581      	cmp	r9, r0
 8009352:	f84c 3b04 	str.w	r3, [ip], #4
 8009356:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800935a:	d2db      	bcs.n	8009314 <quorem+0x44>
 800935c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009360:	b92b      	cbnz	r3, 800936e <quorem+0x9e>
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	3b04      	subs	r3, #4
 8009366:	429d      	cmp	r5, r3
 8009368:	461a      	mov	r2, r3
 800936a:	d32e      	bcc.n	80093ca <quorem+0xfa>
 800936c:	613c      	str	r4, [r7, #16]
 800936e:	4638      	mov	r0, r7
 8009370:	f001 f8be 	bl	800a4f0 <__mcmp>
 8009374:	2800      	cmp	r0, #0
 8009376:	db24      	blt.n	80093c2 <quorem+0xf2>
 8009378:	3601      	adds	r6, #1
 800937a:	4628      	mov	r0, r5
 800937c:	f04f 0c00 	mov.w	ip, #0
 8009380:	f858 2b04 	ldr.w	r2, [r8], #4
 8009384:	f8d0 e000 	ldr.w	lr, [r0]
 8009388:	b293      	uxth	r3, r2
 800938a:	ebac 0303 	sub.w	r3, ip, r3
 800938e:	0c12      	lsrs	r2, r2, #16
 8009390:	fa13 f38e 	uxtah	r3, r3, lr
 8009394:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800939c:	b29b      	uxth	r3, r3
 800939e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093a2:	45c1      	cmp	r9, r8
 80093a4:	f840 3b04 	str.w	r3, [r0], #4
 80093a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093ac:	d2e8      	bcs.n	8009380 <quorem+0xb0>
 80093ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093b6:	b922      	cbnz	r2, 80093c2 <quorem+0xf2>
 80093b8:	3b04      	subs	r3, #4
 80093ba:	429d      	cmp	r5, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	d30a      	bcc.n	80093d6 <quorem+0x106>
 80093c0:	613c      	str	r4, [r7, #16]
 80093c2:	4630      	mov	r0, r6
 80093c4:	b003      	add	sp, #12
 80093c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	3b04      	subs	r3, #4
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	d1cc      	bne.n	800936c <quorem+0x9c>
 80093d2:	3c01      	subs	r4, #1
 80093d4:	e7c7      	b.n	8009366 <quorem+0x96>
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	3b04      	subs	r3, #4
 80093da:	2a00      	cmp	r2, #0
 80093dc:	d1f0      	bne.n	80093c0 <quorem+0xf0>
 80093de:	3c01      	subs	r4, #1
 80093e0:	e7eb      	b.n	80093ba <quorem+0xea>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e7ee      	b.n	80093c4 <quorem+0xf4>
	...

080093e8 <_dtoa_r>:
 80093e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	ed2d 8b02 	vpush	{d8}
 80093f0:	ec57 6b10 	vmov	r6, r7, d0
 80093f4:	b095      	sub	sp, #84	; 0x54
 80093f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093fc:	9105      	str	r1, [sp, #20]
 80093fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009402:	4604      	mov	r4, r0
 8009404:	9209      	str	r2, [sp, #36]	; 0x24
 8009406:	930f      	str	r3, [sp, #60]	; 0x3c
 8009408:	b975      	cbnz	r5, 8009428 <_dtoa_r+0x40>
 800940a:	2010      	movs	r0, #16
 800940c:	f000 fddc 	bl	8009fc8 <malloc>
 8009410:	4602      	mov	r2, r0
 8009412:	6260      	str	r0, [r4, #36]	; 0x24
 8009414:	b920      	cbnz	r0, 8009420 <_dtoa_r+0x38>
 8009416:	4bb2      	ldr	r3, [pc, #712]	; (80096e0 <_dtoa_r+0x2f8>)
 8009418:	21ea      	movs	r1, #234	; 0xea
 800941a:	48b2      	ldr	r0, [pc, #712]	; (80096e4 <_dtoa_r+0x2fc>)
 800941c:	f001 fa32 	bl	800a884 <__assert_func>
 8009420:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009424:	6005      	str	r5, [r0, #0]
 8009426:	60c5      	str	r5, [r0, #12]
 8009428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942a:	6819      	ldr	r1, [r3, #0]
 800942c:	b151      	cbz	r1, 8009444 <_dtoa_r+0x5c>
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	604a      	str	r2, [r1, #4]
 8009432:	2301      	movs	r3, #1
 8009434:	4093      	lsls	r3, r2
 8009436:	608b      	str	r3, [r1, #8]
 8009438:	4620      	mov	r0, r4
 800943a:	f000 fe1b 	bl	800a074 <_Bfree>
 800943e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	1e3b      	subs	r3, r7, #0
 8009446:	bfb9      	ittee	lt
 8009448:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800944c:	9303      	strlt	r3, [sp, #12]
 800944e:	2300      	movge	r3, #0
 8009450:	f8c8 3000 	strge.w	r3, [r8]
 8009454:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009458:	4ba3      	ldr	r3, [pc, #652]	; (80096e8 <_dtoa_r+0x300>)
 800945a:	bfbc      	itt	lt
 800945c:	2201      	movlt	r2, #1
 800945e:	f8c8 2000 	strlt.w	r2, [r8]
 8009462:	ea33 0309 	bics.w	r3, r3, r9
 8009466:	d11b      	bne.n	80094a0 <_dtoa_r+0xb8>
 8009468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800946a:	f242 730f 	movw	r3, #9999	; 0x270f
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009474:	4333      	orrs	r3, r6
 8009476:	f000 857a 	beq.w	8009f6e <_dtoa_r+0xb86>
 800947a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800947c:	b963      	cbnz	r3, 8009498 <_dtoa_r+0xb0>
 800947e:	4b9b      	ldr	r3, [pc, #620]	; (80096ec <_dtoa_r+0x304>)
 8009480:	e024      	b.n	80094cc <_dtoa_r+0xe4>
 8009482:	4b9b      	ldr	r3, [pc, #620]	; (80096f0 <_dtoa_r+0x308>)
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	9800      	ldr	r0, [sp, #0]
 800948e:	b015      	add	sp, #84	; 0x54
 8009490:	ecbd 8b02 	vpop	{d8}
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	4b94      	ldr	r3, [pc, #592]	; (80096ec <_dtoa_r+0x304>)
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	3303      	adds	r3, #3
 800949e:	e7f3      	b.n	8009488 <_dtoa_r+0xa0>
 80094a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094a4:	2200      	movs	r2, #0
 80094a6:	ec51 0b17 	vmov	r0, r1, d7
 80094aa:	2300      	movs	r3, #0
 80094ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80094b0:	f7f7 fb1a 	bl	8000ae8 <__aeabi_dcmpeq>
 80094b4:	4680      	mov	r8, r0
 80094b6:	b158      	cbz	r0, 80094d0 <_dtoa_r+0xe8>
 80094b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094ba:	2301      	movs	r3, #1
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 8551 	beq.w	8009f68 <_dtoa_r+0xb80>
 80094c6:	488b      	ldr	r0, [pc, #556]	; (80096f4 <_dtoa_r+0x30c>)
 80094c8:	6018      	str	r0, [r3, #0]
 80094ca:	1e43      	subs	r3, r0, #1
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	e7dd      	b.n	800948c <_dtoa_r+0xa4>
 80094d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80094d4:	aa12      	add	r2, sp, #72	; 0x48
 80094d6:	a913      	add	r1, sp, #76	; 0x4c
 80094d8:	4620      	mov	r0, r4
 80094da:	f001 f8ad 	bl	800a638 <__d2b>
 80094de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094e2:	4683      	mov	fp, r0
 80094e4:	2d00      	cmp	r5, #0
 80094e6:	d07c      	beq.n	80095e2 <_dtoa_r+0x1fa>
 80094e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80094ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80094f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80094fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80094fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009502:	4b7d      	ldr	r3, [pc, #500]	; (80096f8 <_dtoa_r+0x310>)
 8009504:	2200      	movs	r2, #0
 8009506:	4630      	mov	r0, r6
 8009508:	4639      	mov	r1, r7
 800950a:	f7f6 fecd 	bl	80002a8 <__aeabi_dsub>
 800950e:	a36e      	add	r3, pc, #440	; (adr r3, 80096c8 <_dtoa_r+0x2e0>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f7 f880 	bl	8000618 <__aeabi_dmul>
 8009518:	a36d      	add	r3, pc, #436	; (adr r3, 80096d0 <_dtoa_r+0x2e8>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f7f6 fec5 	bl	80002ac <__adddf3>
 8009522:	4606      	mov	r6, r0
 8009524:	4628      	mov	r0, r5
 8009526:	460f      	mov	r7, r1
 8009528:	f7f7 f80c 	bl	8000544 <__aeabi_i2d>
 800952c:	a36a      	add	r3, pc, #424	; (adr r3, 80096d8 <_dtoa_r+0x2f0>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f7 f871 	bl	8000618 <__aeabi_dmul>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4630      	mov	r0, r6
 800953c:	4639      	mov	r1, r7
 800953e:	f7f6 feb5 	bl	80002ac <__adddf3>
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	f7f7 fb17 	bl	8000b78 <__aeabi_d2iz>
 800954a:	2200      	movs	r2, #0
 800954c:	4682      	mov	sl, r0
 800954e:	2300      	movs	r3, #0
 8009550:	4630      	mov	r0, r6
 8009552:	4639      	mov	r1, r7
 8009554:	f7f7 fad2 	bl	8000afc <__aeabi_dcmplt>
 8009558:	b148      	cbz	r0, 800956e <_dtoa_r+0x186>
 800955a:	4650      	mov	r0, sl
 800955c:	f7f6 fff2 	bl	8000544 <__aeabi_i2d>
 8009560:	4632      	mov	r2, r6
 8009562:	463b      	mov	r3, r7
 8009564:	f7f7 fac0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009568:	b908      	cbnz	r0, 800956e <_dtoa_r+0x186>
 800956a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800956e:	f1ba 0f16 	cmp.w	sl, #22
 8009572:	d854      	bhi.n	800961e <_dtoa_r+0x236>
 8009574:	4b61      	ldr	r3, [pc, #388]	; (80096fc <_dtoa_r+0x314>)
 8009576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009582:	f7f7 fabb 	bl	8000afc <__aeabi_dcmplt>
 8009586:	2800      	cmp	r0, #0
 8009588:	d04b      	beq.n	8009622 <_dtoa_r+0x23a>
 800958a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800958e:	2300      	movs	r3, #0
 8009590:	930e      	str	r3, [sp, #56]	; 0x38
 8009592:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009594:	1b5d      	subs	r5, r3, r5
 8009596:	1e6b      	subs	r3, r5, #1
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	bf43      	ittte	mi
 800959c:	2300      	movmi	r3, #0
 800959e:	f1c5 0801 	rsbmi	r8, r5, #1
 80095a2:	9304      	strmi	r3, [sp, #16]
 80095a4:	f04f 0800 	movpl.w	r8, #0
 80095a8:	f1ba 0f00 	cmp.w	sl, #0
 80095ac:	db3b      	blt.n	8009626 <_dtoa_r+0x23e>
 80095ae:	9b04      	ldr	r3, [sp, #16]
 80095b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80095b4:	4453      	add	r3, sl
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	2300      	movs	r3, #0
 80095ba:	9306      	str	r3, [sp, #24]
 80095bc:	9b05      	ldr	r3, [sp, #20]
 80095be:	2b09      	cmp	r3, #9
 80095c0:	d869      	bhi.n	8009696 <_dtoa_r+0x2ae>
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	bfc4      	itt	gt
 80095c6:	3b04      	subgt	r3, #4
 80095c8:	9305      	strgt	r3, [sp, #20]
 80095ca:	9b05      	ldr	r3, [sp, #20]
 80095cc:	f1a3 0302 	sub.w	r3, r3, #2
 80095d0:	bfcc      	ite	gt
 80095d2:	2500      	movgt	r5, #0
 80095d4:	2501      	movle	r5, #1
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d869      	bhi.n	80096ae <_dtoa_r+0x2c6>
 80095da:	e8df f003 	tbb	[pc, r3]
 80095de:	4e2c      	.short	0x4e2c
 80095e0:	5a4c      	.short	0x5a4c
 80095e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80095e6:	441d      	add	r5, r3
 80095e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	bfc1      	itttt	gt
 80095f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80095f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80095fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009600:	bfda      	itte	le
 8009602:	f1c3 0320 	rsble	r3, r3, #32
 8009606:	fa06 f003 	lslle.w	r0, r6, r3
 800960a:	4318      	orrgt	r0, r3
 800960c:	f7f6 ff8a 	bl	8000524 <__aeabi_ui2d>
 8009610:	2301      	movs	r3, #1
 8009612:	4606      	mov	r6, r0
 8009614:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009618:	3d01      	subs	r5, #1
 800961a:	9310      	str	r3, [sp, #64]	; 0x40
 800961c:	e771      	b.n	8009502 <_dtoa_r+0x11a>
 800961e:	2301      	movs	r3, #1
 8009620:	e7b6      	b.n	8009590 <_dtoa_r+0x1a8>
 8009622:	900e      	str	r0, [sp, #56]	; 0x38
 8009624:	e7b5      	b.n	8009592 <_dtoa_r+0x1aa>
 8009626:	f1ca 0300 	rsb	r3, sl, #0
 800962a:	9306      	str	r3, [sp, #24]
 800962c:	2300      	movs	r3, #0
 800962e:	eba8 080a 	sub.w	r8, r8, sl
 8009632:	930d      	str	r3, [sp, #52]	; 0x34
 8009634:	e7c2      	b.n	80095bc <_dtoa_r+0x1d4>
 8009636:	2300      	movs	r3, #0
 8009638:	9308      	str	r3, [sp, #32]
 800963a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963c:	2b00      	cmp	r3, #0
 800963e:	dc39      	bgt.n	80096b4 <_dtoa_r+0x2cc>
 8009640:	f04f 0901 	mov.w	r9, #1
 8009644:	f8cd 9004 	str.w	r9, [sp, #4]
 8009648:	464b      	mov	r3, r9
 800964a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800964e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009650:	2200      	movs	r2, #0
 8009652:	6042      	str	r2, [r0, #4]
 8009654:	2204      	movs	r2, #4
 8009656:	f102 0614 	add.w	r6, r2, #20
 800965a:	429e      	cmp	r6, r3
 800965c:	6841      	ldr	r1, [r0, #4]
 800965e:	d92f      	bls.n	80096c0 <_dtoa_r+0x2d8>
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fcc7 	bl	8009ff4 <_Balloc>
 8009666:	9000      	str	r0, [sp, #0]
 8009668:	2800      	cmp	r0, #0
 800966a:	d14b      	bne.n	8009704 <_dtoa_r+0x31c>
 800966c:	4b24      	ldr	r3, [pc, #144]	; (8009700 <_dtoa_r+0x318>)
 800966e:	4602      	mov	r2, r0
 8009670:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009674:	e6d1      	b.n	800941a <_dtoa_r+0x32>
 8009676:	2301      	movs	r3, #1
 8009678:	e7de      	b.n	8009638 <_dtoa_r+0x250>
 800967a:	2300      	movs	r3, #0
 800967c:	9308      	str	r3, [sp, #32]
 800967e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009680:	eb0a 0903 	add.w	r9, sl, r3
 8009684:	f109 0301 	add.w	r3, r9, #1
 8009688:	2b01      	cmp	r3, #1
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	bfb8      	it	lt
 800968e:	2301      	movlt	r3, #1
 8009690:	e7dd      	b.n	800964e <_dtoa_r+0x266>
 8009692:	2301      	movs	r3, #1
 8009694:	e7f2      	b.n	800967c <_dtoa_r+0x294>
 8009696:	2501      	movs	r5, #1
 8009698:	2300      	movs	r3, #0
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	9508      	str	r5, [sp, #32]
 800969e:	f04f 39ff 	mov.w	r9, #4294967295
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80096a8:	2312      	movs	r3, #18
 80096aa:	9209      	str	r2, [sp, #36]	; 0x24
 80096ac:	e7cf      	b.n	800964e <_dtoa_r+0x266>
 80096ae:	2301      	movs	r3, #1
 80096b0:	9308      	str	r3, [sp, #32]
 80096b2:	e7f4      	b.n	800969e <_dtoa_r+0x2b6>
 80096b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80096b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80096bc:	464b      	mov	r3, r9
 80096be:	e7c6      	b.n	800964e <_dtoa_r+0x266>
 80096c0:	3101      	adds	r1, #1
 80096c2:	6041      	str	r1, [r0, #4]
 80096c4:	0052      	lsls	r2, r2, #1
 80096c6:	e7c6      	b.n	8009656 <_dtoa_r+0x26e>
 80096c8:	636f4361 	.word	0x636f4361
 80096cc:	3fd287a7 	.word	0x3fd287a7
 80096d0:	8b60c8b3 	.word	0x8b60c8b3
 80096d4:	3fc68a28 	.word	0x3fc68a28
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	0800dfed 	.word	0x0800dfed
 80096e4:	0800e004 	.word	0x0800e004
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	0800dfe9 	.word	0x0800dfe9
 80096f0:	0800dfe0 	.word	0x0800dfe0
 80096f4:	0800dfbd 	.word	0x0800dfbd
 80096f8:	3ff80000 	.word	0x3ff80000
 80096fc:	0800e100 	.word	0x0800e100
 8009700:	0800e063 	.word	0x0800e063
 8009704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009706:	9a00      	ldr	r2, [sp, #0]
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	2b0e      	cmp	r3, #14
 800970e:	f200 80ad 	bhi.w	800986c <_dtoa_r+0x484>
 8009712:	2d00      	cmp	r5, #0
 8009714:	f000 80aa 	beq.w	800986c <_dtoa_r+0x484>
 8009718:	f1ba 0f00 	cmp.w	sl, #0
 800971c:	dd36      	ble.n	800978c <_dtoa_r+0x3a4>
 800971e:	4ac3      	ldr	r2, [pc, #780]	; (8009a2c <_dtoa_r+0x644>)
 8009720:	f00a 030f 	and.w	r3, sl, #15
 8009724:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009728:	ed93 7b00 	vldr	d7, [r3]
 800972c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009730:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009734:	eeb0 8a47 	vmov.f32	s16, s14
 8009738:	eef0 8a67 	vmov.f32	s17, s15
 800973c:	d016      	beq.n	800976c <_dtoa_r+0x384>
 800973e:	4bbc      	ldr	r3, [pc, #752]	; (8009a30 <_dtoa_r+0x648>)
 8009740:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009748:	f7f7 f890 	bl	800086c <__aeabi_ddiv>
 800974c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009750:	f007 070f 	and.w	r7, r7, #15
 8009754:	2503      	movs	r5, #3
 8009756:	4eb6      	ldr	r6, [pc, #728]	; (8009a30 <_dtoa_r+0x648>)
 8009758:	b957      	cbnz	r7, 8009770 <_dtoa_r+0x388>
 800975a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975e:	ec53 2b18 	vmov	r2, r3, d8
 8009762:	f7f7 f883 	bl	800086c <__aeabi_ddiv>
 8009766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800976a:	e029      	b.n	80097c0 <_dtoa_r+0x3d8>
 800976c:	2502      	movs	r5, #2
 800976e:	e7f2      	b.n	8009756 <_dtoa_r+0x36e>
 8009770:	07f9      	lsls	r1, r7, #31
 8009772:	d508      	bpl.n	8009786 <_dtoa_r+0x39e>
 8009774:	ec51 0b18 	vmov	r0, r1, d8
 8009778:	e9d6 2300 	ldrd	r2, r3, [r6]
 800977c:	f7f6 ff4c 	bl	8000618 <__aeabi_dmul>
 8009780:	ec41 0b18 	vmov	d8, r0, r1
 8009784:	3501      	adds	r5, #1
 8009786:	107f      	asrs	r7, r7, #1
 8009788:	3608      	adds	r6, #8
 800978a:	e7e5      	b.n	8009758 <_dtoa_r+0x370>
 800978c:	f000 80a6 	beq.w	80098dc <_dtoa_r+0x4f4>
 8009790:	f1ca 0600 	rsb	r6, sl, #0
 8009794:	4ba5      	ldr	r3, [pc, #660]	; (8009a2c <_dtoa_r+0x644>)
 8009796:	4fa6      	ldr	r7, [pc, #664]	; (8009a30 <_dtoa_r+0x648>)
 8009798:	f006 020f 	and.w	r2, r6, #15
 800979c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097a8:	f7f6 ff36 	bl	8000618 <__aeabi_dmul>
 80097ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097b0:	1136      	asrs	r6, r6, #4
 80097b2:	2300      	movs	r3, #0
 80097b4:	2502      	movs	r5, #2
 80097b6:	2e00      	cmp	r6, #0
 80097b8:	f040 8085 	bne.w	80098c6 <_dtoa_r+0x4de>
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1d2      	bne.n	8009766 <_dtoa_r+0x37e>
 80097c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 808c 	beq.w	80098e0 <_dtoa_r+0x4f8>
 80097c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097cc:	4b99      	ldr	r3, [pc, #612]	; (8009a34 <_dtoa_r+0x64c>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	4630      	mov	r0, r6
 80097d2:	4639      	mov	r1, r7
 80097d4:	f7f7 f992 	bl	8000afc <__aeabi_dcmplt>
 80097d8:	2800      	cmp	r0, #0
 80097da:	f000 8081 	beq.w	80098e0 <_dtoa_r+0x4f8>
 80097de:	9b01      	ldr	r3, [sp, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d07d      	beq.n	80098e0 <_dtoa_r+0x4f8>
 80097e4:	f1b9 0f00 	cmp.w	r9, #0
 80097e8:	dd3c      	ble.n	8009864 <_dtoa_r+0x47c>
 80097ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80097ee:	9307      	str	r3, [sp, #28]
 80097f0:	2200      	movs	r2, #0
 80097f2:	4b91      	ldr	r3, [pc, #580]	; (8009a38 <_dtoa_r+0x650>)
 80097f4:	4630      	mov	r0, r6
 80097f6:	4639      	mov	r1, r7
 80097f8:	f7f6 ff0e 	bl	8000618 <__aeabi_dmul>
 80097fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009800:	3501      	adds	r5, #1
 8009802:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009806:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800980a:	4628      	mov	r0, r5
 800980c:	f7f6 fe9a 	bl	8000544 <__aeabi_i2d>
 8009810:	4632      	mov	r2, r6
 8009812:	463b      	mov	r3, r7
 8009814:	f7f6 ff00 	bl	8000618 <__aeabi_dmul>
 8009818:	4b88      	ldr	r3, [pc, #544]	; (8009a3c <_dtoa_r+0x654>)
 800981a:	2200      	movs	r2, #0
 800981c:	f7f6 fd46 	bl	80002ac <__adddf3>
 8009820:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800982c:	2b00      	cmp	r3, #0
 800982e:	d15c      	bne.n	80098ea <_dtoa_r+0x502>
 8009830:	4b83      	ldr	r3, [pc, #524]	; (8009a40 <_dtoa_r+0x658>)
 8009832:	2200      	movs	r2, #0
 8009834:	4630      	mov	r0, r6
 8009836:	4639      	mov	r1, r7
 8009838:	f7f6 fd36 	bl	80002a8 <__aeabi_dsub>
 800983c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009840:	4606      	mov	r6, r0
 8009842:	460f      	mov	r7, r1
 8009844:	f7f7 f978 	bl	8000b38 <__aeabi_dcmpgt>
 8009848:	2800      	cmp	r0, #0
 800984a:	f040 8296 	bne.w	8009d7a <_dtoa_r+0x992>
 800984e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009852:	4630      	mov	r0, r6
 8009854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009858:	4639      	mov	r1, r7
 800985a:	f7f7 f94f 	bl	8000afc <__aeabi_dcmplt>
 800985e:	2800      	cmp	r0, #0
 8009860:	f040 8288 	bne.w	8009d74 <_dtoa_r+0x98c>
 8009864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009868:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800986c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800986e:	2b00      	cmp	r3, #0
 8009870:	f2c0 8158 	blt.w	8009b24 <_dtoa_r+0x73c>
 8009874:	f1ba 0f0e 	cmp.w	sl, #14
 8009878:	f300 8154 	bgt.w	8009b24 <_dtoa_r+0x73c>
 800987c:	4b6b      	ldr	r3, [pc, #428]	; (8009a2c <_dtoa_r+0x644>)
 800987e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009882:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	f280 80e3 	bge.w	8009a54 <_dtoa_r+0x66c>
 800988e:	9b01      	ldr	r3, [sp, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	f300 80df 	bgt.w	8009a54 <_dtoa_r+0x66c>
 8009896:	f040 826d 	bne.w	8009d74 <_dtoa_r+0x98c>
 800989a:	4b69      	ldr	r3, [pc, #420]	; (8009a40 <_dtoa_r+0x658>)
 800989c:	2200      	movs	r2, #0
 800989e:	4640      	mov	r0, r8
 80098a0:	4649      	mov	r1, r9
 80098a2:	f7f6 feb9 	bl	8000618 <__aeabi_dmul>
 80098a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098aa:	f7f7 f93b 	bl	8000b24 <__aeabi_dcmpge>
 80098ae:	9e01      	ldr	r6, [sp, #4]
 80098b0:	4637      	mov	r7, r6
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f040 8243 	bne.w	8009d3e <_dtoa_r+0x956>
 80098b8:	9d00      	ldr	r5, [sp, #0]
 80098ba:	2331      	movs	r3, #49	; 0x31
 80098bc:	f805 3b01 	strb.w	r3, [r5], #1
 80098c0:	f10a 0a01 	add.w	sl, sl, #1
 80098c4:	e23f      	b.n	8009d46 <_dtoa_r+0x95e>
 80098c6:	07f2      	lsls	r2, r6, #31
 80098c8:	d505      	bpl.n	80098d6 <_dtoa_r+0x4ee>
 80098ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ce:	f7f6 fea3 	bl	8000618 <__aeabi_dmul>
 80098d2:	3501      	adds	r5, #1
 80098d4:	2301      	movs	r3, #1
 80098d6:	1076      	asrs	r6, r6, #1
 80098d8:	3708      	adds	r7, #8
 80098da:	e76c      	b.n	80097b6 <_dtoa_r+0x3ce>
 80098dc:	2502      	movs	r5, #2
 80098de:	e76f      	b.n	80097c0 <_dtoa_r+0x3d8>
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80098e6:	930c      	str	r3, [sp, #48]	; 0x30
 80098e8:	e78d      	b.n	8009806 <_dtoa_r+0x41e>
 80098ea:	9900      	ldr	r1, [sp, #0]
 80098ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80098ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098f0:	4b4e      	ldr	r3, [pc, #312]	; (8009a2c <_dtoa_r+0x644>)
 80098f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098f6:	4401      	add	r1, r0
 80098f8:	9102      	str	r1, [sp, #8]
 80098fa:	9908      	ldr	r1, [sp, #32]
 80098fc:	eeb0 8a47 	vmov.f32	s16, s14
 8009900:	eef0 8a67 	vmov.f32	s17, s15
 8009904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800990c:	2900      	cmp	r1, #0
 800990e:	d045      	beq.n	800999c <_dtoa_r+0x5b4>
 8009910:	494c      	ldr	r1, [pc, #304]	; (8009a44 <_dtoa_r+0x65c>)
 8009912:	2000      	movs	r0, #0
 8009914:	f7f6 ffaa 	bl	800086c <__aeabi_ddiv>
 8009918:	ec53 2b18 	vmov	r2, r3, d8
 800991c:	f7f6 fcc4 	bl	80002a8 <__aeabi_dsub>
 8009920:	9d00      	ldr	r5, [sp, #0]
 8009922:	ec41 0b18 	vmov	d8, r0, r1
 8009926:	4639      	mov	r1, r7
 8009928:	4630      	mov	r0, r6
 800992a:	f7f7 f925 	bl	8000b78 <__aeabi_d2iz>
 800992e:	900c      	str	r0, [sp, #48]	; 0x30
 8009930:	f7f6 fe08 	bl	8000544 <__aeabi_i2d>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4630      	mov	r0, r6
 800993a:	4639      	mov	r1, r7
 800993c:	f7f6 fcb4 	bl	80002a8 <__aeabi_dsub>
 8009940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009942:	3330      	adds	r3, #48	; 0x30
 8009944:	f805 3b01 	strb.w	r3, [r5], #1
 8009948:	ec53 2b18 	vmov	r2, r3, d8
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	f7f7 f8d4 	bl	8000afc <__aeabi_dcmplt>
 8009954:	2800      	cmp	r0, #0
 8009956:	d165      	bne.n	8009a24 <_dtoa_r+0x63c>
 8009958:	4632      	mov	r2, r6
 800995a:	463b      	mov	r3, r7
 800995c:	4935      	ldr	r1, [pc, #212]	; (8009a34 <_dtoa_r+0x64c>)
 800995e:	2000      	movs	r0, #0
 8009960:	f7f6 fca2 	bl	80002a8 <__aeabi_dsub>
 8009964:	ec53 2b18 	vmov	r2, r3, d8
 8009968:	f7f7 f8c8 	bl	8000afc <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	f040 80b9 	bne.w	8009ae4 <_dtoa_r+0x6fc>
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	429d      	cmp	r5, r3
 8009976:	f43f af75 	beq.w	8009864 <_dtoa_r+0x47c>
 800997a:	4b2f      	ldr	r3, [pc, #188]	; (8009a38 <_dtoa_r+0x650>)
 800997c:	ec51 0b18 	vmov	r0, r1, d8
 8009980:	2200      	movs	r2, #0
 8009982:	f7f6 fe49 	bl	8000618 <__aeabi_dmul>
 8009986:	4b2c      	ldr	r3, [pc, #176]	; (8009a38 <_dtoa_r+0x650>)
 8009988:	ec41 0b18 	vmov	d8, r0, r1
 800998c:	2200      	movs	r2, #0
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f6 fe41 	bl	8000618 <__aeabi_dmul>
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	e7c4      	b.n	8009926 <_dtoa_r+0x53e>
 800999c:	ec51 0b17 	vmov	r0, r1, d7
 80099a0:	f7f6 fe3a 	bl	8000618 <__aeabi_dmul>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	9d00      	ldr	r5, [sp, #0]
 80099a8:	930c      	str	r3, [sp, #48]	; 0x30
 80099aa:	ec41 0b18 	vmov	d8, r0, r1
 80099ae:	4639      	mov	r1, r7
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7f7 f8e1 	bl	8000b78 <__aeabi_d2iz>
 80099b6:	9011      	str	r0, [sp, #68]	; 0x44
 80099b8:	f7f6 fdc4 	bl	8000544 <__aeabi_i2d>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f6 fc70 	bl	80002a8 <__aeabi_dsub>
 80099c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099ca:	3330      	adds	r3, #48	; 0x30
 80099cc:	f805 3b01 	strb.w	r3, [r5], #1
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	429d      	cmp	r5, r3
 80099d4:	4606      	mov	r6, r0
 80099d6:	460f      	mov	r7, r1
 80099d8:	f04f 0200 	mov.w	r2, #0
 80099dc:	d134      	bne.n	8009a48 <_dtoa_r+0x660>
 80099de:	4b19      	ldr	r3, [pc, #100]	; (8009a44 <_dtoa_r+0x65c>)
 80099e0:	ec51 0b18 	vmov	r0, r1, d8
 80099e4:	f7f6 fc62 	bl	80002ac <__adddf3>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	4630      	mov	r0, r6
 80099ee:	4639      	mov	r1, r7
 80099f0:	f7f7 f8a2 	bl	8000b38 <__aeabi_dcmpgt>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d175      	bne.n	8009ae4 <_dtoa_r+0x6fc>
 80099f8:	ec53 2b18 	vmov	r2, r3, d8
 80099fc:	4911      	ldr	r1, [pc, #68]	; (8009a44 <_dtoa_r+0x65c>)
 80099fe:	2000      	movs	r0, #0
 8009a00:	f7f6 fc52 	bl	80002a8 <__aeabi_dsub>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4630      	mov	r0, r6
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f7f7 f876 	bl	8000afc <__aeabi_dcmplt>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	f43f af27 	beq.w	8009864 <_dtoa_r+0x47c>
 8009a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a18:	1e6b      	subs	r3, r5, #1
 8009a1a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a20:	2b30      	cmp	r3, #48	; 0x30
 8009a22:	d0f8      	beq.n	8009a16 <_dtoa_r+0x62e>
 8009a24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a28:	e04a      	b.n	8009ac0 <_dtoa_r+0x6d8>
 8009a2a:	bf00      	nop
 8009a2c:	0800e100 	.word	0x0800e100
 8009a30:	0800e0d8 	.word	0x0800e0d8
 8009a34:	3ff00000 	.word	0x3ff00000
 8009a38:	40240000 	.word	0x40240000
 8009a3c:	401c0000 	.word	0x401c0000
 8009a40:	40140000 	.word	0x40140000
 8009a44:	3fe00000 	.word	0x3fe00000
 8009a48:	4baf      	ldr	r3, [pc, #700]	; (8009d08 <_dtoa_r+0x920>)
 8009a4a:	f7f6 fde5 	bl	8000618 <__aeabi_dmul>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	460f      	mov	r7, r1
 8009a52:	e7ac      	b.n	80099ae <_dtoa_r+0x5c6>
 8009a54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a58:	9d00      	ldr	r5, [sp, #0]
 8009a5a:	4642      	mov	r2, r8
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	4630      	mov	r0, r6
 8009a60:	4639      	mov	r1, r7
 8009a62:	f7f6 ff03 	bl	800086c <__aeabi_ddiv>
 8009a66:	f7f7 f887 	bl	8000b78 <__aeabi_d2iz>
 8009a6a:	9002      	str	r0, [sp, #8]
 8009a6c:	f7f6 fd6a 	bl	8000544 <__aeabi_i2d>
 8009a70:	4642      	mov	r2, r8
 8009a72:	464b      	mov	r3, r9
 8009a74:	f7f6 fdd0 	bl	8000618 <__aeabi_dmul>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	4639      	mov	r1, r7
 8009a80:	f7f6 fc12 	bl	80002a8 <__aeabi_dsub>
 8009a84:	9e02      	ldr	r6, [sp, #8]
 8009a86:	9f01      	ldr	r7, [sp, #4]
 8009a88:	3630      	adds	r6, #48	; 0x30
 8009a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a8e:	9e00      	ldr	r6, [sp, #0]
 8009a90:	1bae      	subs	r6, r5, r6
 8009a92:	42b7      	cmp	r7, r6
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	d137      	bne.n	8009b0a <_dtoa_r+0x722>
 8009a9a:	f7f6 fc07 	bl	80002ac <__adddf3>
 8009a9e:	4642      	mov	r2, r8
 8009aa0:	464b      	mov	r3, r9
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460f      	mov	r7, r1
 8009aa6:	f7f7 f847 	bl	8000b38 <__aeabi_dcmpgt>
 8009aaa:	b9c8      	cbnz	r0, 8009ae0 <_dtoa_r+0x6f8>
 8009aac:	4642      	mov	r2, r8
 8009aae:	464b      	mov	r3, r9
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	f7f7 f818 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ab8:	b110      	cbz	r0, 8009ac0 <_dtoa_r+0x6d8>
 8009aba:	9b02      	ldr	r3, [sp, #8]
 8009abc:	07d9      	lsls	r1, r3, #31
 8009abe:	d40f      	bmi.n	8009ae0 <_dtoa_r+0x6f8>
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	4659      	mov	r1, fp
 8009ac4:	f000 fad6 	bl	800a074 <_Bfree>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	702b      	strb	r3, [r5, #0]
 8009acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ace:	f10a 0001 	add.w	r0, sl, #1
 8009ad2:	6018      	str	r0, [r3, #0]
 8009ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f43f acd8 	beq.w	800948c <_dtoa_r+0xa4>
 8009adc:	601d      	str	r5, [r3, #0]
 8009ade:	e4d5      	b.n	800948c <_dtoa_r+0xa4>
 8009ae0:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	461d      	mov	r5, r3
 8009ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aec:	2a39      	cmp	r2, #57	; 0x39
 8009aee:	d108      	bne.n	8009b02 <_dtoa_r+0x71a>
 8009af0:	9a00      	ldr	r2, [sp, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d1f7      	bne.n	8009ae6 <_dtoa_r+0x6fe>
 8009af6:	9a07      	ldr	r2, [sp, #28]
 8009af8:	9900      	ldr	r1, [sp, #0]
 8009afa:	3201      	adds	r2, #1
 8009afc:	9207      	str	r2, [sp, #28]
 8009afe:	2230      	movs	r2, #48	; 0x30
 8009b00:	700a      	strb	r2, [r1, #0]
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	3201      	adds	r2, #1
 8009b06:	701a      	strb	r2, [r3, #0]
 8009b08:	e78c      	b.n	8009a24 <_dtoa_r+0x63c>
 8009b0a:	4b7f      	ldr	r3, [pc, #508]	; (8009d08 <_dtoa_r+0x920>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f7f6 fd83 	bl	8000618 <__aeabi_dmul>
 8009b12:	2200      	movs	r2, #0
 8009b14:	2300      	movs	r3, #0
 8009b16:	4606      	mov	r6, r0
 8009b18:	460f      	mov	r7, r1
 8009b1a:	f7f6 ffe5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d09b      	beq.n	8009a5a <_dtoa_r+0x672>
 8009b22:	e7cd      	b.n	8009ac0 <_dtoa_r+0x6d8>
 8009b24:	9a08      	ldr	r2, [sp, #32]
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	f000 80c4 	beq.w	8009cb4 <_dtoa_r+0x8cc>
 8009b2c:	9a05      	ldr	r2, [sp, #20]
 8009b2e:	2a01      	cmp	r2, #1
 8009b30:	f300 80a8 	bgt.w	8009c84 <_dtoa_r+0x89c>
 8009b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b36:	2a00      	cmp	r2, #0
 8009b38:	f000 80a0 	beq.w	8009c7c <_dtoa_r+0x894>
 8009b3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b40:	9e06      	ldr	r6, [sp, #24]
 8009b42:	4645      	mov	r5, r8
 8009b44:	9a04      	ldr	r2, [sp, #16]
 8009b46:	2101      	movs	r1, #1
 8009b48:	441a      	add	r2, r3
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	4498      	add	r8, r3
 8009b4e:	9204      	str	r2, [sp, #16]
 8009b50:	f000 fb4c 	bl	800a1ec <__i2b>
 8009b54:	4607      	mov	r7, r0
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	dd0b      	ble.n	8009b72 <_dtoa_r+0x78a>
 8009b5a:	9b04      	ldr	r3, [sp, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dd08      	ble.n	8009b72 <_dtoa_r+0x78a>
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	9a04      	ldr	r2, [sp, #16]
 8009b64:	bfa8      	it	ge
 8009b66:	462b      	movge	r3, r5
 8009b68:	eba8 0803 	sub.w	r8, r8, r3
 8009b6c:	1aed      	subs	r5, r5, r3
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	9b06      	ldr	r3, [sp, #24]
 8009b74:	b1fb      	cbz	r3, 8009bb6 <_dtoa_r+0x7ce>
 8009b76:	9b08      	ldr	r3, [sp, #32]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 809f 	beq.w	8009cbc <_dtoa_r+0x8d4>
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	dd11      	ble.n	8009ba6 <_dtoa_r+0x7be>
 8009b82:	4639      	mov	r1, r7
 8009b84:	4632      	mov	r2, r6
 8009b86:	4620      	mov	r0, r4
 8009b88:	f000 fbec 	bl	800a364 <__pow5mult>
 8009b8c:	465a      	mov	r2, fp
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4607      	mov	r7, r0
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 fb40 	bl	800a218 <__multiply>
 8009b98:	4659      	mov	r1, fp
 8009b9a:	9007      	str	r0, [sp, #28]
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fa69 	bl	800a074 <_Bfree>
 8009ba2:	9b07      	ldr	r3, [sp, #28]
 8009ba4:	469b      	mov	fp, r3
 8009ba6:	9b06      	ldr	r3, [sp, #24]
 8009ba8:	1b9a      	subs	r2, r3, r6
 8009baa:	d004      	beq.n	8009bb6 <_dtoa_r+0x7ce>
 8009bac:	4659      	mov	r1, fp
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fbd8 	bl	800a364 <__pow5mult>
 8009bb4:	4683      	mov	fp, r0
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f000 fb17 	bl	800a1ec <__i2b>
 8009bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	dd7c      	ble.n	8009cc0 <_dtoa_r+0x8d8>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 fbca 	bl	800a364 <__pow5mult>
 8009bd0:	9b05      	ldr	r3, [sp, #20]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	dd76      	ble.n	8009cc6 <_dtoa_r+0x8de>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	6933      	ldr	r3, [r6, #16]
 8009bde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009be2:	6918      	ldr	r0, [r3, #16]
 8009be4:	f000 fab2 	bl	800a14c <__hi0bits>
 8009be8:	f1c0 0020 	rsb	r0, r0, #32
 8009bec:	9b04      	ldr	r3, [sp, #16]
 8009bee:	4418      	add	r0, r3
 8009bf0:	f010 001f 	ands.w	r0, r0, #31
 8009bf4:	f000 8086 	beq.w	8009d04 <_dtoa_r+0x91c>
 8009bf8:	f1c0 0320 	rsb	r3, r0, #32
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	dd7f      	ble.n	8009d00 <_dtoa_r+0x918>
 8009c00:	f1c0 001c 	rsb	r0, r0, #28
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	4403      	add	r3, r0
 8009c08:	4480      	add	r8, r0
 8009c0a:	4405      	add	r5, r0
 8009c0c:	9304      	str	r3, [sp, #16]
 8009c0e:	f1b8 0f00 	cmp.w	r8, #0
 8009c12:	dd05      	ble.n	8009c20 <_dtoa_r+0x838>
 8009c14:	4659      	mov	r1, fp
 8009c16:	4642      	mov	r2, r8
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fbfd 	bl	800a418 <__lshift>
 8009c1e:	4683      	mov	fp, r0
 8009c20:	9b04      	ldr	r3, [sp, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dd05      	ble.n	8009c32 <_dtoa_r+0x84a>
 8009c26:	4631      	mov	r1, r6
 8009c28:	461a      	mov	r2, r3
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 fbf4 	bl	800a418 <__lshift>
 8009c30:	4606      	mov	r6, r0
 8009c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d069      	beq.n	8009d0c <_dtoa_r+0x924>
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4658      	mov	r0, fp
 8009c3c:	f000 fc58 	bl	800a4f0 <__mcmp>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	da63      	bge.n	8009d0c <_dtoa_r+0x924>
 8009c44:	2300      	movs	r3, #0
 8009c46:	4659      	mov	r1, fp
 8009c48:	220a      	movs	r2, #10
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 fa34 	bl	800a0b8 <__multadd>
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c56:	4683      	mov	fp, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 818f 	beq.w	8009f7c <_dtoa_r+0xb94>
 8009c5e:	4639      	mov	r1, r7
 8009c60:	2300      	movs	r3, #0
 8009c62:	220a      	movs	r2, #10
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fa27 	bl	800a0b8 <__multadd>
 8009c6a:	f1b9 0f00 	cmp.w	r9, #0
 8009c6e:	4607      	mov	r7, r0
 8009c70:	f300 808e 	bgt.w	8009d90 <_dtoa_r+0x9a8>
 8009c74:	9b05      	ldr	r3, [sp, #20]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	dc50      	bgt.n	8009d1c <_dtoa_r+0x934>
 8009c7a:	e089      	b.n	8009d90 <_dtoa_r+0x9a8>
 8009c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c82:	e75d      	b.n	8009b40 <_dtoa_r+0x758>
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	1e5e      	subs	r6, r3, #1
 8009c88:	9b06      	ldr	r3, [sp, #24]
 8009c8a:	42b3      	cmp	r3, r6
 8009c8c:	bfbf      	itttt	lt
 8009c8e:	9b06      	ldrlt	r3, [sp, #24]
 8009c90:	9606      	strlt	r6, [sp, #24]
 8009c92:	1af2      	sublt	r2, r6, r3
 8009c94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009c96:	bfb6      	itet	lt
 8009c98:	189b      	addlt	r3, r3, r2
 8009c9a:	1b9e      	subge	r6, r3, r6
 8009c9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	bfb8      	it	lt
 8009ca2:	2600      	movlt	r6, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfb5      	itete	lt
 8009ca8:	eba8 0503 	sublt.w	r5, r8, r3
 8009cac:	9b01      	ldrge	r3, [sp, #4]
 8009cae:	2300      	movlt	r3, #0
 8009cb0:	4645      	movge	r5, r8
 8009cb2:	e747      	b.n	8009b44 <_dtoa_r+0x75c>
 8009cb4:	9e06      	ldr	r6, [sp, #24]
 8009cb6:	9f08      	ldr	r7, [sp, #32]
 8009cb8:	4645      	mov	r5, r8
 8009cba:	e74c      	b.n	8009b56 <_dtoa_r+0x76e>
 8009cbc:	9a06      	ldr	r2, [sp, #24]
 8009cbe:	e775      	b.n	8009bac <_dtoa_r+0x7c4>
 8009cc0:	9b05      	ldr	r3, [sp, #20]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	dc18      	bgt.n	8009cf8 <_dtoa_r+0x910>
 8009cc6:	9b02      	ldr	r3, [sp, #8]
 8009cc8:	b9b3      	cbnz	r3, 8009cf8 <_dtoa_r+0x910>
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cd0:	b9a3      	cbnz	r3, 8009cfc <_dtoa_r+0x914>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cd8:	0d1b      	lsrs	r3, r3, #20
 8009cda:	051b      	lsls	r3, r3, #20
 8009cdc:	b12b      	cbz	r3, 8009cea <_dtoa_r+0x902>
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	f108 0801 	add.w	r8, r8, #1
 8009ce8:	2301      	movs	r3, #1
 8009cea:	9306      	str	r3, [sp, #24]
 8009cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f47f af74 	bne.w	8009bdc <_dtoa_r+0x7f4>
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	e779      	b.n	8009bec <_dtoa_r+0x804>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e7f6      	b.n	8009cea <_dtoa_r+0x902>
 8009cfc:	9b02      	ldr	r3, [sp, #8]
 8009cfe:	e7f4      	b.n	8009cea <_dtoa_r+0x902>
 8009d00:	d085      	beq.n	8009c0e <_dtoa_r+0x826>
 8009d02:	4618      	mov	r0, r3
 8009d04:	301c      	adds	r0, #28
 8009d06:	e77d      	b.n	8009c04 <_dtoa_r+0x81c>
 8009d08:	40240000 	.word	0x40240000
 8009d0c:	9b01      	ldr	r3, [sp, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dc38      	bgt.n	8009d84 <_dtoa_r+0x99c>
 8009d12:	9b05      	ldr	r3, [sp, #20]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	dd35      	ble.n	8009d84 <_dtoa_r+0x99c>
 8009d18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d1c:	f1b9 0f00 	cmp.w	r9, #0
 8009d20:	d10d      	bne.n	8009d3e <_dtoa_r+0x956>
 8009d22:	4631      	mov	r1, r6
 8009d24:	464b      	mov	r3, r9
 8009d26:	2205      	movs	r2, #5
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 f9c5 	bl	800a0b8 <__multadd>
 8009d2e:	4601      	mov	r1, r0
 8009d30:	4606      	mov	r6, r0
 8009d32:	4658      	mov	r0, fp
 8009d34:	f000 fbdc 	bl	800a4f0 <__mcmp>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	f73f adbd 	bgt.w	80098b8 <_dtoa_r+0x4d0>
 8009d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d40:	9d00      	ldr	r5, [sp, #0]
 8009d42:	ea6f 0a03 	mvn.w	sl, r3
 8009d46:	f04f 0800 	mov.w	r8, #0
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 f991 	bl	800a074 <_Bfree>
 8009d52:	2f00      	cmp	r7, #0
 8009d54:	f43f aeb4 	beq.w	8009ac0 <_dtoa_r+0x6d8>
 8009d58:	f1b8 0f00 	cmp.w	r8, #0
 8009d5c:	d005      	beq.n	8009d6a <_dtoa_r+0x982>
 8009d5e:	45b8      	cmp	r8, r7
 8009d60:	d003      	beq.n	8009d6a <_dtoa_r+0x982>
 8009d62:	4641      	mov	r1, r8
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 f985 	bl	800a074 <_Bfree>
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 f981 	bl	800a074 <_Bfree>
 8009d72:	e6a5      	b.n	8009ac0 <_dtoa_r+0x6d8>
 8009d74:	2600      	movs	r6, #0
 8009d76:	4637      	mov	r7, r6
 8009d78:	e7e1      	b.n	8009d3e <_dtoa_r+0x956>
 8009d7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009d7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d80:	4637      	mov	r7, r6
 8009d82:	e599      	b.n	80098b8 <_dtoa_r+0x4d0>
 8009d84:	9b08      	ldr	r3, [sp, #32]
 8009d86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 80fd 	beq.w	8009f8a <_dtoa_r+0xba2>
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	dd05      	ble.n	8009da0 <_dtoa_r+0x9b8>
 8009d94:	4639      	mov	r1, r7
 8009d96:	462a      	mov	r2, r5
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 fb3d 	bl	800a418 <__lshift>
 8009d9e:	4607      	mov	r7, r0
 8009da0:	9b06      	ldr	r3, [sp, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d05c      	beq.n	8009e60 <_dtoa_r+0xa78>
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 f923 	bl	8009ff4 <_Balloc>
 8009dae:	4605      	mov	r5, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <_dtoa_r+0x9d6>
 8009db2:	4b80      	ldr	r3, [pc, #512]	; (8009fb4 <_dtoa_r+0xbcc>)
 8009db4:	4602      	mov	r2, r0
 8009db6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009dba:	f7ff bb2e 	b.w	800941a <_dtoa_r+0x32>
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	3202      	adds	r2, #2
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	f107 010c 	add.w	r1, r7, #12
 8009dc8:	300c      	adds	r0, #12
 8009dca:	f000 f905 	bl	8009fd8 <memcpy>
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f000 fb20 	bl	800a418 <__lshift>
 8009dd8:	9b00      	ldr	r3, [sp, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	9b00      	ldr	r3, [sp, #0]
 8009de0:	444b      	add	r3, r9
 8009de2:	9307      	str	r3, [sp, #28]
 8009de4:	9b02      	ldr	r3, [sp, #8]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	46b8      	mov	r8, r7
 8009dec:	9306      	str	r3, [sp, #24]
 8009dee:	4607      	mov	r7, r0
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	4631      	mov	r1, r6
 8009df4:	3b01      	subs	r3, #1
 8009df6:	4658      	mov	r0, fp
 8009df8:	9302      	str	r3, [sp, #8]
 8009dfa:	f7ff fa69 	bl	80092d0 <quorem>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	3330      	adds	r3, #48	; 0x30
 8009e02:	9004      	str	r0, [sp, #16]
 8009e04:	4641      	mov	r1, r8
 8009e06:	4658      	mov	r0, fp
 8009e08:	9308      	str	r3, [sp, #32]
 8009e0a:	f000 fb71 	bl	800a4f0 <__mcmp>
 8009e0e:	463a      	mov	r2, r7
 8009e10:	4681      	mov	r9, r0
 8009e12:	4631      	mov	r1, r6
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fb87 	bl	800a528 <__mdiff>
 8009e1a:	68c2      	ldr	r2, [r0, #12]
 8009e1c:	9b08      	ldr	r3, [sp, #32]
 8009e1e:	4605      	mov	r5, r0
 8009e20:	bb02      	cbnz	r2, 8009e64 <_dtoa_r+0xa7c>
 8009e22:	4601      	mov	r1, r0
 8009e24:	4658      	mov	r0, fp
 8009e26:	f000 fb63 	bl	800a4f0 <__mcmp>
 8009e2a:	9b08      	ldr	r3, [sp, #32]
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	4629      	mov	r1, r5
 8009e30:	4620      	mov	r0, r4
 8009e32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009e36:	f000 f91d 	bl	800a074 <_Bfree>
 8009e3a:	9b05      	ldr	r3, [sp, #20]
 8009e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e3e:	9d01      	ldr	r5, [sp, #4]
 8009e40:	ea43 0102 	orr.w	r1, r3, r2
 8009e44:	9b06      	ldr	r3, [sp, #24]
 8009e46:	430b      	orrs	r3, r1
 8009e48:	9b08      	ldr	r3, [sp, #32]
 8009e4a:	d10d      	bne.n	8009e68 <_dtoa_r+0xa80>
 8009e4c:	2b39      	cmp	r3, #57	; 0x39
 8009e4e:	d029      	beq.n	8009ea4 <_dtoa_r+0xabc>
 8009e50:	f1b9 0f00 	cmp.w	r9, #0
 8009e54:	dd01      	ble.n	8009e5a <_dtoa_r+0xa72>
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	3331      	adds	r3, #49	; 0x31
 8009e5a:	9a02      	ldr	r2, [sp, #8]
 8009e5c:	7013      	strb	r3, [r2, #0]
 8009e5e:	e774      	b.n	8009d4a <_dtoa_r+0x962>
 8009e60:	4638      	mov	r0, r7
 8009e62:	e7b9      	b.n	8009dd8 <_dtoa_r+0x9f0>
 8009e64:	2201      	movs	r2, #1
 8009e66:	e7e2      	b.n	8009e2e <_dtoa_r+0xa46>
 8009e68:	f1b9 0f00 	cmp.w	r9, #0
 8009e6c:	db06      	blt.n	8009e7c <_dtoa_r+0xa94>
 8009e6e:	9905      	ldr	r1, [sp, #20]
 8009e70:	ea41 0909 	orr.w	r9, r1, r9
 8009e74:	9906      	ldr	r1, [sp, #24]
 8009e76:	ea59 0101 	orrs.w	r1, r9, r1
 8009e7a:	d120      	bne.n	8009ebe <_dtoa_r+0xad6>
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	ddec      	ble.n	8009e5a <_dtoa_r+0xa72>
 8009e80:	4659      	mov	r1, fp
 8009e82:	2201      	movs	r2, #1
 8009e84:	4620      	mov	r0, r4
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	f000 fac6 	bl	800a418 <__lshift>
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4683      	mov	fp, r0
 8009e90:	f000 fb2e 	bl	800a4f0 <__mcmp>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	dc02      	bgt.n	8009ea0 <_dtoa_r+0xab8>
 8009e9a:	d1de      	bne.n	8009e5a <_dtoa_r+0xa72>
 8009e9c:	07da      	lsls	r2, r3, #31
 8009e9e:	d5dc      	bpl.n	8009e5a <_dtoa_r+0xa72>
 8009ea0:	2b39      	cmp	r3, #57	; 0x39
 8009ea2:	d1d8      	bne.n	8009e56 <_dtoa_r+0xa6e>
 8009ea4:	9a02      	ldr	r2, [sp, #8]
 8009ea6:	2339      	movs	r3, #57	; 0x39
 8009ea8:	7013      	strb	r3, [r2, #0]
 8009eaa:	462b      	mov	r3, r5
 8009eac:	461d      	mov	r5, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009eb4:	2a39      	cmp	r2, #57	; 0x39
 8009eb6:	d050      	beq.n	8009f5a <_dtoa_r+0xb72>
 8009eb8:	3201      	adds	r2, #1
 8009eba:	701a      	strb	r2, [r3, #0]
 8009ebc:	e745      	b.n	8009d4a <_dtoa_r+0x962>
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	dd03      	ble.n	8009eca <_dtoa_r+0xae2>
 8009ec2:	2b39      	cmp	r3, #57	; 0x39
 8009ec4:	d0ee      	beq.n	8009ea4 <_dtoa_r+0xabc>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	e7c7      	b.n	8009e5a <_dtoa_r+0xa72>
 8009eca:	9a01      	ldr	r2, [sp, #4]
 8009ecc:	9907      	ldr	r1, [sp, #28]
 8009ece:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ed2:	428a      	cmp	r2, r1
 8009ed4:	d02a      	beq.n	8009f2c <_dtoa_r+0xb44>
 8009ed6:	4659      	mov	r1, fp
 8009ed8:	2300      	movs	r3, #0
 8009eda:	220a      	movs	r2, #10
 8009edc:	4620      	mov	r0, r4
 8009ede:	f000 f8eb 	bl	800a0b8 <__multadd>
 8009ee2:	45b8      	cmp	r8, r7
 8009ee4:	4683      	mov	fp, r0
 8009ee6:	f04f 0300 	mov.w	r3, #0
 8009eea:	f04f 020a 	mov.w	r2, #10
 8009eee:	4641      	mov	r1, r8
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	d107      	bne.n	8009f04 <_dtoa_r+0xb1c>
 8009ef4:	f000 f8e0 	bl	800a0b8 <__multadd>
 8009ef8:	4680      	mov	r8, r0
 8009efa:	4607      	mov	r7, r0
 8009efc:	9b01      	ldr	r3, [sp, #4]
 8009efe:	3301      	adds	r3, #1
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	e775      	b.n	8009df0 <_dtoa_r+0xa08>
 8009f04:	f000 f8d8 	bl	800a0b8 <__multadd>
 8009f08:	4639      	mov	r1, r7
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	220a      	movs	r2, #10
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 f8d1 	bl	800a0b8 <__multadd>
 8009f16:	4607      	mov	r7, r0
 8009f18:	e7f0      	b.n	8009efc <_dtoa_r+0xb14>
 8009f1a:	f1b9 0f00 	cmp.w	r9, #0
 8009f1e:	9a00      	ldr	r2, [sp, #0]
 8009f20:	bfcc      	ite	gt
 8009f22:	464d      	movgt	r5, r9
 8009f24:	2501      	movle	r5, #1
 8009f26:	4415      	add	r5, r2
 8009f28:	f04f 0800 	mov.w	r8, #0
 8009f2c:	4659      	mov	r1, fp
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4620      	mov	r0, r4
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	f000 fa70 	bl	800a418 <__lshift>
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4683      	mov	fp, r0
 8009f3c:	f000 fad8 	bl	800a4f0 <__mcmp>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	dcb2      	bgt.n	8009eaa <_dtoa_r+0xac2>
 8009f44:	d102      	bne.n	8009f4c <_dtoa_r+0xb64>
 8009f46:	9b01      	ldr	r3, [sp, #4]
 8009f48:	07db      	lsls	r3, r3, #31
 8009f4a:	d4ae      	bmi.n	8009eaa <_dtoa_r+0xac2>
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	461d      	mov	r5, r3
 8009f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f54:	2a30      	cmp	r2, #48	; 0x30
 8009f56:	d0fa      	beq.n	8009f4e <_dtoa_r+0xb66>
 8009f58:	e6f7      	b.n	8009d4a <_dtoa_r+0x962>
 8009f5a:	9a00      	ldr	r2, [sp, #0]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d1a5      	bne.n	8009eac <_dtoa_r+0xac4>
 8009f60:	f10a 0a01 	add.w	sl, sl, #1
 8009f64:	2331      	movs	r3, #49	; 0x31
 8009f66:	e779      	b.n	8009e5c <_dtoa_r+0xa74>
 8009f68:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <_dtoa_r+0xbd0>)
 8009f6a:	f7ff baaf 	b.w	80094cc <_dtoa_r+0xe4>
 8009f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f47f aa86 	bne.w	8009482 <_dtoa_r+0x9a>
 8009f76:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <_dtoa_r+0xbd4>)
 8009f78:	f7ff baa8 	b.w	80094cc <_dtoa_r+0xe4>
 8009f7c:	f1b9 0f00 	cmp.w	r9, #0
 8009f80:	dc03      	bgt.n	8009f8a <_dtoa_r+0xba2>
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	f73f aec9 	bgt.w	8009d1c <_dtoa_r+0x934>
 8009f8a:	9d00      	ldr	r5, [sp, #0]
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4658      	mov	r0, fp
 8009f90:	f7ff f99e 	bl	80092d0 <quorem>
 8009f94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f98:	f805 3b01 	strb.w	r3, [r5], #1
 8009f9c:	9a00      	ldr	r2, [sp, #0]
 8009f9e:	1aaa      	subs	r2, r5, r2
 8009fa0:	4591      	cmp	r9, r2
 8009fa2:	ddba      	ble.n	8009f1a <_dtoa_r+0xb32>
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	220a      	movs	r2, #10
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f884 	bl	800a0b8 <__multadd>
 8009fb0:	4683      	mov	fp, r0
 8009fb2:	e7eb      	b.n	8009f8c <_dtoa_r+0xba4>
 8009fb4:	0800e063 	.word	0x0800e063
 8009fb8:	0800dfbc 	.word	0x0800dfbc
 8009fbc:	0800dfe0 	.word	0x0800dfe0

08009fc0 <_localeconv_r>:
 8009fc0:	4800      	ldr	r0, [pc, #0]	; (8009fc4 <_localeconv_r+0x4>)
 8009fc2:	4770      	bx	lr
 8009fc4:	20000214 	.word	0x20000214

08009fc8 <malloc>:
 8009fc8:	4b02      	ldr	r3, [pc, #8]	; (8009fd4 <malloc+0xc>)
 8009fca:	4601      	mov	r1, r0
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	f000 bbef 	b.w	800a7b0 <_malloc_r>
 8009fd2:	bf00      	nop
 8009fd4:	200000c0 	.word	0x200000c0

08009fd8 <memcpy>:
 8009fd8:	440a      	add	r2, r1
 8009fda:	4291      	cmp	r1, r2
 8009fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fe0:	d100      	bne.n	8009fe4 <memcpy+0xc>
 8009fe2:	4770      	bx	lr
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fee:	4291      	cmp	r1, r2
 8009ff0:	d1f9      	bne.n	8009fe6 <memcpy+0xe>
 8009ff2:	bd10      	pop	{r4, pc}

08009ff4 <_Balloc>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	b976      	cbnz	r6, 800a01c <_Balloc+0x28>
 8009ffe:	2010      	movs	r0, #16
 800a000:	f7ff ffe2 	bl	8009fc8 <malloc>
 800a004:	4602      	mov	r2, r0
 800a006:	6260      	str	r0, [r4, #36]	; 0x24
 800a008:	b920      	cbnz	r0, 800a014 <_Balloc+0x20>
 800a00a:	4b18      	ldr	r3, [pc, #96]	; (800a06c <_Balloc+0x78>)
 800a00c:	4818      	ldr	r0, [pc, #96]	; (800a070 <_Balloc+0x7c>)
 800a00e:	2166      	movs	r1, #102	; 0x66
 800a010:	f000 fc38 	bl	800a884 <__assert_func>
 800a014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a018:	6006      	str	r6, [r0, #0]
 800a01a:	60c6      	str	r6, [r0, #12]
 800a01c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a01e:	68f3      	ldr	r3, [r6, #12]
 800a020:	b183      	cbz	r3, 800a044 <_Balloc+0x50>
 800a022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a02a:	b9b8      	cbnz	r0, 800a05c <_Balloc+0x68>
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f605 	lsl.w	r6, r1, r5
 800a032:	1d72      	adds	r2, r6, #5
 800a034:	0092      	lsls	r2, r2, #2
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fb5a 	bl	800a6f0 <_calloc_r>
 800a03c:	b160      	cbz	r0, 800a058 <_Balloc+0x64>
 800a03e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a042:	e00e      	b.n	800a062 <_Balloc+0x6e>
 800a044:	2221      	movs	r2, #33	; 0x21
 800a046:	2104      	movs	r1, #4
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fb51 	bl	800a6f0 <_calloc_r>
 800a04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a050:	60f0      	str	r0, [r6, #12]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e4      	bne.n	800a022 <_Balloc+0x2e>
 800a058:	2000      	movs	r0, #0
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	6802      	ldr	r2, [r0, #0]
 800a05e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a062:	2300      	movs	r3, #0
 800a064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a068:	e7f7      	b.n	800a05a <_Balloc+0x66>
 800a06a:	bf00      	nop
 800a06c:	0800dfed 	.word	0x0800dfed
 800a070:	0800e074 	.word	0x0800e074

0800a074 <_Bfree>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a078:	4605      	mov	r5, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	b976      	cbnz	r6, 800a09c <_Bfree+0x28>
 800a07e:	2010      	movs	r0, #16
 800a080:	f7ff ffa2 	bl	8009fc8 <malloc>
 800a084:	4602      	mov	r2, r0
 800a086:	6268      	str	r0, [r5, #36]	; 0x24
 800a088:	b920      	cbnz	r0, 800a094 <_Bfree+0x20>
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <_Bfree+0x3c>)
 800a08c:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <_Bfree+0x40>)
 800a08e:	218a      	movs	r1, #138	; 0x8a
 800a090:	f000 fbf8 	bl	800a884 <__assert_func>
 800a094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a098:	6006      	str	r6, [r0, #0]
 800a09a:	60c6      	str	r6, [r0, #12]
 800a09c:	b13c      	cbz	r4, 800a0ae <_Bfree+0x3a>
 800a09e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0a0:	6862      	ldr	r2, [r4, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0a8:	6021      	str	r1, [r4, #0]
 800a0aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	0800dfed 	.word	0x0800dfed
 800a0b4:	0800e074 	.word	0x0800e074

0800a0b8 <__multadd>:
 800a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0bc:	690e      	ldr	r6, [r1, #16]
 800a0be:	4607      	mov	r7, r0
 800a0c0:	4698      	mov	r8, r3
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	f101 0014 	add.w	r0, r1, #20
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	6805      	ldr	r5, [r0, #0]
 800a0cc:	b2a9      	uxth	r1, r5
 800a0ce:	fb02 8101 	mla	r1, r2, r1, r8
 800a0d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a0d6:	0c2d      	lsrs	r5, r5, #16
 800a0d8:	fb02 c505 	mla	r5, r2, r5, ip
 800a0dc:	b289      	uxth	r1, r1
 800a0de:	3301      	adds	r3, #1
 800a0e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a0e4:	429e      	cmp	r6, r3
 800a0e6:	f840 1b04 	str.w	r1, [r0], #4
 800a0ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a0ee:	dcec      	bgt.n	800a0ca <__multadd+0x12>
 800a0f0:	f1b8 0f00 	cmp.w	r8, #0
 800a0f4:	d022      	beq.n	800a13c <__multadd+0x84>
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	42b3      	cmp	r3, r6
 800a0fa:	dc19      	bgt.n	800a130 <__multadd+0x78>
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	4638      	mov	r0, r7
 800a100:	3101      	adds	r1, #1
 800a102:	f7ff ff77 	bl	8009ff4 <_Balloc>
 800a106:	4605      	mov	r5, r0
 800a108:	b928      	cbnz	r0, 800a116 <__multadd+0x5e>
 800a10a:	4602      	mov	r2, r0
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <__multadd+0x8c>)
 800a10e:	480e      	ldr	r0, [pc, #56]	; (800a148 <__multadd+0x90>)
 800a110:	21b5      	movs	r1, #181	; 0xb5
 800a112:	f000 fbb7 	bl	800a884 <__assert_func>
 800a116:	6922      	ldr	r2, [r4, #16]
 800a118:	3202      	adds	r2, #2
 800a11a:	f104 010c 	add.w	r1, r4, #12
 800a11e:	0092      	lsls	r2, r2, #2
 800a120:	300c      	adds	r0, #12
 800a122:	f7ff ff59 	bl	8009fd8 <memcpy>
 800a126:	4621      	mov	r1, r4
 800a128:	4638      	mov	r0, r7
 800a12a:	f7ff ffa3 	bl	800a074 <_Bfree>
 800a12e:	462c      	mov	r4, r5
 800a130:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a134:	3601      	adds	r6, #1
 800a136:	f8c3 8014 	str.w	r8, [r3, #20]
 800a13a:	6126      	str	r6, [r4, #16]
 800a13c:	4620      	mov	r0, r4
 800a13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a142:	bf00      	nop
 800a144:	0800e063 	.word	0x0800e063
 800a148:	0800e074 	.word	0x0800e074

0800a14c <__hi0bits>:
 800a14c:	0c03      	lsrs	r3, r0, #16
 800a14e:	041b      	lsls	r3, r3, #16
 800a150:	b9d3      	cbnz	r3, 800a188 <__hi0bits+0x3c>
 800a152:	0400      	lsls	r0, r0, #16
 800a154:	2310      	movs	r3, #16
 800a156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a15a:	bf04      	itt	eq
 800a15c:	0200      	lsleq	r0, r0, #8
 800a15e:	3308      	addeq	r3, #8
 800a160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a164:	bf04      	itt	eq
 800a166:	0100      	lsleq	r0, r0, #4
 800a168:	3304      	addeq	r3, #4
 800a16a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a16e:	bf04      	itt	eq
 800a170:	0080      	lsleq	r0, r0, #2
 800a172:	3302      	addeq	r3, #2
 800a174:	2800      	cmp	r0, #0
 800a176:	db05      	blt.n	800a184 <__hi0bits+0x38>
 800a178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a17c:	f103 0301 	add.w	r3, r3, #1
 800a180:	bf08      	it	eq
 800a182:	2320      	moveq	r3, #32
 800a184:	4618      	mov	r0, r3
 800a186:	4770      	bx	lr
 800a188:	2300      	movs	r3, #0
 800a18a:	e7e4      	b.n	800a156 <__hi0bits+0xa>

0800a18c <__lo0bits>:
 800a18c:	6803      	ldr	r3, [r0, #0]
 800a18e:	f013 0207 	ands.w	r2, r3, #7
 800a192:	4601      	mov	r1, r0
 800a194:	d00b      	beq.n	800a1ae <__lo0bits+0x22>
 800a196:	07da      	lsls	r2, r3, #31
 800a198:	d424      	bmi.n	800a1e4 <__lo0bits+0x58>
 800a19a:	0798      	lsls	r0, r3, #30
 800a19c:	bf49      	itett	mi
 800a19e:	085b      	lsrmi	r3, r3, #1
 800a1a0:	089b      	lsrpl	r3, r3, #2
 800a1a2:	2001      	movmi	r0, #1
 800a1a4:	600b      	strmi	r3, [r1, #0]
 800a1a6:	bf5c      	itt	pl
 800a1a8:	600b      	strpl	r3, [r1, #0]
 800a1aa:	2002      	movpl	r0, #2
 800a1ac:	4770      	bx	lr
 800a1ae:	b298      	uxth	r0, r3
 800a1b0:	b9b0      	cbnz	r0, 800a1e0 <__lo0bits+0x54>
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	2010      	movs	r0, #16
 800a1b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1ba:	bf04      	itt	eq
 800a1bc:	0a1b      	lsreq	r3, r3, #8
 800a1be:	3008      	addeq	r0, #8
 800a1c0:	071a      	lsls	r2, r3, #28
 800a1c2:	bf04      	itt	eq
 800a1c4:	091b      	lsreq	r3, r3, #4
 800a1c6:	3004      	addeq	r0, #4
 800a1c8:	079a      	lsls	r2, r3, #30
 800a1ca:	bf04      	itt	eq
 800a1cc:	089b      	lsreq	r3, r3, #2
 800a1ce:	3002      	addeq	r0, #2
 800a1d0:	07da      	lsls	r2, r3, #31
 800a1d2:	d403      	bmi.n	800a1dc <__lo0bits+0x50>
 800a1d4:	085b      	lsrs	r3, r3, #1
 800a1d6:	f100 0001 	add.w	r0, r0, #1
 800a1da:	d005      	beq.n	800a1e8 <__lo0bits+0x5c>
 800a1dc:	600b      	str	r3, [r1, #0]
 800a1de:	4770      	bx	lr
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	e7e8      	b.n	800a1b6 <__lo0bits+0x2a>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	4770      	bx	lr
 800a1e8:	2020      	movs	r0, #32
 800a1ea:	4770      	bx	lr

0800a1ec <__i2b>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	f7ff feff 	bl	8009ff4 <_Balloc>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__i2b+0x1a>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <__i2b+0x24>)
 800a1fc:	4805      	ldr	r0, [pc, #20]	; (800a214 <__i2b+0x28>)
 800a1fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a202:	f000 fb3f 	bl	800a884 <__assert_func>
 800a206:	2301      	movs	r3, #1
 800a208:	6144      	str	r4, [r0, #20]
 800a20a:	6103      	str	r3, [r0, #16]
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	0800e063 	.word	0x0800e063
 800a214:	0800e074 	.word	0x0800e074

0800a218 <__multiply>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	4614      	mov	r4, r2
 800a21e:	690a      	ldr	r2, [r1, #16]
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	429a      	cmp	r2, r3
 800a224:	bfb8      	it	lt
 800a226:	460b      	movlt	r3, r1
 800a228:	460d      	mov	r5, r1
 800a22a:	bfbc      	itt	lt
 800a22c:	4625      	movlt	r5, r4
 800a22e:	461c      	movlt	r4, r3
 800a230:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a234:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a238:	68ab      	ldr	r3, [r5, #8]
 800a23a:	6869      	ldr	r1, [r5, #4]
 800a23c:	eb0a 0709 	add.w	r7, sl, r9
 800a240:	42bb      	cmp	r3, r7
 800a242:	b085      	sub	sp, #20
 800a244:	bfb8      	it	lt
 800a246:	3101      	addlt	r1, #1
 800a248:	f7ff fed4 	bl	8009ff4 <_Balloc>
 800a24c:	b930      	cbnz	r0, 800a25c <__multiply+0x44>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b42      	ldr	r3, [pc, #264]	; (800a35c <__multiply+0x144>)
 800a252:	4843      	ldr	r0, [pc, #268]	; (800a360 <__multiply+0x148>)
 800a254:	f240 115d 	movw	r1, #349	; 0x15d
 800a258:	f000 fb14 	bl	800a884 <__assert_func>
 800a25c:	f100 0614 	add.w	r6, r0, #20
 800a260:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a264:	4633      	mov	r3, r6
 800a266:	2200      	movs	r2, #0
 800a268:	4543      	cmp	r3, r8
 800a26a:	d31e      	bcc.n	800a2aa <__multiply+0x92>
 800a26c:	f105 0c14 	add.w	ip, r5, #20
 800a270:	f104 0314 	add.w	r3, r4, #20
 800a274:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a278:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a27c:	9202      	str	r2, [sp, #8]
 800a27e:	ebac 0205 	sub.w	r2, ip, r5
 800a282:	3a15      	subs	r2, #21
 800a284:	f022 0203 	bic.w	r2, r2, #3
 800a288:	3204      	adds	r2, #4
 800a28a:	f105 0115 	add.w	r1, r5, #21
 800a28e:	458c      	cmp	ip, r1
 800a290:	bf38      	it	cc
 800a292:	2204      	movcc	r2, #4
 800a294:	9201      	str	r2, [sp, #4]
 800a296:	9a02      	ldr	r2, [sp, #8]
 800a298:	9303      	str	r3, [sp, #12]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d808      	bhi.n	800a2b0 <__multiply+0x98>
 800a29e:	2f00      	cmp	r7, #0
 800a2a0:	dc55      	bgt.n	800a34e <__multiply+0x136>
 800a2a2:	6107      	str	r7, [r0, #16]
 800a2a4:	b005      	add	sp, #20
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	f843 2b04 	str.w	r2, [r3], #4
 800a2ae:	e7db      	b.n	800a268 <__multiply+0x50>
 800a2b0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2b4:	f1ba 0f00 	cmp.w	sl, #0
 800a2b8:	d020      	beq.n	800a2fc <__multiply+0xe4>
 800a2ba:	f105 0e14 	add.w	lr, r5, #20
 800a2be:	46b1      	mov	r9, r6
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a2c6:	f8d9 b000 	ldr.w	fp, [r9]
 800a2ca:	b2a1      	uxth	r1, r4
 800a2cc:	fa1f fb8b 	uxth.w	fp, fp
 800a2d0:	fb0a b101 	mla	r1, sl, r1, fp
 800a2d4:	4411      	add	r1, r2
 800a2d6:	f8d9 2000 	ldr.w	r2, [r9]
 800a2da:	0c24      	lsrs	r4, r4, #16
 800a2dc:	0c12      	lsrs	r2, r2, #16
 800a2de:	fb0a 2404 	mla	r4, sl, r4, r2
 800a2e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a2e6:	b289      	uxth	r1, r1
 800a2e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2ec:	45f4      	cmp	ip, lr
 800a2ee:	f849 1b04 	str.w	r1, [r9], #4
 800a2f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a2f6:	d8e4      	bhi.n	800a2c2 <__multiply+0xaa>
 800a2f8:	9901      	ldr	r1, [sp, #4]
 800a2fa:	5072      	str	r2, [r6, r1]
 800a2fc:	9a03      	ldr	r2, [sp, #12]
 800a2fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a302:	3304      	adds	r3, #4
 800a304:	f1b9 0f00 	cmp.w	r9, #0
 800a308:	d01f      	beq.n	800a34a <__multiply+0x132>
 800a30a:	6834      	ldr	r4, [r6, #0]
 800a30c:	f105 0114 	add.w	r1, r5, #20
 800a310:	46b6      	mov	lr, r6
 800a312:	f04f 0a00 	mov.w	sl, #0
 800a316:	880a      	ldrh	r2, [r1, #0]
 800a318:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a31c:	fb09 b202 	mla	r2, r9, r2, fp
 800a320:	4492      	add	sl, r2
 800a322:	b2a4      	uxth	r4, r4
 800a324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a328:	f84e 4b04 	str.w	r4, [lr], #4
 800a32c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a330:	f8be 2000 	ldrh.w	r2, [lr]
 800a334:	0c24      	lsrs	r4, r4, #16
 800a336:	fb09 2404 	mla	r4, r9, r4, r2
 800a33a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a33e:	458c      	cmp	ip, r1
 800a340:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a344:	d8e7      	bhi.n	800a316 <__multiply+0xfe>
 800a346:	9a01      	ldr	r2, [sp, #4]
 800a348:	50b4      	str	r4, [r6, r2]
 800a34a:	3604      	adds	r6, #4
 800a34c:	e7a3      	b.n	800a296 <__multiply+0x7e>
 800a34e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1a5      	bne.n	800a2a2 <__multiply+0x8a>
 800a356:	3f01      	subs	r7, #1
 800a358:	e7a1      	b.n	800a29e <__multiply+0x86>
 800a35a:	bf00      	nop
 800a35c:	0800e063 	.word	0x0800e063
 800a360:	0800e074 	.word	0x0800e074

0800a364 <__pow5mult>:
 800a364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a368:	4615      	mov	r5, r2
 800a36a:	f012 0203 	ands.w	r2, r2, #3
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	d007      	beq.n	800a384 <__pow5mult+0x20>
 800a374:	4c25      	ldr	r4, [pc, #148]	; (800a40c <__pow5mult+0xa8>)
 800a376:	3a01      	subs	r2, #1
 800a378:	2300      	movs	r3, #0
 800a37a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a37e:	f7ff fe9b 	bl	800a0b8 <__multadd>
 800a382:	4607      	mov	r7, r0
 800a384:	10ad      	asrs	r5, r5, #2
 800a386:	d03d      	beq.n	800a404 <__pow5mult+0xa0>
 800a388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a38a:	b97c      	cbnz	r4, 800a3ac <__pow5mult+0x48>
 800a38c:	2010      	movs	r0, #16
 800a38e:	f7ff fe1b 	bl	8009fc8 <malloc>
 800a392:	4602      	mov	r2, r0
 800a394:	6270      	str	r0, [r6, #36]	; 0x24
 800a396:	b928      	cbnz	r0, 800a3a4 <__pow5mult+0x40>
 800a398:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <__pow5mult+0xac>)
 800a39a:	481e      	ldr	r0, [pc, #120]	; (800a414 <__pow5mult+0xb0>)
 800a39c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3a0:	f000 fa70 	bl	800a884 <__assert_func>
 800a3a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3a8:	6004      	str	r4, [r0, #0]
 800a3aa:	60c4      	str	r4, [r0, #12]
 800a3ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3b4:	b94c      	cbnz	r4, 800a3ca <__pow5mult+0x66>
 800a3b6:	f240 2171 	movw	r1, #625	; 0x271
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff ff16 	bl	800a1ec <__i2b>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	f04f 0900 	mov.w	r9, #0
 800a3ce:	07eb      	lsls	r3, r5, #31
 800a3d0:	d50a      	bpl.n	800a3e8 <__pow5mult+0x84>
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ff1e 	bl	800a218 <__multiply>
 800a3dc:	4639      	mov	r1, r7
 800a3de:	4680      	mov	r8, r0
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7ff fe47 	bl	800a074 <_Bfree>
 800a3e6:	4647      	mov	r7, r8
 800a3e8:	106d      	asrs	r5, r5, #1
 800a3ea:	d00b      	beq.n	800a404 <__pow5mult+0xa0>
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	b938      	cbnz	r0, 800a400 <__pow5mult+0x9c>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff ff0f 	bl	800a218 <__multiply>
 800a3fa:	6020      	str	r0, [r4, #0]
 800a3fc:	f8c0 9000 	str.w	r9, [r0]
 800a400:	4604      	mov	r4, r0
 800a402:	e7e4      	b.n	800a3ce <__pow5mult+0x6a>
 800a404:	4638      	mov	r0, r7
 800a406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40a:	bf00      	nop
 800a40c:	0800e1c8 	.word	0x0800e1c8
 800a410:	0800dfed 	.word	0x0800dfed
 800a414:	0800e074 	.word	0x0800e074

0800a418 <__lshift>:
 800a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	460c      	mov	r4, r1
 800a41e:	6849      	ldr	r1, [r1, #4]
 800a420:	6923      	ldr	r3, [r4, #16]
 800a422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	4607      	mov	r7, r0
 800a42a:	4691      	mov	r9, r2
 800a42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a430:	f108 0601 	add.w	r6, r8, #1
 800a434:	42b3      	cmp	r3, r6
 800a436:	db0b      	blt.n	800a450 <__lshift+0x38>
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff fddb 	bl	8009ff4 <_Balloc>
 800a43e:	4605      	mov	r5, r0
 800a440:	b948      	cbnz	r0, 800a456 <__lshift+0x3e>
 800a442:	4602      	mov	r2, r0
 800a444:	4b28      	ldr	r3, [pc, #160]	; (800a4e8 <__lshift+0xd0>)
 800a446:	4829      	ldr	r0, [pc, #164]	; (800a4ec <__lshift+0xd4>)
 800a448:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a44c:	f000 fa1a 	bl	800a884 <__assert_func>
 800a450:	3101      	adds	r1, #1
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	e7ee      	b.n	800a434 <__lshift+0x1c>
 800a456:	2300      	movs	r3, #0
 800a458:	f100 0114 	add.w	r1, r0, #20
 800a45c:	f100 0210 	add.w	r2, r0, #16
 800a460:	4618      	mov	r0, r3
 800a462:	4553      	cmp	r3, sl
 800a464:	db33      	blt.n	800a4ce <__lshift+0xb6>
 800a466:	6920      	ldr	r0, [r4, #16]
 800a468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a46c:	f104 0314 	add.w	r3, r4, #20
 800a470:	f019 091f 	ands.w	r9, r9, #31
 800a474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a478:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a47c:	d02b      	beq.n	800a4d6 <__lshift+0xbe>
 800a47e:	f1c9 0e20 	rsb	lr, r9, #32
 800a482:	468a      	mov	sl, r1
 800a484:	2200      	movs	r2, #0
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	fa00 f009 	lsl.w	r0, r0, r9
 800a48c:	4302      	orrs	r2, r0
 800a48e:	f84a 2b04 	str.w	r2, [sl], #4
 800a492:	f853 2b04 	ldr.w	r2, [r3], #4
 800a496:	459c      	cmp	ip, r3
 800a498:	fa22 f20e 	lsr.w	r2, r2, lr
 800a49c:	d8f3      	bhi.n	800a486 <__lshift+0x6e>
 800a49e:	ebac 0304 	sub.w	r3, ip, r4
 800a4a2:	3b15      	subs	r3, #21
 800a4a4:	f023 0303 	bic.w	r3, r3, #3
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	f104 0015 	add.w	r0, r4, #21
 800a4ae:	4584      	cmp	ip, r0
 800a4b0:	bf38      	it	cc
 800a4b2:	2304      	movcc	r3, #4
 800a4b4:	50ca      	str	r2, [r1, r3]
 800a4b6:	b10a      	cbz	r2, 800a4bc <__lshift+0xa4>
 800a4b8:	f108 0602 	add.w	r6, r8, #2
 800a4bc:	3e01      	subs	r6, #1
 800a4be:	4638      	mov	r0, r7
 800a4c0:	612e      	str	r6, [r5, #16]
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	f7ff fdd6 	bl	800a074 <_Bfree>
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	e7c5      	b.n	800a462 <__lshift+0x4a>
 800a4d6:	3904      	subs	r1, #4
 800a4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4e0:	459c      	cmp	ip, r3
 800a4e2:	d8f9      	bhi.n	800a4d8 <__lshift+0xc0>
 800a4e4:	e7ea      	b.n	800a4bc <__lshift+0xa4>
 800a4e6:	bf00      	nop
 800a4e8:	0800e063 	.word	0x0800e063
 800a4ec:	0800e074 	.word	0x0800e074

0800a4f0 <__mcmp>:
 800a4f0:	b530      	push	{r4, r5, lr}
 800a4f2:	6902      	ldr	r2, [r0, #16]
 800a4f4:	690c      	ldr	r4, [r1, #16]
 800a4f6:	1b12      	subs	r2, r2, r4
 800a4f8:	d10e      	bne.n	800a518 <__mcmp+0x28>
 800a4fa:	f100 0314 	add.w	r3, r0, #20
 800a4fe:	3114      	adds	r1, #20
 800a500:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a504:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a508:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a50c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a510:	42a5      	cmp	r5, r4
 800a512:	d003      	beq.n	800a51c <__mcmp+0x2c>
 800a514:	d305      	bcc.n	800a522 <__mcmp+0x32>
 800a516:	2201      	movs	r2, #1
 800a518:	4610      	mov	r0, r2
 800a51a:	bd30      	pop	{r4, r5, pc}
 800a51c:	4283      	cmp	r3, r0
 800a51e:	d3f3      	bcc.n	800a508 <__mcmp+0x18>
 800a520:	e7fa      	b.n	800a518 <__mcmp+0x28>
 800a522:	f04f 32ff 	mov.w	r2, #4294967295
 800a526:	e7f7      	b.n	800a518 <__mcmp+0x28>

0800a528 <__mdiff>:
 800a528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	4606      	mov	r6, r0
 800a530:	4611      	mov	r1, r2
 800a532:	4620      	mov	r0, r4
 800a534:	4617      	mov	r7, r2
 800a536:	f7ff ffdb 	bl	800a4f0 <__mcmp>
 800a53a:	1e05      	subs	r5, r0, #0
 800a53c:	d110      	bne.n	800a560 <__mdiff+0x38>
 800a53e:	4629      	mov	r1, r5
 800a540:	4630      	mov	r0, r6
 800a542:	f7ff fd57 	bl	8009ff4 <_Balloc>
 800a546:	b930      	cbnz	r0, 800a556 <__mdiff+0x2e>
 800a548:	4b39      	ldr	r3, [pc, #228]	; (800a630 <__mdiff+0x108>)
 800a54a:	4602      	mov	r2, r0
 800a54c:	f240 2132 	movw	r1, #562	; 0x232
 800a550:	4838      	ldr	r0, [pc, #224]	; (800a634 <__mdiff+0x10c>)
 800a552:	f000 f997 	bl	800a884 <__assert_func>
 800a556:	2301      	movs	r3, #1
 800a558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a560:	bfa4      	itt	ge
 800a562:	463b      	movge	r3, r7
 800a564:	4627      	movge	r7, r4
 800a566:	4630      	mov	r0, r6
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	bfa6      	itte	ge
 800a56c:	461c      	movge	r4, r3
 800a56e:	2500      	movge	r5, #0
 800a570:	2501      	movlt	r5, #1
 800a572:	f7ff fd3f 	bl	8009ff4 <_Balloc>
 800a576:	b920      	cbnz	r0, 800a582 <__mdiff+0x5a>
 800a578:	4b2d      	ldr	r3, [pc, #180]	; (800a630 <__mdiff+0x108>)
 800a57a:	4602      	mov	r2, r0
 800a57c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a580:	e7e6      	b.n	800a550 <__mdiff+0x28>
 800a582:	693e      	ldr	r6, [r7, #16]
 800a584:	60c5      	str	r5, [r0, #12]
 800a586:	6925      	ldr	r5, [r4, #16]
 800a588:	f107 0114 	add.w	r1, r7, #20
 800a58c:	f104 0914 	add.w	r9, r4, #20
 800a590:	f100 0e14 	add.w	lr, r0, #20
 800a594:	f107 0210 	add.w	r2, r7, #16
 800a598:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a59c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a5a0:	46f2      	mov	sl, lr
 800a5a2:	2700      	movs	r7, #0
 800a5a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5ac:	fa1f f883 	uxth.w	r8, r3
 800a5b0:	fa17 f78b 	uxtah	r7, r7, fp
 800a5b4:	0c1b      	lsrs	r3, r3, #16
 800a5b6:	eba7 0808 	sub.w	r8, r7, r8
 800a5ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5c2:	fa1f f888 	uxth.w	r8, r8
 800a5c6:	141f      	asrs	r7, r3, #16
 800a5c8:	454d      	cmp	r5, r9
 800a5ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5ce:	f84a 3b04 	str.w	r3, [sl], #4
 800a5d2:	d8e7      	bhi.n	800a5a4 <__mdiff+0x7c>
 800a5d4:	1b2b      	subs	r3, r5, r4
 800a5d6:	3b15      	subs	r3, #21
 800a5d8:	f023 0303 	bic.w	r3, r3, #3
 800a5dc:	3304      	adds	r3, #4
 800a5de:	3415      	adds	r4, #21
 800a5e0:	42a5      	cmp	r5, r4
 800a5e2:	bf38      	it	cc
 800a5e4:	2304      	movcc	r3, #4
 800a5e6:	4419      	add	r1, r3
 800a5e8:	4473      	add	r3, lr
 800a5ea:	469e      	mov	lr, r3
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	4565      	cmp	r5, ip
 800a5f0:	d30e      	bcc.n	800a610 <__mdiff+0xe8>
 800a5f2:	f10c 0203 	add.w	r2, ip, #3
 800a5f6:	1a52      	subs	r2, r2, r1
 800a5f8:	f022 0203 	bic.w	r2, r2, #3
 800a5fc:	3903      	subs	r1, #3
 800a5fe:	458c      	cmp	ip, r1
 800a600:	bf38      	it	cc
 800a602:	2200      	movcc	r2, #0
 800a604:	441a      	add	r2, r3
 800a606:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a60a:	b17b      	cbz	r3, 800a62c <__mdiff+0x104>
 800a60c:	6106      	str	r6, [r0, #16]
 800a60e:	e7a5      	b.n	800a55c <__mdiff+0x34>
 800a610:	f855 8b04 	ldr.w	r8, [r5], #4
 800a614:	fa17 f488 	uxtah	r4, r7, r8
 800a618:	1422      	asrs	r2, r4, #16
 800a61a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a61e:	b2a4      	uxth	r4, r4
 800a620:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a624:	f84e 4b04 	str.w	r4, [lr], #4
 800a628:	1417      	asrs	r7, r2, #16
 800a62a:	e7e0      	b.n	800a5ee <__mdiff+0xc6>
 800a62c:	3e01      	subs	r6, #1
 800a62e:	e7ea      	b.n	800a606 <__mdiff+0xde>
 800a630:	0800e063 	.word	0x0800e063
 800a634:	0800e074 	.word	0x0800e074

0800a638 <__d2b>:
 800a638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4689      	mov	r9, r1
 800a63e:	2101      	movs	r1, #1
 800a640:	ec57 6b10 	vmov	r6, r7, d0
 800a644:	4690      	mov	r8, r2
 800a646:	f7ff fcd5 	bl	8009ff4 <_Balloc>
 800a64a:	4604      	mov	r4, r0
 800a64c:	b930      	cbnz	r0, 800a65c <__d2b+0x24>
 800a64e:	4602      	mov	r2, r0
 800a650:	4b25      	ldr	r3, [pc, #148]	; (800a6e8 <__d2b+0xb0>)
 800a652:	4826      	ldr	r0, [pc, #152]	; (800a6ec <__d2b+0xb4>)
 800a654:	f240 310a 	movw	r1, #778	; 0x30a
 800a658:	f000 f914 	bl	800a884 <__assert_func>
 800a65c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a664:	bb35      	cbnz	r5, 800a6b4 <__d2b+0x7c>
 800a666:	2e00      	cmp	r6, #0
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	d028      	beq.n	800a6be <__d2b+0x86>
 800a66c:	4668      	mov	r0, sp
 800a66e:	9600      	str	r6, [sp, #0]
 800a670:	f7ff fd8c 	bl	800a18c <__lo0bits>
 800a674:	9900      	ldr	r1, [sp, #0]
 800a676:	b300      	cbz	r0, 800a6ba <__d2b+0x82>
 800a678:	9a01      	ldr	r2, [sp, #4]
 800a67a:	f1c0 0320 	rsb	r3, r0, #32
 800a67e:	fa02 f303 	lsl.w	r3, r2, r3
 800a682:	430b      	orrs	r3, r1
 800a684:	40c2      	lsrs	r2, r0
 800a686:	6163      	str	r3, [r4, #20]
 800a688:	9201      	str	r2, [sp, #4]
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	61a3      	str	r3, [r4, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bf14      	ite	ne
 800a692:	2202      	movne	r2, #2
 800a694:	2201      	moveq	r2, #1
 800a696:	6122      	str	r2, [r4, #16]
 800a698:	b1d5      	cbz	r5, 800a6d0 <__d2b+0x98>
 800a69a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a69e:	4405      	add	r5, r0
 800a6a0:	f8c9 5000 	str.w	r5, [r9]
 800a6a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6a8:	f8c8 0000 	str.w	r0, [r8]
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	b003      	add	sp, #12
 800a6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6b8:	e7d5      	b.n	800a666 <__d2b+0x2e>
 800a6ba:	6161      	str	r1, [r4, #20]
 800a6bc:	e7e5      	b.n	800a68a <__d2b+0x52>
 800a6be:	a801      	add	r0, sp, #4
 800a6c0:	f7ff fd64 	bl	800a18c <__lo0bits>
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	6163      	str	r3, [r4, #20]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	6122      	str	r2, [r4, #16]
 800a6cc:	3020      	adds	r0, #32
 800a6ce:	e7e3      	b.n	800a698 <__d2b+0x60>
 800a6d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6d8:	f8c9 0000 	str.w	r0, [r9]
 800a6dc:	6918      	ldr	r0, [r3, #16]
 800a6de:	f7ff fd35 	bl	800a14c <__hi0bits>
 800a6e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6e6:	e7df      	b.n	800a6a8 <__d2b+0x70>
 800a6e8:	0800e063 	.word	0x0800e063
 800a6ec:	0800e074 	.word	0x0800e074

0800a6f0 <_calloc_r>:
 800a6f0:	b513      	push	{r0, r1, r4, lr}
 800a6f2:	434a      	muls	r2, r1
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	9201      	str	r2, [sp, #4]
 800a6f8:	f000 f85a 	bl	800a7b0 <_malloc_r>
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	b118      	cbz	r0, 800a708 <_calloc_r+0x18>
 800a700:	9a01      	ldr	r2, [sp, #4]
 800a702:	2100      	movs	r1, #0
 800a704:	f7fe f972 	bl	80089ec <memset>
 800a708:	4620      	mov	r0, r4
 800a70a:	b002      	add	sp, #8
 800a70c:	bd10      	pop	{r4, pc}
	...

0800a710 <_free_r>:
 800a710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a712:	2900      	cmp	r1, #0
 800a714:	d048      	beq.n	800a7a8 <_free_r+0x98>
 800a716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71a:	9001      	str	r0, [sp, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f1a1 0404 	sub.w	r4, r1, #4
 800a722:	bfb8      	it	lt
 800a724:	18e4      	addlt	r4, r4, r3
 800a726:	f000 f8ef 	bl	800a908 <__malloc_lock>
 800a72a:	4a20      	ldr	r2, [pc, #128]	; (800a7ac <_free_r+0x9c>)
 800a72c:	9801      	ldr	r0, [sp, #4]
 800a72e:	6813      	ldr	r3, [r2, #0]
 800a730:	4615      	mov	r5, r2
 800a732:	b933      	cbnz	r3, 800a742 <_free_r+0x32>
 800a734:	6063      	str	r3, [r4, #4]
 800a736:	6014      	str	r4, [r2, #0]
 800a738:	b003      	add	sp, #12
 800a73a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a73e:	f000 b8e9 	b.w	800a914 <__malloc_unlock>
 800a742:	42a3      	cmp	r3, r4
 800a744:	d90b      	bls.n	800a75e <_free_r+0x4e>
 800a746:	6821      	ldr	r1, [r4, #0]
 800a748:	1862      	adds	r2, r4, r1
 800a74a:	4293      	cmp	r3, r2
 800a74c:	bf04      	itt	eq
 800a74e:	681a      	ldreq	r2, [r3, #0]
 800a750:	685b      	ldreq	r3, [r3, #4]
 800a752:	6063      	str	r3, [r4, #4]
 800a754:	bf04      	itt	eq
 800a756:	1852      	addeq	r2, r2, r1
 800a758:	6022      	streq	r2, [r4, #0]
 800a75a:	602c      	str	r4, [r5, #0]
 800a75c:	e7ec      	b.n	800a738 <_free_r+0x28>
 800a75e:	461a      	mov	r2, r3
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	b10b      	cbz	r3, 800a768 <_free_r+0x58>
 800a764:	42a3      	cmp	r3, r4
 800a766:	d9fa      	bls.n	800a75e <_free_r+0x4e>
 800a768:	6811      	ldr	r1, [r2, #0]
 800a76a:	1855      	adds	r5, r2, r1
 800a76c:	42a5      	cmp	r5, r4
 800a76e:	d10b      	bne.n	800a788 <_free_r+0x78>
 800a770:	6824      	ldr	r4, [r4, #0]
 800a772:	4421      	add	r1, r4
 800a774:	1854      	adds	r4, r2, r1
 800a776:	42a3      	cmp	r3, r4
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	d1dd      	bne.n	800a738 <_free_r+0x28>
 800a77c:	681c      	ldr	r4, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	6053      	str	r3, [r2, #4]
 800a782:	4421      	add	r1, r4
 800a784:	6011      	str	r1, [r2, #0]
 800a786:	e7d7      	b.n	800a738 <_free_r+0x28>
 800a788:	d902      	bls.n	800a790 <_free_r+0x80>
 800a78a:	230c      	movs	r3, #12
 800a78c:	6003      	str	r3, [r0, #0]
 800a78e:	e7d3      	b.n	800a738 <_free_r+0x28>
 800a790:	6825      	ldr	r5, [r4, #0]
 800a792:	1961      	adds	r1, r4, r5
 800a794:	428b      	cmp	r3, r1
 800a796:	bf04      	itt	eq
 800a798:	6819      	ldreq	r1, [r3, #0]
 800a79a:	685b      	ldreq	r3, [r3, #4]
 800a79c:	6063      	str	r3, [r4, #4]
 800a79e:	bf04      	itt	eq
 800a7a0:	1949      	addeq	r1, r1, r5
 800a7a2:	6021      	streq	r1, [r4, #0]
 800a7a4:	6054      	str	r4, [r2, #4]
 800a7a6:	e7c7      	b.n	800a738 <_free_r+0x28>
 800a7a8:	b003      	add	sp, #12
 800a7aa:	bd30      	pop	{r4, r5, pc}
 800a7ac:	20000468 	.word	0x20000468

0800a7b0 <_malloc_r>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	1ccd      	adds	r5, r1, #3
 800a7b4:	f025 0503 	bic.w	r5, r5, #3
 800a7b8:	3508      	adds	r5, #8
 800a7ba:	2d0c      	cmp	r5, #12
 800a7bc:	bf38      	it	cc
 800a7be:	250c      	movcc	r5, #12
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	db01      	blt.n	800a7ca <_malloc_r+0x1a>
 800a7c6:	42a9      	cmp	r1, r5
 800a7c8:	d903      	bls.n	800a7d2 <_malloc_r+0x22>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d2:	f000 f899 	bl	800a908 <__malloc_lock>
 800a7d6:	4921      	ldr	r1, [pc, #132]	; (800a85c <_malloc_r+0xac>)
 800a7d8:	680a      	ldr	r2, [r1, #0]
 800a7da:	4614      	mov	r4, r2
 800a7dc:	b99c      	cbnz	r4, 800a806 <_malloc_r+0x56>
 800a7de:	4f20      	ldr	r7, [pc, #128]	; (800a860 <_malloc_r+0xb0>)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	b923      	cbnz	r3, 800a7ee <_malloc_r+0x3e>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 f83c 	bl	800a864 <_sbrk_r>
 800a7ec:	6038      	str	r0, [r7, #0]
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f000 f837 	bl	800a864 <_sbrk_r>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	d123      	bne.n	800a842 <_malloc_r+0x92>
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	6033      	str	r3, [r6, #0]
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f888 	bl	800a914 <__malloc_unlock>
 800a804:	e7e3      	b.n	800a7ce <_malloc_r+0x1e>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	1b5b      	subs	r3, r3, r5
 800a80a:	d417      	bmi.n	800a83c <_malloc_r+0x8c>
 800a80c:	2b0b      	cmp	r3, #11
 800a80e:	d903      	bls.n	800a818 <_malloc_r+0x68>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	441c      	add	r4, r3
 800a814:	6025      	str	r5, [r4, #0]
 800a816:	e004      	b.n	800a822 <_malloc_r+0x72>
 800a818:	6863      	ldr	r3, [r4, #4]
 800a81a:	42a2      	cmp	r2, r4
 800a81c:	bf0c      	ite	eq
 800a81e:	600b      	streq	r3, [r1, #0]
 800a820:	6053      	strne	r3, [r2, #4]
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f876 	bl	800a914 <__malloc_unlock>
 800a828:	f104 000b 	add.w	r0, r4, #11
 800a82c:	1d23      	adds	r3, r4, #4
 800a82e:	f020 0007 	bic.w	r0, r0, #7
 800a832:	1ac2      	subs	r2, r0, r3
 800a834:	d0cc      	beq.n	800a7d0 <_malloc_r+0x20>
 800a836:	1a1b      	subs	r3, r3, r0
 800a838:	50a3      	str	r3, [r4, r2]
 800a83a:	e7c9      	b.n	800a7d0 <_malloc_r+0x20>
 800a83c:	4622      	mov	r2, r4
 800a83e:	6864      	ldr	r4, [r4, #4]
 800a840:	e7cc      	b.n	800a7dc <_malloc_r+0x2c>
 800a842:	1cc4      	adds	r4, r0, #3
 800a844:	f024 0403 	bic.w	r4, r4, #3
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d0e3      	beq.n	800a814 <_malloc_r+0x64>
 800a84c:	1a21      	subs	r1, r4, r0
 800a84e:	4630      	mov	r0, r6
 800a850:	f000 f808 	bl	800a864 <_sbrk_r>
 800a854:	3001      	adds	r0, #1
 800a856:	d1dd      	bne.n	800a814 <_malloc_r+0x64>
 800a858:	e7cf      	b.n	800a7fa <_malloc_r+0x4a>
 800a85a:	bf00      	nop
 800a85c:	20000468 	.word	0x20000468
 800a860:	2000046c 	.word	0x2000046c

0800a864 <_sbrk_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d06      	ldr	r5, [pc, #24]	; (800a880 <_sbrk_r+0x1c>)
 800a868:	2300      	movs	r3, #0
 800a86a:	4604      	mov	r4, r0
 800a86c:	4608      	mov	r0, r1
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	f7f8 fa48 	bl	8002d04 <_sbrk>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_sbrk_r+0x1a>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_sbrk_r+0x1a>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20000784 	.word	0x20000784

0800a884 <__assert_func>:
 800a884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a886:	4614      	mov	r4, r2
 800a888:	461a      	mov	r2, r3
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <__assert_func+0x2c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4605      	mov	r5, r0
 800a890:	68d8      	ldr	r0, [r3, #12]
 800a892:	b14c      	cbz	r4, 800a8a8 <__assert_func+0x24>
 800a894:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <__assert_func+0x30>)
 800a896:	9100      	str	r1, [sp, #0]
 800a898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a89c:	4906      	ldr	r1, [pc, #24]	; (800a8b8 <__assert_func+0x34>)
 800a89e:	462b      	mov	r3, r5
 800a8a0:	f000 f80e 	bl	800a8c0 <fiprintf>
 800a8a4:	f000 fa64 	bl	800ad70 <abort>
 800a8a8:	4b04      	ldr	r3, [pc, #16]	; (800a8bc <__assert_func+0x38>)
 800a8aa:	461c      	mov	r4, r3
 800a8ac:	e7f3      	b.n	800a896 <__assert_func+0x12>
 800a8ae:	bf00      	nop
 800a8b0:	200000c0 	.word	0x200000c0
 800a8b4:	0800e1d4 	.word	0x0800e1d4
 800a8b8:	0800e1e1 	.word	0x0800e1e1
 800a8bc:	0800e20f 	.word	0x0800e20f

0800a8c0 <fiprintf>:
 800a8c0:	b40e      	push	{r1, r2, r3}
 800a8c2:	b503      	push	{r0, r1, lr}
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	ab03      	add	r3, sp, #12
 800a8c8:	4805      	ldr	r0, [pc, #20]	; (800a8e0 <fiprintf+0x20>)
 800a8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ce:	6800      	ldr	r0, [r0, #0]
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	f000 f84f 	bl	800a974 <_vfiprintf_r>
 800a8d6:	b002      	add	sp, #8
 800a8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8dc:	b003      	add	sp, #12
 800a8de:	4770      	bx	lr
 800a8e0:	200000c0 	.word	0x200000c0

0800a8e4 <__ascii_mbtowc>:
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	b901      	cbnz	r1, 800a8ea <__ascii_mbtowc+0x6>
 800a8e8:	a901      	add	r1, sp, #4
 800a8ea:	b142      	cbz	r2, 800a8fe <__ascii_mbtowc+0x1a>
 800a8ec:	b14b      	cbz	r3, 800a902 <__ascii_mbtowc+0x1e>
 800a8ee:	7813      	ldrb	r3, [r2, #0]
 800a8f0:	600b      	str	r3, [r1, #0]
 800a8f2:	7812      	ldrb	r2, [r2, #0]
 800a8f4:	1e10      	subs	r0, r2, #0
 800a8f6:	bf18      	it	ne
 800a8f8:	2001      	movne	r0, #1
 800a8fa:	b002      	add	sp, #8
 800a8fc:	4770      	bx	lr
 800a8fe:	4610      	mov	r0, r2
 800a900:	e7fb      	b.n	800a8fa <__ascii_mbtowc+0x16>
 800a902:	f06f 0001 	mvn.w	r0, #1
 800a906:	e7f8      	b.n	800a8fa <__ascii_mbtowc+0x16>

0800a908 <__malloc_lock>:
 800a908:	4801      	ldr	r0, [pc, #4]	; (800a910 <__malloc_lock+0x8>)
 800a90a:	f000 bbf1 	b.w	800b0f0 <__retarget_lock_acquire_recursive>
 800a90e:	bf00      	nop
 800a910:	2000078c 	.word	0x2000078c

0800a914 <__malloc_unlock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_unlock+0x8>)
 800a916:	f000 bbec 	b.w	800b0f2 <__retarget_lock_release_recursive>
 800a91a:	bf00      	nop
 800a91c:	2000078c 	.word	0x2000078c

0800a920 <__sfputc_r>:
 800a920:	6893      	ldr	r3, [r2, #8]
 800a922:	3b01      	subs	r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	b410      	push	{r4}
 800a928:	6093      	str	r3, [r2, #8]
 800a92a:	da08      	bge.n	800a93e <__sfputc_r+0x1e>
 800a92c:	6994      	ldr	r4, [r2, #24]
 800a92e:	42a3      	cmp	r3, r4
 800a930:	db01      	blt.n	800a936 <__sfputc_r+0x16>
 800a932:	290a      	cmp	r1, #10
 800a934:	d103      	bne.n	800a93e <__sfputc_r+0x1e>
 800a936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a93a:	f000 b94b 	b.w	800abd4 <__swbuf_r>
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	1c58      	adds	r0, r3, #1
 800a942:	6010      	str	r0, [r2, #0]
 800a944:	7019      	strb	r1, [r3, #0]
 800a946:	4608      	mov	r0, r1
 800a948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <__sfputs_r>:
 800a94e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a950:	4606      	mov	r6, r0
 800a952:	460f      	mov	r7, r1
 800a954:	4614      	mov	r4, r2
 800a956:	18d5      	adds	r5, r2, r3
 800a958:	42ac      	cmp	r4, r5
 800a95a:	d101      	bne.n	800a960 <__sfputs_r+0x12>
 800a95c:	2000      	movs	r0, #0
 800a95e:	e007      	b.n	800a970 <__sfputs_r+0x22>
 800a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a964:	463a      	mov	r2, r7
 800a966:	4630      	mov	r0, r6
 800a968:	f7ff ffda 	bl	800a920 <__sfputc_r>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d1f3      	bne.n	800a958 <__sfputs_r+0xa>
 800a970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a974 <_vfiprintf_r>:
 800a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	460d      	mov	r5, r1
 800a97a:	b09d      	sub	sp, #116	; 0x74
 800a97c:	4614      	mov	r4, r2
 800a97e:	4698      	mov	r8, r3
 800a980:	4606      	mov	r6, r0
 800a982:	b118      	cbz	r0, 800a98c <_vfiprintf_r+0x18>
 800a984:	6983      	ldr	r3, [r0, #24]
 800a986:	b90b      	cbnz	r3, 800a98c <_vfiprintf_r+0x18>
 800a988:	f000 fb14 	bl	800afb4 <__sinit>
 800a98c:	4b89      	ldr	r3, [pc, #548]	; (800abb4 <_vfiprintf_r+0x240>)
 800a98e:	429d      	cmp	r5, r3
 800a990:	d11b      	bne.n	800a9ca <_vfiprintf_r+0x56>
 800a992:	6875      	ldr	r5, [r6, #4]
 800a994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a996:	07d9      	lsls	r1, r3, #31
 800a998:	d405      	bmi.n	800a9a6 <_vfiprintf_r+0x32>
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	059a      	lsls	r2, r3, #22
 800a99e:	d402      	bmi.n	800a9a6 <_vfiprintf_r+0x32>
 800a9a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9a2:	f000 fba5 	bl	800b0f0 <__retarget_lock_acquire_recursive>
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	071b      	lsls	r3, r3, #28
 800a9aa:	d501      	bpl.n	800a9b0 <_vfiprintf_r+0x3c>
 800a9ac:	692b      	ldr	r3, [r5, #16]
 800a9ae:	b9eb      	cbnz	r3, 800a9ec <_vfiprintf_r+0x78>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f000 f96e 	bl	800ac94 <__swsetup_r>
 800a9b8:	b1c0      	cbz	r0, 800a9ec <_vfiprintf_r+0x78>
 800a9ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9bc:	07dc      	lsls	r4, r3, #31
 800a9be:	d50e      	bpl.n	800a9de <_vfiprintf_r+0x6a>
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	b01d      	add	sp, #116	; 0x74
 800a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ca:	4b7b      	ldr	r3, [pc, #492]	; (800abb8 <_vfiprintf_r+0x244>)
 800a9cc:	429d      	cmp	r5, r3
 800a9ce:	d101      	bne.n	800a9d4 <_vfiprintf_r+0x60>
 800a9d0:	68b5      	ldr	r5, [r6, #8]
 800a9d2:	e7df      	b.n	800a994 <_vfiprintf_r+0x20>
 800a9d4:	4b79      	ldr	r3, [pc, #484]	; (800abbc <_vfiprintf_r+0x248>)
 800a9d6:	429d      	cmp	r5, r3
 800a9d8:	bf08      	it	eq
 800a9da:	68f5      	ldreq	r5, [r6, #12]
 800a9dc:	e7da      	b.n	800a994 <_vfiprintf_r+0x20>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	0598      	lsls	r0, r3, #22
 800a9e2:	d4ed      	bmi.n	800a9c0 <_vfiprintf_r+0x4c>
 800a9e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e6:	f000 fb84 	bl	800b0f2 <__retarget_lock_release_recursive>
 800a9ea:	e7e9      	b.n	800a9c0 <_vfiprintf_r+0x4c>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9fa:	2330      	movs	r3, #48	; 0x30
 800a9fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abc0 <_vfiprintf_r+0x24c>
 800aa00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa04:	f04f 0901 	mov.w	r9, #1
 800aa08:	4623      	mov	r3, r4
 800aa0a:	469a      	mov	sl, r3
 800aa0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa10:	b10a      	cbz	r2, 800aa16 <_vfiprintf_r+0xa2>
 800aa12:	2a25      	cmp	r2, #37	; 0x25
 800aa14:	d1f9      	bne.n	800aa0a <_vfiprintf_r+0x96>
 800aa16:	ebba 0b04 	subs.w	fp, sl, r4
 800aa1a:	d00b      	beq.n	800aa34 <_vfiprintf_r+0xc0>
 800aa1c:	465b      	mov	r3, fp
 800aa1e:	4622      	mov	r2, r4
 800aa20:	4629      	mov	r1, r5
 800aa22:	4630      	mov	r0, r6
 800aa24:	f7ff ff93 	bl	800a94e <__sfputs_r>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f000 80aa 	beq.w	800ab82 <_vfiprintf_r+0x20e>
 800aa2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa30:	445a      	add	r2, fp
 800aa32:	9209      	str	r2, [sp, #36]	; 0x24
 800aa34:	f89a 3000 	ldrb.w	r3, [sl]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 80a2 	beq.w	800ab82 <_vfiprintf_r+0x20e>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f04f 32ff 	mov.w	r2, #4294967295
 800aa44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa48:	f10a 0a01 	add.w	sl, sl, #1
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	9307      	str	r3, [sp, #28]
 800aa50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa54:	931a      	str	r3, [sp, #104]	; 0x68
 800aa56:	4654      	mov	r4, sl
 800aa58:	2205      	movs	r2, #5
 800aa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5e:	4858      	ldr	r0, [pc, #352]	; (800abc0 <_vfiprintf_r+0x24c>)
 800aa60:	f7f5 fbce 	bl	8000200 <memchr>
 800aa64:	9a04      	ldr	r2, [sp, #16]
 800aa66:	b9d8      	cbnz	r0, 800aaa0 <_vfiprintf_r+0x12c>
 800aa68:	06d1      	lsls	r1, r2, #27
 800aa6a:	bf44      	itt	mi
 800aa6c:	2320      	movmi	r3, #32
 800aa6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa72:	0713      	lsls	r3, r2, #28
 800aa74:	bf44      	itt	mi
 800aa76:	232b      	movmi	r3, #43	; 0x2b
 800aa78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa7c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa80:	2b2a      	cmp	r3, #42	; 0x2a
 800aa82:	d015      	beq.n	800aab0 <_vfiprintf_r+0x13c>
 800aa84:	9a07      	ldr	r2, [sp, #28]
 800aa86:	4654      	mov	r4, sl
 800aa88:	2000      	movs	r0, #0
 800aa8a:	f04f 0c0a 	mov.w	ip, #10
 800aa8e:	4621      	mov	r1, r4
 800aa90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa94:	3b30      	subs	r3, #48	; 0x30
 800aa96:	2b09      	cmp	r3, #9
 800aa98:	d94e      	bls.n	800ab38 <_vfiprintf_r+0x1c4>
 800aa9a:	b1b0      	cbz	r0, 800aaca <_vfiprintf_r+0x156>
 800aa9c:	9207      	str	r2, [sp, #28]
 800aa9e:	e014      	b.n	800aaca <_vfiprintf_r+0x156>
 800aaa0:	eba0 0308 	sub.w	r3, r0, r8
 800aaa4:	fa09 f303 	lsl.w	r3, r9, r3
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	46a2      	mov	sl, r4
 800aaae:	e7d2      	b.n	800aa56 <_vfiprintf_r+0xe2>
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	1d19      	adds	r1, r3, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	9103      	str	r1, [sp, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	bfbb      	ittet	lt
 800aabc:	425b      	neglt	r3, r3
 800aabe:	f042 0202 	orrlt.w	r2, r2, #2
 800aac2:	9307      	strge	r3, [sp, #28]
 800aac4:	9307      	strlt	r3, [sp, #28]
 800aac6:	bfb8      	it	lt
 800aac8:	9204      	strlt	r2, [sp, #16]
 800aaca:	7823      	ldrb	r3, [r4, #0]
 800aacc:	2b2e      	cmp	r3, #46	; 0x2e
 800aace:	d10c      	bne.n	800aaea <_vfiprintf_r+0x176>
 800aad0:	7863      	ldrb	r3, [r4, #1]
 800aad2:	2b2a      	cmp	r3, #42	; 0x2a
 800aad4:	d135      	bne.n	800ab42 <_vfiprintf_r+0x1ce>
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	1d1a      	adds	r2, r3, #4
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	9203      	str	r2, [sp, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	bfb8      	it	lt
 800aae2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aae6:	3402      	adds	r4, #2
 800aae8:	9305      	str	r3, [sp, #20]
 800aaea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abd0 <_vfiprintf_r+0x25c>
 800aaee:	7821      	ldrb	r1, [r4, #0]
 800aaf0:	2203      	movs	r2, #3
 800aaf2:	4650      	mov	r0, sl
 800aaf4:	f7f5 fb84 	bl	8000200 <memchr>
 800aaf8:	b140      	cbz	r0, 800ab0c <_vfiprintf_r+0x198>
 800aafa:	2340      	movs	r3, #64	; 0x40
 800aafc:	eba0 000a 	sub.w	r0, r0, sl
 800ab00:	fa03 f000 	lsl.w	r0, r3, r0
 800ab04:	9b04      	ldr	r3, [sp, #16]
 800ab06:	4303      	orrs	r3, r0
 800ab08:	3401      	adds	r4, #1
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab10:	482c      	ldr	r0, [pc, #176]	; (800abc4 <_vfiprintf_r+0x250>)
 800ab12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab16:	2206      	movs	r2, #6
 800ab18:	f7f5 fb72 	bl	8000200 <memchr>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d03f      	beq.n	800aba0 <_vfiprintf_r+0x22c>
 800ab20:	4b29      	ldr	r3, [pc, #164]	; (800abc8 <_vfiprintf_r+0x254>)
 800ab22:	bb1b      	cbnz	r3, 800ab6c <_vfiprintf_r+0x1f8>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	3307      	adds	r3, #7
 800ab28:	f023 0307 	bic.w	r3, r3, #7
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	9303      	str	r3, [sp, #12]
 800ab30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab32:	443b      	add	r3, r7
 800ab34:	9309      	str	r3, [sp, #36]	; 0x24
 800ab36:	e767      	b.n	800aa08 <_vfiprintf_r+0x94>
 800ab38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	2001      	movs	r0, #1
 800ab40:	e7a5      	b.n	800aa8e <_vfiprintf_r+0x11a>
 800ab42:	2300      	movs	r3, #0
 800ab44:	3401      	adds	r4, #1
 800ab46:	9305      	str	r3, [sp, #20]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	f04f 0c0a 	mov.w	ip, #10
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab54:	3a30      	subs	r2, #48	; 0x30
 800ab56:	2a09      	cmp	r2, #9
 800ab58:	d903      	bls.n	800ab62 <_vfiprintf_r+0x1ee>
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0c5      	beq.n	800aaea <_vfiprintf_r+0x176>
 800ab5e:	9105      	str	r1, [sp, #20]
 800ab60:	e7c3      	b.n	800aaea <_vfiprintf_r+0x176>
 800ab62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab66:	4604      	mov	r4, r0
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e7f0      	b.n	800ab4e <_vfiprintf_r+0x1da>
 800ab6c:	ab03      	add	r3, sp, #12
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	462a      	mov	r2, r5
 800ab72:	4b16      	ldr	r3, [pc, #88]	; (800abcc <_vfiprintf_r+0x258>)
 800ab74:	a904      	add	r1, sp, #16
 800ab76:	4630      	mov	r0, r6
 800ab78:	f7fd ffe0 	bl	8008b3c <_printf_float>
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	1c78      	adds	r0, r7, #1
 800ab80:	d1d6      	bne.n	800ab30 <_vfiprintf_r+0x1bc>
 800ab82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab84:	07d9      	lsls	r1, r3, #31
 800ab86:	d405      	bmi.n	800ab94 <_vfiprintf_r+0x220>
 800ab88:	89ab      	ldrh	r3, [r5, #12]
 800ab8a:	059a      	lsls	r2, r3, #22
 800ab8c:	d402      	bmi.n	800ab94 <_vfiprintf_r+0x220>
 800ab8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab90:	f000 faaf 	bl	800b0f2 <__retarget_lock_release_recursive>
 800ab94:	89ab      	ldrh	r3, [r5, #12]
 800ab96:	065b      	lsls	r3, r3, #25
 800ab98:	f53f af12 	bmi.w	800a9c0 <_vfiprintf_r+0x4c>
 800ab9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab9e:	e711      	b.n	800a9c4 <_vfiprintf_r+0x50>
 800aba0:	ab03      	add	r3, sp, #12
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	462a      	mov	r2, r5
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <_vfiprintf_r+0x258>)
 800aba8:	a904      	add	r1, sp, #16
 800abaa:	4630      	mov	r0, r6
 800abac:	f7fe fa6a 	bl	8009084 <_printf_i>
 800abb0:	e7e4      	b.n	800ab7c <_vfiprintf_r+0x208>
 800abb2:	bf00      	nop
 800abb4:	0800e34c 	.word	0x0800e34c
 800abb8:	0800e36c 	.word	0x0800e36c
 800abbc:	0800e32c 	.word	0x0800e32c
 800abc0:	0800e21a 	.word	0x0800e21a
 800abc4:	0800e224 	.word	0x0800e224
 800abc8:	08008b3d 	.word	0x08008b3d
 800abcc:	0800a94f 	.word	0x0800a94f
 800abd0:	0800e220 	.word	0x0800e220

0800abd4 <__swbuf_r>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	460e      	mov	r6, r1
 800abd8:	4614      	mov	r4, r2
 800abda:	4605      	mov	r5, r0
 800abdc:	b118      	cbz	r0, 800abe6 <__swbuf_r+0x12>
 800abde:	6983      	ldr	r3, [r0, #24]
 800abe0:	b90b      	cbnz	r3, 800abe6 <__swbuf_r+0x12>
 800abe2:	f000 f9e7 	bl	800afb4 <__sinit>
 800abe6:	4b21      	ldr	r3, [pc, #132]	; (800ac6c <__swbuf_r+0x98>)
 800abe8:	429c      	cmp	r4, r3
 800abea:	d12b      	bne.n	800ac44 <__swbuf_r+0x70>
 800abec:	686c      	ldr	r4, [r5, #4]
 800abee:	69a3      	ldr	r3, [r4, #24]
 800abf0:	60a3      	str	r3, [r4, #8]
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	071a      	lsls	r2, r3, #28
 800abf6:	d52f      	bpl.n	800ac58 <__swbuf_r+0x84>
 800abf8:	6923      	ldr	r3, [r4, #16]
 800abfa:	b36b      	cbz	r3, 800ac58 <__swbuf_r+0x84>
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	6820      	ldr	r0, [r4, #0]
 800ac00:	1ac0      	subs	r0, r0, r3
 800ac02:	6963      	ldr	r3, [r4, #20]
 800ac04:	b2f6      	uxtb	r6, r6
 800ac06:	4283      	cmp	r3, r0
 800ac08:	4637      	mov	r7, r6
 800ac0a:	dc04      	bgt.n	800ac16 <__swbuf_r+0x42>
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 f93c 	bl	800ae8c <_fflush_r>
 800ac14:	bb30      	cbnz	r0, 800ac64 <__swbuf_r+0x90>
 800ac16:	68a3      	ldr	r3, [r4, #8]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	60a3      	str	r3, [r4, #8]
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	6022      	str	r2, [r4, #0]
 800ac22:	701e      	strb	r6, [r3, #0]
 800ac24:	6963      	ldr	r3, [r4, #20]
 800ac26:	3001      	adds	r0, #1
 800ac28:	4283      	cmp	r3, r0
 800ac2a:	d004      	beq.n	800ac36 <__swbuf_r+0x62>
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	07db      	lsls	r3, r3, #31
 800ac30:	d506      	bpl.n	800ac40 <__swbuf_r+0x6c>
 800ac32:	2e0a      	cmp	r6, #10
 800ac34:	d104      	bne.n	800ac40 <__swbuf_r+0x6c>
 800ac36:	4621      	mov	r1, r4
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f000 f927 	bl	800ae8c <_fflush_r>
 800ac3e:	b988      	cbnz	r0, 800ac64 <__swbuf_r+0x90>
 800ac40:	4638      	mov	r0, r7
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <__swbuf_r+0x9c>)
 800ac46:	429c      	cmp	r4, r3
 800ac48:	d101      	bne.n	800ac4e <__swbuf_r+0x7a>
 800ac4a:	68ac      	ldr	r4, [r5, #8]
 800ac4c:	e7cf      	b.n	800abee <__swbuf_r+0x1a>
 800ac4e:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <__swbuf_r+0xa0>)
 800ac50:	429c      	cmp	r4, r3
 800ac52:	bf08      	it	eq
 800ac54:	68ec      	ldreq	r4, [r5, #12]
 800ac56:	e7ca      	b.n	800abee <__swbuf_r+0x1a>
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f000 f81a 	bl	800ac94 <__swsetup_r>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d0cb      	beq.n	800abfc <__swbuf_r+0x28>
 800ac64:	f04f 37ff 	mov.w	r7, #4294967295
 800ac68:	e7ea      	b.n	800ac40 <__swbuf_r+0x6c>
 800ac6a:	bf00      	nop
 800ac6c:	0800e34c 	.word	0x0800e34c
 800ac70:	0800e36c 	.word	0x0800e36c
 800ac74:	0800e32c 	.word	0x0800e32c

0800ac78 <__ascii_wctomb>:
 800ac78:	b149      	cbz	r1, 800ac8e <__ascii_wctomb+0x16>
 800ac7a:	2aff      	cmp	r2, #255	; 0xff
 800ac7c:	bf85      	ittet	hi
 800ac7e:	238a      	movhi	r3, #138	; 0x8a
 800ac80:	6003      	strhi	r3, [r0, #0]
 800ac82:	700a      	strbls	r2, [r1, #0]
 800ac84:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac88:	bf98      	it	ls
 800ac8a:	2001      	movls	r0, #1
 800ac8c:	4770      	bx	lr
 800ac8e:	4608      	mov	r0, r1
 800ac90:	4770      	bx	lr
	...

0800ac94 <__swsetup_r>:
 800ac94:	4b32      	ldr	r3, [pc, #200]	; (800ad60 <__swsetup_r+0xcc>)
 800ac96:	b570      	push	{r4, r5, r6, lr}
 800ac98:	681d      	ldr	r5, [r3, #0]
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	b125      	cbz	r5, 800acaa <__swsetup_r+0x16>
 800aca0:	69ab      	ldr	r3, [r5, #24]
 800aca2:	b913      	cbnz	r3, 800acaa <__swsetup_r+0x16>
 800aca4:	4628      	mov	r0, r5
 800aca6:	f000 f985 	bl	800afb4 <__sinit>
 800acaa:	4b2e      	ldr	r3, [pc, #184]	; (800ad64 <__swsetup_r+0xd0>)
 800acac:	429c      	cmp	r4, r3
 800acae:	d10f      	bne.n	800acd0 <__swsetup_r+0x3c>
 800acb0:	686c      	ldr	r4, [r5, #4]
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acb8:	0719      	lsls	r1, r3, #28
 800acba:	d42c      	bmi.n	800ad16 <__swsetup_r+0x82>
 800acbc:	06dd      	lsls	r5, r3, #27
 800acbe:	d411      	bmi.n	800ace4 <__swsetup_r+0x50>
 800acc0:	2309      	movs	r3, #9
 800acc2:	6033      	str	r3, [r6, #0]
 800acc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	f04f 30ff 	mov.w	r0, #4294967295
 800acce:	e03e      	b.n	800ad4e <__swsetup_r+0xba>
 800acd0:	4b25      	ldr	r3, [pc, #148]	; (800ad68 <__swsetup_r+0xd4>)
 800acd2:	429c      	cmp	r4, r3
 800acd4:	d101      	bne.n	800acda <__swsetup_r+0x46>
 800acd6:	68ac      	ldr	r4, [r5, #8]
 800acd8:	e7eb      	b.n	800acb2 <__swsetup_r+0x1e>
 800acda:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <__swsetup_r+0xd8>)
 800acdc:	429c      	cmp	r4, r3
 800acde:	bf08      	it	eq
 800ace0:	68ec      	ldreq	r4, [r5, #12]
 800ace2:	e7e6      	b.n	800acb2 <__swsetup_r+0x1e>
 800ace4:	0758      	lsls	r0, r3, #29
 800ace6:	d512      	bpl.n	800ad0e <__swsetup_r+0x7a>
 800ace8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acea:	b141      	cbz	r1, 800acfe <__swsetup_r+0x6a>
 800acec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d002      	beq.n	800acfa <__swsetup_r+0x66>
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff fd0b 	bl	800a710 <_free_r>
 800acfa:	2300      	movs	r3, #0
 800acfc:	6363      	str	r3, [r4, #52]	; 0x34
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	2300      	movs	r3, #0
 800ad08:	6063      	str	r3, [r4, #4]
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f043 0308 	orr.w	r3, r3, #8
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	b94b      	cbnz	r3, 800ad2e <__swsetup_r+0x9a>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad24:	d003      	beq.n	800ad2e <__swsetup_r+0x9a>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f000 fa07 	bl	800b13c <__smakebuf_r>
 800ad2e:	89a0      	ldrh	r0, [r4, #12]
 800ad30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad34:	f010 0301 	ands.w	r3, r0, #1
 800ad38:	d00a      	beq.n	800ad50 <__swsetup_r+0xbc>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	6963      	ldr	r3, [r4, #20]
 800ad40:	425b      	negs	r3, r3
 800ad42:	61a3      	str	r3, [r4, #24]
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	b943      	cbnz	r3, 800ad5a <__swsetup_r+0xc6>
 800ad48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad4c:	d1ba      	bne.n	800acc4 <__swsetup_r+0x30>
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	0781      	lsls	r1, r0, #30
 800ad52:	bf58      	it	pl
 800ad54:	6963      	ldrpl	r3, [r4, #20]
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	e7f4      	b.n	800ad44 <__swsetup_r+0xb0>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	e7f7      	b.n	800ad4e <__swsetup_r+0xba>
 800ad5e:	bf00      	nop
 800ad60:	200000c0 	.word	0x200000c0
 800ad64:	0800e34c 	.word	0x0800e34c
 800ad68:	0800e36c 	.word	0x0800e36c
 800ad6c:	0800e32c 	.word	0x0800e32c

0800ad70 <abort>:
 800ad70:	b508      	push	{r3, lr}
 800ad72:	2006      	movs	r0, #6
 800ad74:	f000 fa4a 	bl	800b20c <raise>
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f7f7 ff4b 	bl	8002c14 <_exit>
	...

0800ad80 <__sflush_r>:
 800ad80:	898a      	ldrh	r2, [r1, #12]
 800ad82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad86:	4605      	mov	r5, r0
 800ad88:	0710      	lsls	r0, r2, #28
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	d458      	bmi.n	800ae40 <__sflush_r+0xc0>
 800ad8e:	684b      	ldr	r3, [r1, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dc05      	bgt.n	800ada0 <__sflush_r+0x20>
 800ad94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dc02      	bgt.n	800ada0 <__sflush_r+0x20>
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ada2:	2e00      	cmp	r6, #0
 800ada4:	d0f9      	beq.n	800ad9a <__sflush_r+0x1a>
 800ada6:	2300      	movs	r3, #0
 800ada8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adac:	682f      	ldr	r7, [r5, #0]
 800adae:	602b      	str	r3, [r5, #0]
 800adb0:	d032      	beq.n	800ae18 <__sflush_r+0x98>
 800adb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	075a      	lsls	r2, r3, #29
 800adb8:	d505      	bpl.n	800adc6 <__sflush_r+0x46>
 800adba:	6863      	ldr	r3, [r4, #4]
 800adbc:	1ac0      	subs	r0, r0, r3
 800adbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adc0:	b10b      	cbz	r3, 800adc6 <__sflush_r+0x46>
 800adc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc4:	1ac0      	subs	r0, r0, r3
 800adc6:	2300      	movs	r3, #0
 800adc8:	4602      	mov	r2, r0
 800adca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adcc:	6a21      	ldr	r1, [r4, #32]
 800adce:	4628      	mov	r0, r5
 800add0:	47b0      	blx	r6
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	d106      	bne.n	800ade6 <__sflush_r+0x66>
 800add8:	6829      	ldr	r1, [r5, #0]
 800adda:	291d      	cmp	r1, #29
 800addc:	d82c      	bhi.n	800ae38 <__sflush_r+0xb8>
 800adde:	4a2a      	ldr	r2, [pc, #168]	; (800ae88 <__sflush_r+0x108>)
 800ade0:	40ca      	lsrs	r2, r1
 800ade2:	07d6      	lsls	r6, r2, #31
 800ade4:	d528      	bpl.n	800ae38 <__sflush_r+0xb8>
 800ade6:	2200      	movs	r2, #0
 800ade8:	6062      	str	r2, [r4, #4]
 800adea:	04d9      	lsls	r1, r3, #19
 800adec:	6922      	ldr	r2, [r4, #16]
 800adee:	6022      	str	r2, [r4, #0]
 800adf0:	d504      	bpl.n	800adfc <__sflush_r+0x7c>
 800adf2:	1c42      	adds	r2, r0, #1
 800adf4:	d101      	bne.n	800adfa <__sflush_r+0x7a>
 800adf6:	682b      	ldr	r3, [r5, #0]
 800adf8:	b903      	cbnz	r3, 800adfc <__sflush_r+0x7c>
 800adfa:	6560      	str	r0, [r4, #84]	; 0x54
 800adfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adfe:	602f      	str	r7, [r5, #0]
 800ae00:	2900      	cmp	r1, #0
 800ae02:	d0ca      	beq.n	800ad9a <__sflush_r+0x1a>
 800ae04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae08:	4299      	cmp	r1, r3
 800ae0a:	d002      	beq.n	800ae12 <__sflush_r+0x92>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f7ff fc7f 	bl	800a710 <_free_r>
 800ae12:	2000      	movs	r0, #0
 800ae14:	6360      	str	r0, [r4, #52]	; 0x34
 800ae16:	e7c1      	b.n	800ad9c <__sflush_r+0x1c>
 800ae18:	6a21      	ldr	r1, [r4, #32]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b0      	blx	r6
 800ae20:	1c41      	adds	r1, r0, #1
 800ae22:	d1c7      	bne.n	800adb4 <__sflush_r+0x34>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0c4      	beq.n	800adb4 <__sflush_r+0x34>
 800ae2a:	2b1d      	cmp	r3, #29
 800ae2c:	d001      	beq.n	800ae32 <__sflush_r+0xb2>
 800ae2e:	2b16      	cmp	r3, #22
 800ae30:	d101      	bne.n	800ae36 <__sflush_r+0xb6>
 800ae32:	602f      	str	r7, [r5, #0]
 800ae34:	e7b1      	b.n	800ad9a <__sflush_r+0x1a>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	e7ad      	b.n	800ad9c <__sflush_r+0x1c>
 800ae40:	690f      	ldr	r7, [r1, #16]
 800ae42:	2f00      	cmp	r7, #0
 800ae44:	d0a9      	beq.n	800ad9a <__sflush_r+0x1a>
 800ae46:	0793      	lsls	r3, r2, #30
 800ae48:	680e      	ldr	r6, [r1, #0]
 800ae4a:	bf08      	it	eq
 800ae4c:	694b      	ldreq	r3, [r1, #20]
 800ae4e:	600f      	str	r7, [r1, #0]
 800ae50:	bf18      	it	ne
 800ae52:	2300      	movne	r3, #0
 800ae54:	eba6 0807 	sub.w	r8, r6, r7
 800ae58:	608b      	str	r3, [r1, #8]
 800ae5a:	f1b8 0f00 	cmp.w	r8, #0
 800ae5e:	dd9c      	ble.n	800ad9a <__sflush_r+0x1a>
 800ae60:	6a21      	ldr	r1, [r4, #32]
 800ae62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae64:	4643      	mov	r3, r8
 800ae66:	463a      	mov	r2, r7
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b0      	blx	r6
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	dc06      	bgt.n	800ae7e <__sflush_r+0xfe>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	e78e      	b.n	800ad9c <__sflush_r+0x1c>
 800ae7e:	4407      	add	r7, r0
 800ae80:	eba8 0800 	sub.w	r8, r8, r0
 800ae84:	e7e9      	b.n	800ae5a <__sflush_r+0xda>
 800ae86:	bf00      	nop
 800ae88:	20400001 	.word	0x20400001

0800ae8c <_fflush_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	690b      	ldr	r3, [r1, #16]
 800ae90:	4605      	mov	r5, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	b913      	cbnz	r3, 800ae9c <_fflush_r+0x10>
 800ae96:	2500      	movs	r5, #0
 800ae98:	4628      	mov	r0, r5
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	b118      	cbz	r0, 800aea6 <_fflush_r+0x1a>
 800ae9e:	6983      	ldr	r3, [r0, #24]
 800aea0:	b90b      	cbnz	r3, 800aea6 <_fflush_r+0x1a>
 800aea2:	f000 f887 	bl	800afb4 <__sinit>
 800aea6:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <_fflush_r+0x6c>)
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	d11b      	bne.n	800aee4 <_fflush_r+0x58>
 800aeac:	686c      	ldr	r4, [r5, #4]
 800aeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0ef      	beq.n	800ae96 <_fflush_r+0xa>
 800aeb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeb8:	07d0      	lsls	r0, r2, #31
 800aeba:	d404      	bmi.n	800aec6 <_fflush_r+0x3a>
 800aebc:	0599      	lsls	r1, r3, #22
 800aebe:	d402      	bmi.n	800aec6 <_fflush_r+0x3a>
 800aec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec2:	f000 f915 	bl	800b0f0 <__retarget_lock_acquire_recursive>
 800aec6:	4628      	mov	r0, r5
 800aec8:	4621      	mov	r1, r4
 800aeca:	f7ff ff59 	bl	800ad80 <__sflush_r>
 800aece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed0:	07da      	lsls	r2, r3, #31
 800aed2:	4605      	mov	r5, r0
 800aed4:	d4e0      	bmi.n	800ae98 <_fflush_r+0xc>
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	059b      	lsls	r3, r3, #22
 800aeda:	d4dd      	bmi.n	800ae98 <_fflush_r+0xc>
 800aedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aede:	f000 f908 	bl	800b0f2 <__retarget_lock_release_recursive>
 800aee2:	e7d9      	b.n	800ae98 <_fflush_r+0xc>
 800aee4:	4b05      	ldr	r3, [pc, #20]	; (800aefc <_fflush_r+0x70>)
 800aee6:	429c      	cmp	r4, r3
 800aee8:	d101      	bne.n	800aeee <_fflush_r+0x62>
 800aeea:	68ac      	ldr	r4, [r5, #8]
 800aeec:	e7df      	b.n	800aeae <_fflush_r+0x22>
 800aeee:	4b04      	ldr	r3, [pc, #16]	; (800af00 <_fflush_r+0x74>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	bf08      	it	eq
 800aef4:	68ec      	ldreq	r4, [r5, #12]
 800aef6:	e7da      	b.n	800aeae <_fflush_r+0x22>
 800aef8:	0800e34c 	.word	0x0800e34c
 800aefc:	0800e36c 	.word	0x0800e36c
 800af00:	0800e32c 	.word	0x0800e32c

0800af04 <std>:
 800af04:	2300      	movs	r3, #0
 800af06:	b510      	push	{r4, lr}
 800af08:	4604      	mov	r4, r0
 800af0a:	e9c0 3300 	strd	r3, r3, [r0]
 800af0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af12:	6083      	str	r3, [r0, #8]
 800af14:	8181      	strh	r1, [r0, #12]
 800af16:	6643      	str	r3, [r0, #100]	; 0x64
 800af18:	81c2      	strh	r2, [r0, #14]
 800af1a:	6183      	str	r3, [r0, #24]
 800af1c:	4619      	mov	r1, r3
 800af1e:	2208      	movs	r2, #8
 800af20:	305c      	adds	r0, #92	; 0x5c
 800af22:	f7fd fd63 	bl	80089ec <memset>
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <std+0x38>)
 800af28:	6263      	str	r3, [r4, #36]	; 0x24
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <std+0x3c>)
 800af2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af2e:	4b05      	ldr	r3, [pc, #20]	; (800af44 <std+0x40>)
 800af30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <std+0x44>)
 800af34:	6224      	str	r4, [r4, #32]
 800af36:	6323      	str	r3, [r4, #48]	; 0x30
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	bf00      	nop
 800af3c:	0800b245 	.word	0x0800b245
 800af40:	0800b267 	.word	0x0800b267
 800af44:	0800b29f 	.word	0x0800b29f
 800af48:	0800b2c3 	.word	0x0800b2c3

0800af4c <_cleanup_r>:
 800af4c:	4901      	ldr	r1, [pc, #4]	; (800af54 <_cleanup_r+0x8>)
 800af4e:	f000 b8af 	b.w	800b0b0 <_fwalk_reent>
 800af52:	bf00      	nop
 800af54:	0800ae8d 	.word	0x0800ae8d

0800af58 <__sfmoreglue>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	1e4a      	subs	r2, r1, #1
 800af5c:	2568      	movs	r5, #104	; 0x68
 800af5e:	4355      	muls	r5, r2
 800af60:	460e      	mov	r6, r1
 800af62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af66:	f7ff fc23 	bl	800a7b0 <_malloc_r>
 800af6a:	4604      	mov	r4, r0
 800af6c:	b140      	cbz	r0, 800af80 <__sfmoreglue+0x28>
 800af6e:	2100      	movs	r1, #0
 800af70:	e9c0 1600 	strd	r1, r6, [r0]
 800af74:	300c      	adds	r0, #12
 800af76:	60a0      	str	r0, [r4, #8]
 800af78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af7c:	f7fd fd36 	bl	80089ec <memset>
 800af80:	4620      	mov	r0, r4
 800af82:	bd70      	pop	{r4, r5, r6, pc}

0800af84 <__sfp_lock_acquire>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__sfp_lock_acquire+0x8>)
 800af86:	f000 b8b3 	b.w	800b0f0 <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	20000790 	.word	0x20000790

0800af90 <__sfp_lock_release>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__sfp_lock_release+0x8>)
 800af92:	f000 b8ae 	b.w	800b0f2 <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	20000790 	.word	0x20000790

0800af9c <__sinit_lock_acquire>:
 800af9c:	4801      	ldr	r0, [pc, #4]	; (800afa4 <__sinit_lock_acquire+0x8>)
 800af9e:	f000 b8a7 	b.w	800b0f0 <__retarget_lock_acquire_recursive>
 800afa2:	bf00      	nop
 800afa4:	2000078b 	.word	0x2000078b

0800afa8 <__sinit_lock_release>:
 800afa8:	4801      	ldr	r0, [pc, #4]	; (800afb0 <__sinit_lock_release+0x8>)
 800afaa:	f000 b8a2 	b.w	800b0f2 <__retarget_lock_release_recursive>
 800afae:	bf00      	nop
 800afb0:	2000078b 	.word	0x2000078b

0800afb4 <__sinit>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	4604      	mov	r4, r0
 800afb8:	f7ff fff0 	bl	800af9c <__sinit_lock_acquire>
 800afbc:	69a3      	ldr	r3, [r4, #24]
 800afbe:	b11b      	cbz	r3, 800afc8 <__sinit+0x14>
 800afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc4:	f7ff bff0 	b.w	800afa8 <__sinit_lock_release>
 800afc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afcc:	6523      	str	r3, [r4, #80]	; 0x50
 800afce:	4b13      	ldr	r3, [pc, #76]	; (800b01c <__sinit+0x68>)
 800afd0:	4a13      	ldr	r2, [pc, #76]	; (800b020 <__sinit+0x6c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afd6:	42a3      	cmp	r3, r4
 800afd8:	bf04      	itt	eq
 800afda:	2301      	moveq	r3, #1
 800afdc:	61a3      	streq	r3, [r4, #24]
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 f820 	bl	800b024 <__sfp>
 800afe4:	6060      	str	r0, [r4, #4]
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 f81c 	bl	800b024 <__sfp>
 800afec:	60a0      	str	r0, [r4, #8]
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 f818 	bl	800b024 <__sfp>
 800aff4:	2200      	movs	r2, #0
 800aff6:	60e0      	str	r0, [r4, #12]
 800aff8:	2104      	movs	r1, #4
 800affa:	6860      	ldr	r0, [r4, #4]
 800affc:	f7ff ff82 	bl	800af04 <std>
 800b000:	68a0      	ldr	r0, [r4, #8]
 800b002:	2201      	movs	r2, #1
 800b004:	2109      	movs	r1, #9
 800b006:	f7ff ff7d 	bl	800af04 <std>
 800b00a:	68e0      	ldr	r0, [r4, #12]
 800b00c:	2202      	movs	r2, #2
 800b00e:	2112      	movs	r1, #18
 800b010:	f7ff ff78 	bl	800af04 <std>
 800b014:	2301      	movs	r3, #1
 800b016:	61a3      	str	r3, [r4, #24]
 800b018:	e7d2      	b.n	800afc0 <__sinit+0xc>
 800b01a:	bf00      	nop
 800b01c:	0800dfa8 	.word	0x0800dfa8
 800b020:	0800af4d 	.word	0x0800af4d

0800b024 <__sfp>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	4607      	mov	r7, r0
 800b028:	f7ff ffac 	bl	800af84 <__sfp_lock_acquire>
 800b02c:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <__sfp+0x84>)
 800b02e:	681e      	ldr	r6, [r3, #0]
 800b030:	69b3      	ldr	r3, [r6, #24]
 800b032:	b913      	cbnz	r3, 800b03a <__sfp+0x16>
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff ffbd 	bl	800afb4 <__sinit>
 800b03a:	3648      	adds	r6, #72	; 0x48
 800b03c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b040:	3b01      	subs	r3, #1
 800b042:	d503      	bpl.n	800b04c <__sfp+0x28>
 800b044:	6833      	ldr	r3, [r6, #0]
 800b046:	b30b      	cbz	r3, 800b08c <__sfp+0x68>
 800b048:	6836      	ldr	r6, [r6, #0]
 800b04a:	e7f7      	b.n	800b03c <__sfp+0x18>
 800b04c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b050:	b9d5      	cbnz	r5, 800b088 <__sfp+0x64>
 800b052:	4b16      	ldr	r3, [pc, #88]	; (800b0ac <__sfp+0x88>)
 800b054:	60e3      	str	r3, [r4, #12]
 800b056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b05a:	6665      	str	r5, [r4, #100]	; 0x64
 800b05c:	f000 f847 	bl	800b0ee <__retarget_lock_init_recursive>
 800b060:	f7ff ff96 	bl	800af90 <__sfp_lock_release>
 800b064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b06c:	6025      	str	r5, [r4, #0]
 800b06e:	61a5      	str	r5, [r4, #24]
 800b070:	2208      	movs	r2, #8
 800b072:	4629      	mov	r1, r5
 800b074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b078:	f7fd fcb8 	bl	80089ec <memset>
 800b07c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b084:	4620      	mov	r0, r4
 800b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b088:	3468      	adds	r4, #104	; 0x68
 800b08a:	e7d9      	b.n	800b040 <__sfp+0x1c>
 800b08c:	2104      	movs	r1, #4
 800b08e:	4638      	mov	r0, r7
 800b090:	f7ff ff62 	bl	800af58 <__sfmoreglue>
 800b094:	4604      	mov	r4, r0
 800b096:	6030      	str	r0, [r6, #0]
 800b098:	2800      	cmp	r0, #0
 800b09a:	d1d5      	bne.n	800b048 <__sfp+0x24>
 800b09c:	f7ff ff78 	bl	800af90 <__sfp_lock_release>
 800b0a0:	230c      	movs	r3, #12
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	e7ee      	b.n	800b084 <__sfp+0x60>
 800b0a6:	bf00      	nop
 800b0a8:	0800dfa8 	.word	0x0800dfa8
 800b0ac:	ffff0001 	.word	0xffff0001

0800b0b0 <_fwalk_reent>:
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	4688      	mov	r8, r1
 800b0b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0bc:	2700      	movs	r7, #0
 800b0be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0c2:	f1b9 0901 	subs.w	r9, r9, #1
 800b0c6:	d505      	bpl.n	800b0d4 <_fwalk_reent+0x24>
 800b0c8:	6824      	ldr	r4, [r4, #0]
 800b0ca:	2c00      	cmp	r4, #0
 800b0cc:	d1f7      	bne.n	800b0be <_fwalk_reent+0xe>
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d4:	89ab      	ldrh	r3, [r5, #12]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d907      	bls.n	800b0ea <_fwalk_reent+0x3a>
 800b0da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	d003      	beq.n	800b0ea <_fwalk_reent+0x3a>
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	47c0      	blx	r8
 800b0e8:	4307      	orrs	r7, r0
 800b0ea:	3568      	adds	r5, #104	; 0x68
 800b0ec:	e7e9      	b.n	800b0c2 <_fwalk_reent+0x12>

0800b0ee <__retarget_lock_init_recursive>:
 800b0ee:	4770      	bx	lr

0800b0f0 <__retarget_lock_acquire_recursive>:
 800b0f0:	4770      	bx	lr

0800b0f2 <__retarget_lock_release_recursive>:
 800b0f2:	4770      	bx	lr

0800b0f4 <__swhatbuf_r>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	460e      	mov	r6, r1
 800b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	b096      	sub	sp, #88	; 0x58
 800b100:	4614      	mov	r4, r2
 800b102:	461d      	mov	r5, r3
 800b104:	da07      	bge.n	800b116 <__swhatbuf_r+0x22>
 800b106:	2300      	movs	r3, #0
 800b108:	602b      	str	r3, [r5, #0]
 800b10a:	89b3      	ldrh	r3, [r6, #12]
 800b10c:	061a      	lsls	r2, r3, #24
 800b10e:	d410      	bmi.n	800b132 <__swhatbuf_r+0x3e>
 800b110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b114:	e00e      	b.n	800b134 <__swhatbuf_r+0x40>
 800b116:	466a      	mov	r2, sp
 800b118:	f000 f8fa 	bl	800b310 <_fstat_r>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	dbf2      	blt.n	800b106 <__swhatbuf_r+0x12>
 800b120:	9a01      	ldr	r2, [sp, #4]
 800b122:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b126:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b12a:	425a      	negs	r2, r3
 800b12c:	415a      	adcs	r2, r3
 800b12e:	602a      	str	r2, [r5, #0]
 800b130:	e7ee      	b.n	800b110 <__swhatbuf_r+0x1c>
 800b132:	2340      	movs	r3, #64	; 0x40
 800b134:	2000      	movs	r0, #0
 800b136:	6023      	str	r3, [r4, #0]
 800b138:	b016      	add	sp, #88	; 0x58
 800b13a:	bd70      	pop	{r4, r5, r6, pc}

0800b13c <__smakebuf_r>:
 800b13c:	898b      	ldrh	r3, [r1, #12]
 800b13e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b140:	079d      	lsls	r5, r3, #30
 800b142:	4606      	mov	r6, r0
 800b144:	460c      	mov	r4, r1
 800b146:	d507      	bpl.n	800b158 <__smakebuf_r+0x1c>
 800b148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	6123      	str	r3, [r4, #16]
 800b150:	2301      	movs	r3, #1
 800b152:	6163      	str	r3, [r4, #20]
 800b154:	b002      	add	sp, #8
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	ab01      	add	r3, sp, #4
 800b15a:	466a      	mov	r2, sp
 800b15c:	f7ff ffca 	bl	800b0f4 <__swhatbuf_r>
 800b160:	9900      	ldr	r1, [sp, #0]
 800b162:	4605      	mov	r5, r0
 800b164:	4630      	mov	r0, r6
 800b166:	f7ff fb23 	bl	800a7b0 <_malloc_r>
 800b16a:	b948      	cbnz	r0, 800b180 <__smakebuf_r+0x44>
 800b16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b170:	059a      	lsls	r2, r3, #22
 800b172:	d4ef      	bmi.n	800b154 <__smakebuf_r+0x18>
 800b174:	f023 0303 	bic.w	r3, r3, #3
 800b178:	f043 0302 	orr.w	r3, r3, #2
 800b17c:	81a3      	strh	r3, [r4, #12]
 800b17e:	e7e3      	b.n	800b148 <__smakebuf_r+0xc>
 800b180:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <__smakebuf_r+0x7c>)
 800b182:	62b3      	str	r3, [r6, #40]	; 0x28
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	6020      	str	r0, [r4, #0]
 800b188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	9b00      	ldr	r3, [sp, #0]
 800b190:	6163      	str	r3, [r4, #20]
 800b192:	9b01      	ldr	r3, [sp, #4]
 800b194:	6120      	str	r0, [r4, #16]
 800b196:	b15b      	cbz	r3, 800b1b0 <__smakebuf_r+0x74>
 800b198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b19c:	4630      	mov	r0, r6
 800b19e:	f000 f8c9 	bl	800b334 <_isatty_r>
 800b1a2:	b128      	cbz	r0, 800b1b0 <__smakebuf_r+0x74>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	f043 0301 	orr.w	r3, r3, #1
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	89a0      	ldrh	r0, [r4, #12]
 800b1b2:	4305      	orrs	r5, r0
 800b1b4:	81a5      	strh	r5, [r4, #12]
 800b1b6:	e7cd      	b.n	800b154 <__smakebuf_r+0x18>
 800b1b8:	0800af4d 	.word	0x0800af4d

0800b1bc <_raise_r>:
 800b1bc:	291f      	cmp	r1, #31
 800b1be:	b538      	push	{r3, r4, r5, lr}
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	460d      	mov	r5, r1
 800b1c4:	d904      	bls.n	800b1d0 <_raise_r+0x14>
 800b1c6:	2316      	movs	r3, #22
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1d2:	b112      	cbz	r2, 800b1da <_raise_r+0x1e>
 800b1d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1d8:	b94b      	cbnz	r3, 800b1ee <_raise_r+0x32>
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 f830 	bl	800b240 <_getpid_r>
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ea:	f000 b817 	b.w	800b21c <_kill_r>
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d00a      	beq.n	800b208 <_raise_r+0x4c>
 800b1f2:	1c59      	adds	r1, r3, #1
 800b1f4:	d103      	bne.n	800b1fe <_raise_r+0x42>
 800b1f6:	2316      	movs	r3, #22
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	e7e7      	b.n	800b1ce <_raise_r+0x12>
 800b1fe:	2400      	movs	r4, #0
 800b200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b204:	4628      	mov	r0, r5
 800b206:	4798      	blx	r3
 800b208:	2000      	movs	r0, #0
 800b20a:	e7e0      	b.n	800b1ce <_raise_r+0x12>

0800b20c <raise>:
 800b20c:	4b02      	ldr	r3, [pc, #8]	; (800b218 <raise+0xc>)
 800b20e:	4601      	mov	r1, r0
 800b210:	6818      	ldr	r0, [r3, #0]
 800b212:	f7ff bfd3 	b.w	800b1bc <_raise_r>
 800b216:	bf00      	nop
 800b218:	200000c0 	.word	0x200000c0

0800b21c <_kill_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d07      	ldr	r5, [pc, #28]	; (800b23c <_kill_r+0x20>)
 800b220:	2300      	movs	r3, #0
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	4611      	mov	r1, r2
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	f7f7 fce3 	bl	8002bf4 <_kill>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d102      	bne.n	800b238 <_kill_r+0x1c>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	b103      	cbz	r3, 800b238 <_kill_r+0x1c>
 800b236:	6023      	str	r3, [r4, #0]
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	bf00      	nop
 800b23c:	20000784 	.word	0x20000784

0800b240 <_getpid_r>:
 800b240:	f7f7 bcd0 	b.w	8002be4 <_getpid>

0800b244 <__sread>:
 800b244:	b510      	push	{r4, lr}
 800b246:	460c      	mov	r4, r1
 800b248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b24c:	f000 f894 	bl	800b378 <_read_r>
 800b250:	2800      	cmp	r0, #0
 800b252:	bfab      	itete	ge
 800b254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b256:	89a3      	ldrhlt	r3, [r4, #12]
 800b258:	181b      	addge	r3, r3, r0
 800b25a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b25e:	bfac      	ite	ge
 800b260:	6563      	strge	r3, [r4, #84]	; 0x54
 800b262:	81a3      	strhlt	r3, [r4, #12]
 800b264:	bd10      	pop	{r4, pc}

0800b266 <__swrite>:
 800b266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b26a:	461f      	mov	r7, r3
 800b26c:	898b      	ldrh	r3, [r1, #12]
 800b26e:	05db      	lsls	r3, r3, #23
 800b270:	4605      	mov	r5, r0
 800b272:	460c      	mov	r4, r1
 800b274:	4616      	mov	r6, r2
 800b276:	d505      	bpl.n	800b284 <__swrite+0x1e>
 800b278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b27c:	2302      	movs	r3, #2
 800b27e:	2200      	movs	r2, #0
 800b280:	f000 f868 	bl	800b354 <_lseek_r>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b28a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b28e:	81a3      	strh	r3, [r4, #12]
 800b290:	4632      	mov	r2, r6
 800b292:	463b      	mov	r3, r7
 800b294:	4628      	mov	r0, r5
 800b296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b29a:	f000 b817 	b.w	800b2cc <_write_r>

0800b29e <__sseek>:
 800b29e:	b510      	push	{r4, lr}
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a6:	f000 f855 	bl	800b354 <_lseek_r>
 800b2aa:	1c43      	adds	r3, r0, #1
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	bf15      	itete	ne
 800b2b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2ba:	81a3      	strheq	r3, [r4, #12]
 800b2bc:	bf18      	it	ne
 800b2be:	81a3      	strhne	r3, [r4, #12]
 800b2c0:	bd10      	pop	{r4, pc}

0800b2c2 <__sclose>:
 800b2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c6:	f000 b813 	b.w	800b2f0 <_close_r>
	...

0800b2cc <_write_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	; (800b2ec <_write_r+0x20>)
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	602a      	str	r2, [r5, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f7f7 fcc1 	bl	8002c62 <_write>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_write_r+0x1e>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_write_r+0x1e>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	20000784 	.word	0x20000784

0800b2f0 <_close_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d06      	ldr	r5, [pc, #24]	; (800b30c <_close_r+0x1c>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	f7f7 fccd 	bl	8002c9a <_close>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_close_r+0x1a>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_close_r+0x1a>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	20000784 	.word	0x20000784

0800b310 <_fstat_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d07      	ldr	r5, [pc, #28]	; (800b330 <_fstat_r+0x20>)
 800b314:	2300      	movs	r3, #0
 800b316:	4604      	mov	r4, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	4611      	mov	r1, r2
 800b31c:	602b      	str	r3, [r5, #0]
 800b31e:	f7f7 fcc8 	bl	8002cb2 <_fstat>
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	d102      	bne.n	800b32c <_fstat_r+0x1c>
 800b326:	682b      	ldr	r3, [r5, #0]
 800b328:	b103      	cbz	r3, 800b32c <_fstat_r+0x1c>
 800b32a:	6023      	str	r3, [r4, #0]
 800b32c:	bd38      	pop	{r3, r4, r5, pc}
 800b32e:	bf00      	nop
 800b330:	20000784 	.word	0x20000784

0800b334 <_isatty_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4d06      	ldr	r5, [pc, #24]	; (800b350 <_isatty_r+0x1c>)
 800b338:	2300      	movs	r3, #0
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	602b      	str	r3, [r5, #0]
 800b340:	f7f7 fcc7 	bl	8002cd2 <_isatty>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d102      	bne.n	800b34e <_isatty_r+0x1a>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	b103      	cbz	r3, 800b34e <_isatty_r+0x1a>
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
 800b350:	20000784 	.word	0x20000784

0800b354 <_lseek_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d07      	ldr	r5, [pc, #28]	; (800b374 <_lseek_r+0x20>)
 800b358:	4604      	mov	r4, r0
 800b35a:	4608      	mov	r0, r1
 800b35c:	4611      	mov	r1, r2
 800b35e:	2200      	movs	r2, #0
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	f7f7 fcc0 	bl	8002ce8 <_lseek>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_lseek_r+0x1e>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_lseek_r+0x1e>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	20000784 	.word	0x20000784

0800b378 <_read_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4d07      	ldr	r5, [pc, #28]	; (800b398 <_read_r+0x20>)
 800b37c:	4604      	mov	r4, r0
 800b37e:	4608      	mov	r0, r1
 800b380:	4611      	mov	r1, r2
 800b382:	2200      	movs	r2, #0
 800b384:	602a      	str	r2, [r5, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	f7f7 fc4e 	bl	8002c28 <_read>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_read_r+0x1e>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_read_r+0x1e>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	20000784 	.word	0x20000784
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <cos>:
 800b3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3a2:	ec53 2b10 	vmov	r2, r3, d0
 800b3a6:	4824      	ldr	r0, [pc, #144]	; (800b438 <cos+0x98>)
 800b3a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b3ac:	4281      	cmp	r1, r0
 800b3ae:	dc06      	bgt.n	800b3be <cos+0x1e>
 800b3b0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b430 <cos+0x90>
 800b3b4:	f000 faa4 	bl	800b900 <__kernel_cos>
 800b3b8:	ec51 0b10 	vmov	r0, r1, d0
 800b3bc:	e007      	b.n	800b3ce <cos+0x2e>
 800b3be:	481f      	ldr	r0, [pc, #124]	; (800b43c <cos+0x9c>)
 800b3c0:	4281      	cmp	r1, r0
 800b3c2:	dd09      	ble.n	800b3d8 <cos+0x38>
 800b3c4:	ee10 0a10 	vmov	r0, s0
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	f7f4 ff6d 	bl	80002a8 <__aeabi_dsub>
 800b3ce:	ec41 0b10 	vmov	d0, r0, r1
 800b3d2:	b005      	add	sp, #20
 800b3d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3d8:	4668      	mov	r0, sp
 800b3da:	f000 f885 	bl	800b4e8 <__ieee754_rem_pio2>
 800b3de:	f000 0003 	and.w	r0, r0, #3
 800b3e2:	2801      	cmp	r0, #1
 800b3e4:	d007      	beq.n	800b3f6 <cos+0x56>
 800b3e6:	2802      	cmp	r0, #2
 800b3e8:	d012      	beq.n	800b410 <cos+0x70>
 800b3ea:	b9c0      	cbnz	r0, 800b41e <cos+0x7e>
 800b3ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3f0:	ed9d 0b00 	vldr	d0, [sp]
 800b3f4:	e7de      	b.n	800b3b4 <cos+0x14>
 800b3f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3fa:	ed9d 0b00 	vldr	d0, [sp]
 800b3fe:	f000 fe87 	bl	800c110 <__kernel_sin>
 800b402:	ec53 2b10 	vmov	r2, r3, d0
 800b406:	ee10 0a10 	vmov	r0, s0
 800b40a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b40e:	e7de      	b.n	800b3ce <cos+0x2e>
 800b410:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b414:	ed9d 0b00 	vldr	d0, [sp]
 800b418:	f000 fa72 	bl	800b900 <__kernel_cos>
 800b41c:	e7f1      	b.n	800b402 <cos+0x62>
 800b41e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b422:	ed9d 0b00 	vldr	d0, [sp]
 800b426:	2001      	movs	r0, #1
 800b428:	f000 fe72 	bl	800c110 <__kernel_sin>
 800b42c:	e7c4      	b.n	800b3b8 <cos+0x18>
 800b42e:	bf00      	nop
	...
 800b438:	3fe921fb 	.word	0x3fe921fb
 800b43c:	7fefffff 	.word	0x7fefffff

0800b440 <sin>:
 800b440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b442:	ec53 2b10 	vmov	r2, r3, d0
 800b446:	4826      	ldr	r0, [pc, #152]	; (800b4e0 <sin+0xa0>)
 800b448:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b44c:	4281      	cmp	r1, r0
 800b44e:	dc07      	bgt.n	800b460 <sin+0x20>
 800b450:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b4d8 <sin+0x98>
 800b454:	2000      	movs	r0, #0
 800b456:	f000 fe5b 	bl	800c110 <__kernel_sin>
 800b45a:	ec51 0b10 	vmov	r0, r1, d0
 800b45e:	e007      	b.n	800b470 <sin+0x30>
 800b460:	4820      	ldr	r0, [pc, #128]	; (800b4e4 <sin+0xa4>)
 800b462:	4281      	cmp	r1, r0
 800b464:	dd09      	ble.n	800b47a <sin+0x3a>
 800b466:	ee10 0a10 	vmov	r0, s0
 800b46a:	4619      	mov	r1, r3
 800b46c:	f7f4 ff1c 	bl	80002a8 <__aeabi_dsub>
 800b470:	ec41 0b10 	vmov	d0, r0, r1
 800b474:	b005      	add	sp, #20
 800b476:	f85d fb04 	ldr.w	pc, [sp], #4
 800b47a:	4668      	mov	r0, sp
 800b47c:	f000 f834 	bl	800b4e8 <__ieee754_rem_pio2>
 800b480:	f000 0003 	and.w	r0, r0, #3
 800b484:	2801      	cmp	r0, #1
 800b486:	d008      	beq.n	800b49a <sin+0x5a>
 800b488:	2802      	cmp	r0, #2
 800b48a:	d00d      	beq.n	800b4a8 <sin+0x68>
 800b48c:	b9d0      	cbnz	r0, 800b4c4 <sin+0x84>
 800b48e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b492:	ed9d 0b00 	vldr	d0, [sp]
 800b496:	2001      	movs	r0, #1
 800b498:	e7dd      	b.n	800b456 <sin+0x16>
 800b49a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b49e:	ed9d 0b00 	vldr	d0, [sp]
 800b4a2:	f000 fa2d 	bl	800b900 <__kernel_cos>
 800b4a6:	e7d8      	b.n	800b45a <sin+0x1a>
 800b4a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b4ac:	ed9d 0b00 	vldr	d0, [sp]
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	f000 fe2d 	bl	800c110 <__kernel_sin>
 800b4b6:	ec53 2b10 	vmov	r2, r3, d0
 800b4ba:	ee10 0a10 	vmov	r0, s0
 800b4be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b4c2:	e7d5      	b.n	800b470 <sin+0x30>
 800b4c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b4c8:	ed9d 0b00 	vldr	d0, [sp]
 800b4cc:	f000 fa18 	bl	800b900 <__kernel_cos>
 800b4d0:	e7f1      	b.n	800b4b6 <sin+0x76>
 800b4d2:	bf00      	nop
 800b4d4:	f3af 8000 	nop.w
	...
 800b4e0:	3fe921fb 	.word	0x3fe921fb
 800b4e4:	7fefffff 	.word	0x7fefffff

0800b4e8 <__ieee754_rem_pio2>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	ed2d 8b02 	vpush	{d8}
 800b4f0:	ec55 4b10 	vmov	r4, r5, d0
 800b4f4:	4bca      	ldr	r3, [pc, #808]	; (800b820 <__ieee754_rem_pio2+0x338>)
 800b4f6:	b08b      	sub	sp, #44	; 0x2c
 800b4f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b4fc:	4598      	cmp	r8, r3
 800b4fe:	4682      	mov	sl, r0
 800b500:	9502      	str	r5, [sp, #8]
 800b502:	dc08      	bgt.n	800b516 <__ieee754_rem_pio2+0x2e>
 800b504:	2200      	movs	r2, #0
 800b506:	2300      	movs	r3, #0
 800b508:	ed80 0b00 	vstr	d0, [r0]
 800b50c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b510:	f04f 0b00 	mov.w	fp, #0
 800b514:	e028      	b.n	800b568 <__ieee754_rem_pio2+0x80>
 800b516:	4bc3      	ldr	r3, [pc, #780]	; (800b824 <__ieee754_rem_pio2+0x33c>)
 800b518:	4598      	cmp	r8, r3
 800b51a:	dc78      	bgt.n	800b60e <__ieee754_rem_pio2+0x126>
 800b51c:	9b02      	ldr	r3, [sp, #8]
 800b51e:	4ec2      	ldr	r6, [pc, #776]	; (800b828 <__ieee754_rem_pio2+0x340>)
 800b520:	2b00      	cmp	r3, #0
 800b522:	ee10 0a10 	vmov	r0, s0
 800b526:	a3b0      	add	r3, pc, #704	; (adr r3, 800b7e8 <__ieee754_rem_pio2+0x300>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	4629      	mov	r1, r5
 800b52e:	dd39      	ble.n	800b5a4 <__ieee754_rem_pio2+0xbc>
 800b530:	f7f4 feba 	bl	80002a8 <__aeabi_dsub>
 800b534:	45b0      	cmp	r8, r6
 800b536:	4604      	mov	r4, r0
 800b538:	460d      	mov	r5, r1
 800b53a:	d01b      	beq.n	800b574 <__ieee754_rem_pio2+0x8c>
 800b53c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b7f0 <__ieee754_rem_pio2+0x308>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	f7f4 feb1 	bl	80002a8 <__aeabi_dsub>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	e9ca 2300 	strd	r2, r3, [sl]
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f4 fea9 	bl	80002a8 <__aeabi_dsub>
 800b556:	a3a6      	add	r3, pc, #664	; (adr r3, 800b7f0 <__ieee754_rem_pio2+0x308>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f4 fea4 	bl	80002a8 <__aeabi_dsub>
 800b560:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b564:	f04f 0b01 	mov.w	fp, #1
 800b568:	4658      	mov	r0, fp
 800b56a:	b00b      	add	sp, #44	; 0x2c
 800b56c:	ecbd 8b02 	vpop	{d8}
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	a3a0      	add	r3, pc, #640	; (adr r3, 800b7f8 <__ieee754_rem_pio2+0x310>)
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f7f4 fe95 	bl	80002a8 <__aeabi_dsub>
 800b57e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b800 <__ieee754_rem_pio2+0x318>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	4604      	mov	r4, r0
 800b586:	460d      	mov	r5, r1
 800b588:	f7f4 fe8e 	bl	80002a8 <__aeabi_dsub>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	e9ca 2300 	strd	r2, r3, [sl]
 800b594:	4620      	mov	r0, r4
 800b596:	4629      	mov	r1, r5
 800b598:	f7f4 fe86 	bl	80002a8 <__aeabi_dsub>
 800b59c:	a398      	add	r3, pc, #608	; (adr r3, 800b800 <__ieee754_rem_pio2+0x318>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	e7db      	b.n	800b55c <__ieee754_rem_pio2+0x74>
 800b5a4:	f7f4 fe82 	bl	80002ac <__adddf3>
 800b5a8:	45b0      	cmp	r8, r6
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	d016      	beq.n	800b5de <__ieee754_rem_pio2+0xf6>
 800b5b0:	a38f      	add	r3, pc, #572	; (adr r3, 800b7f0 <__ieee754_rem_pio2+0x308>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f4 fe79 	bl	80002ac <__adddf3>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	460b      	mov	r3, r1
 800b5be:	e9ca 2300 	strd	r2, r3, [sl]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	f7f4 fe6f 	bl	80002a8 <__aeabi_dsub>
 800b5ca:	a389      	add	r3, pc, #548	; (adr r3, 800b7f0 <__ieee754_rem_pio2+0x308>)
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	f7f4 fe6c 	bl	80002ac <__adddf3>
 800b5d4:	f04f 3bff 	mov.w	fp, #4294967295
 800b5d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b5dc:	e7c4      	b.n	800b568 <__ieee754_rem_pio2+0x80>
 800b5de:	a386      	add	r3, pc, #536	; (adr r3, 800b7f8 <__ieee754_rem_pio2+0x310>)
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	f7f4 fe62 	bl	80002ac <__adddf3>
 800b5e8:	a385      	add	r3, pc, #532	; (adr r3, 800b800 <__ieee754_rem_pio2+0x318>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	f7f4 fe5b 	bl	80002ac <__adddf3>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	e9ca 2300 	strd	r2, r3, [sl]
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f4 fe51 	bl	80002a8 <__aeabi_dsub>
 800b606:	a37e      	add	r3, pc, #504	; (adr r3, 800b800 <__ieee754_rem_pio2+0x318>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	e7e0      	b.n	800b5d0 <__ieee754_rem_pio2+0xe8>
 800b60e:	4b87      	ldr	r3, [pc, #540]	; (800b82c <__ieee754_rem_pio2+0x344>)
 800b610:	4598      	cmp	r8, r3
 800b612:	f300 80d9 	bgt.w	800b7c8 <__ieee754_rem_pio2+0x2e0>
 800b616:	f000 fe39 	bl	800c28c <fabs>
 800b61a:	ec55 4b10 	vmov	r4, r5, d0
 800b61e:	ee10 0a10 	vmov	r0, s0
 800b622:	a379      	add	r3, pc, #484	; (adr r3, 800b808 <__ieee754_rem_pio2+0x320>)
 800b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b628:	4629      	mov	r1, r5
 800b62a:	f7f4 fff5 	bl	8000618 <__aeabi_dmul>
 800b62e:	4b80      	ldr	r3, [pc, #512]	; (800b830 <__ieee754_rem_pio2+0x348>)
 800b630:	2200      	movs	r2, #0
 800b632:	f7f4 fe3b 	bl	80002ac <__adddf3>
 800b636:	f7f5 fa9f 	bl	8000b78 <__aeabi_d2iz>
 800b63a:	4683      	mov	fp, r0
 800b63c:	f7f4 ff82 	bl	8000544 <__aeabi_i2d>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	ec43 2b18 	vmov	d8, r2, r3
 800b648:	a367      	add	r3, pc, #412	; (adr r3, 800b7e8 <__ieee754_rem_pio2+0x300>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f7f4 ffe3 	bl	8000618 <__aeabi_dmul>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f4 fe25 	bl	80002a8 <__aeabi_dsub>
 800b65e:	a364      	add	r3, pc, #400	; (adr r3, 800b7f0 <__ieee754_rem_pio2+0x308>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	4606      	mov	r6, r0
 800b666:	460f      	mov	r7, r1
 800b668:	ec51 0b18 	vmov	r0, r1, d8
 800b66c:	f7f4 ffd4 	bl	8000618 <__aeabi_dmul>
 800b670:	f1bb 0f1f 	cmp.w	fp, #31
 800b674:	4604      	mov	r4, r0
 800b676:	460d      	mov	r5, r1
 800b678:	dc0d      	bgt.n	800b696 <__ieee754_rem_pio2+0x1ae>
 800b67a:	4b6e      	ldr	r3, [pc, #440]	; (800b834 <__ieee754_rem_pio2+0x34c>)
 800b67c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b684:	4543      	cmp	r3, r8
 800b686:	d006      	beq.n	800b696 <__ieee754_rem_pio2+0x1ae>
 800b688:	4622      	mov	r2, r4
 800b68a:	462b      	mov	r3, r5
 800b68c:	4630      	mov	r0, r6
 800b68e:	4639      	mov	r1, r7
 800b690:	f7f4 fe0a 	bl	80002a8 <__aeabi_dsub>
 800b694:	e00f      	b.n	800b6b6 <__ieee754_rem_pio2+0x1ce>
 800b696:	462b      	mov	r3, r5
 800b698:	4622      	mov	r2, r4
 800b69a:	4630      	mov	r0, r6
 800b69c:	4639      	mov	r1, r7
 800b69e:	f7f4 fe03 	bl	80002a8 <__aeabi_dsub>
 800b6a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b6a6:	9303      	str	r3, [sp, #12]
 800b6a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b6ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b6b0:	f1b8 0f10 	cmp.w	r8, #16
 800b6b4:	dc02      	bgt.n	800b6bc <__ieee754_rem_pio2+0x1d4>
 800b6b6:	e9ca 0100 	strd	r0, r1, [sl]
 800b6ba:	e039      	b.n	800b730 <__ieee754_rem_pio2+0x248>
 800b6bc:	a34e      	add	r3, pc, #312	; (adr r3, 800b7f8 <__ieee754_rem_pio2+0x310>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	ec51 0b18 	vmov	r0, r1, d8
 800b6c6:	f7f4 ffa7 	bl	8000618 <__aeabi_dmul>
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	460d      	mov	r5, r1
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	f7f4 fde7 	bl	80002a8 <__aeabi_dsub>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4680      	mov	r8, r0
 800b6e0:	4689      	mov	r9, r1
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 fddf 	bl	80002a8 <__aeabi_dsub>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	f7f4 fddb 	bl	80002a8 <__aeabi_dsub>
 800b6f2:	a343      	add	r3, pc, #268	; (adr r3, 800b800 <__ieee754_rem_pio2+0x318>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	ec51 0b18 	vmov	r0, r1, d8
 800b700:	f7f4 ff8a 	bl	8000618 <__aeabi_dmul>
 800b704:	4622      	mov	r2, r4
 800b706:	462b      	mov	r3, r5
 800b708:	f7f4 fdce 	bl	80002a8 <__aeabi_dsub>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	4640      	mov	r0, r8
 800b716:	4649      	mov	r1, r9
 800b718:	f7f4 fdc6 	bl	80002a8 <__aeabi_dsub>
 800b71c:	9a03      	ldr	r2, [sp, #12]
 800b71e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	2b31      	cmp	r3, #49	; 0x31
 800b726:	dc24      	bgt.n	800b772 <__ieee754_rem_pio2+0x28a>
 800b728:	e9ca 0100 	strd	r0, r1, [sl]
 800b72c:	4646      	mov	r6, r8
 800b72e:	464f      	mov	r7, r9
 800b730:	e9da 8900 	ldrd	r8, r9, [sl]
 800b734:	4630      	mov	r0, r6
 800b736:	4642      	mov	r2, r8
 800b738:	464b      	mov	r3, r9
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f4 fdb4 	bl	80002a8 <__aeabi_dsub>
 800b740:	462b      	mov	r3, r5
 800b742:	4622      	mov	r2, r4
 800b744:	f7f4 fdb0 	bl	80002a8 <__aeabi_dsub>
 800b748:	9b02      	ldr	r3, [sp, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b750:	f6bf af0a 	bge.w	800b568 <__ieee754_rem_pio2+0x80>
 800b754:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b758:	f8ca 3004 	str.w	r3, [sl, #4]
 800b75c:	f8ca 8000 	str.w	r8, [sl]
 800b760:	f8ca 0008 	str.w	r0, [sl, #8]
 800b764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b768:	f8ca 300c 	str.w	r3, [sl, #12]
 800b76c:	f1cb 0b00 	rsb	fp, fp, #0
 800b770:	e6fa      	b.n	800b568 <__ieee754_rem_pio2+0x80>
 800b772:	a327      	add	r3, pc, #156	; (adr r3, 800b810 <__ieee754_rem_pio2+0x328>)
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	ec51 0b18 	vmov	r0, r1, d8
 800b77c:	f7f4 ff4c 	bl	8000618 <__aeabi_dmul>
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4640      	mov	r0, r8
 800b78a:	4649      	mov	r1, r9
 800b78c:	f7f4 fd8c 	bl	80002a8 <__aeabi_dsub>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	4640      	mov	r0, r8
 800b79a:	4649      	mov	r1, r9
 800b79c:	f7f4 fd84 	bl	80002a8 <__aeabi_dsub>
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	f7f4 fd80 	bl	80002a8 <__aeabi_dsub>
 800b7a8:	a31b      	add	r3, pc, #108	; (adr r3, 800b818 <__ieee754_rem_pio2+0x330>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	460d      	mov	r5, r1
 800b7b2:	ec51 0b18 	vmov	r0, r1, d8
 800b7b6:	f7f4 ff2f 	bl	8000618 <__aeabi_dmul>
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	462b      	mov	r3, r5
 800b7be:	f7f4 fd73 	bl	80002a8 <__aeabi_dsub>
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	460d      	mov	r5, r1
 800b7c6:	e75f      	b.n	800b688 <__ieee754_rem_pio2+0x1a0>
 800b7c8:	4b1b      	ldr	r3, [pc, #108]	; (800b838 <__ieee754_rem_pio2+0x350>)
 800b7ca:	4598      	cmp	r8, r3
 800b7cc:	dd36      	ble.n	800b83c <__ieee754_rem_pio2+0x354>
 800b7ce:	ee10 2a10 	vmov	r2, s0
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	f7f4 fd66 	bl	80002a8 <__aeabi_dsub>
 800b7dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7e0:	e9ca 0100 	strd	r0, r1, [sl]
 800b7e4:	e694      	b.n	800b510 <__ieee754_rem_pio2+0x28>
 800b7e6:	bf00      	nop
 800b7e8:	54400000 	.word	0x54400000
 800b7ec:	3ff921fb 	.word	0x3ff921fb
 800b7f0:	1a626331 	.word	0x1a626331
 800b7f4:	3dd0b461 	.word	0x3dd0b461
 800b7f8:	1a600000 	.word	0x1a600000
 800b7fc:	3dd0b461 	.word	0x3dd0b461
 800b800:	2e037073 	.word	0x2e037073
 800b804:	3ba3198a 	.word	0x3ba3198a
 800b808:	6dc9c883 	.word	0x6dc9c883
 800b80c:	3fe45f30 	.word	0x3fe45f30
 800b810:	2e000000 	.word	0x2e000000
 800b814:	3ba3198a 	.word	0x3ba3198a
 800b818:	252049c1 	.word	0x252049c1
 800b81c:	397b839a 	.word	0x397b839a
 800b820:	3fe921fb 	.word	0x3fe921fb
 800b824:	4002d97b 	.word	0x4002d97b
 800b828:	3ff921fb 	.word	0x3ff921fb
 800b82c:	413921fb 	.word	0x413921fb
 800b830:	3fe00000 	.word	0x3fe00000
 800b834:	0800e38c 	.word	0x0800e38c
 800b838:	7fefffff 	.word	0x7fefffff
 800b83c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b840:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b844:	ee10 0a10 	vmov	r0, s0
 800b848:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b84c:	ee10 6a10 	vmov	r6, s0
 800b850:	460f      	mov	r7, r1
 800b852:	f7f5 f991 	bl	8000b78 <__aeabi_d2iz>
 800b856:	f7f4 fe75 	bl	8000544 <__aeabi_i2d>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b866:	f7f4 fd1f 	bl	80002a8 <__aeabi_dsub>
 800b86a:	4b22      	ldr	r3, [pc, #136]	; (800b8f4 <__ieee754_rem_pio2+0x40c>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	f7f4 fed3 	bl	8000618 <__aeabi_dmul>
 800b872:	460f      	mov	r7, r1
 800b874:	4606      	mov	r6, r0
 800b876:	f7f5 f97f 	bl	8000b78 <__aeabi_d2iz>
 800b87a:	f7f4 fe63 	bl	8000544 <__aeabi_i2d>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b88a:	f7f4 fd0d 	bl	80002a8 <__aeabi_dsub>
 800b88e:	4b19      	ldr	r3, [pc, #100]	; (800b8f4 <__ieee754_rem_pio2+0x40c>)
 800b890:	2200      	movs	r2, #0
 800b892:	f7f4 fec1 	bl	8000618 <__aeabi_dmul>
 800b896:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b89a:	ad04      	add	r5, sp, #16
 800b89c:	f04f 0803 	mov.w	r8, #3
 800b8a0:	46a9      	mov	r9, r5
 800b8a2:	2600      	movs	r6, #0
 800b8a4:	2700      	movs	r7, #0
 800b8a6:	4632      	mov	r2, r6
 800b8a8:	463b      	mov	r3, r7
 800b8aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b8ae:	46c3      	mov	fp, r8
 800b8b0:	3d08      	subs	r5, #8
 800b8b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8b6:	f7f5 f917 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d1f3      	bne.n	800b8a6 <__ieee754_rem_pio2+0x3be>
 800b8be:	4b0e      	ldr	r3, [pc, #56]	; (800b8f8 <__ieee754_rem_pio2+0x410>)
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	465b      	mov	r3, fp
 800b8ca:	4651      	mov	r1, sl
 800b8cc:	4648      	mov	r0, r9
 800b8ce:	f000 f8df 	bl	800ba90 <__kernel_rem_pio2>
 800b8d2:	9b02      	ldr	r3, [sp, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	4683      	mov	fp, r0
 800b8d8:	f6bf ae46 	bge.w	800b568 <__ieee754_rem_pio2+0x80>
 800b8dc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b8e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8e4:	f8ca 3004 	str.w	r3, [sl, #4]
 800b8e8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b8ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8f0:	e73a      	b.n	800b768 <__ieee754_rem_pio2+0x280>
 800b8f2:	bf00      	nop
 800b8f4:	41700000 	.word	0x41700000
 800b8f8:	0800e40c 	.word	0x0800e40c
 800b8fc:	00000000 	.word	0x00000000

0800b900 <__kernel_cos>:
 800b900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	ec57 6b10 	vmov	r6, r7, d0
 800b908:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b90c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b910:	ed8d 1b00 	vstr	d1, [sp]
 800b914:	da07      	bge.n	800b926 <__kernel_cos+0x26>
 800b916:	ee10 0a10 	vmov	r0, s0
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f5 f92c 	bl	8000b78 <__aeabi_d2iz>
 800b920:	2800      	cmp	r0, #0
 800b922:	f000 8088 	beq.w	800ba36 <__kernel_cos+0x136>
 800b926:	4632      	mov	r2, r6
 800b928:	463b      	mov	r3, r7
 800b92a:	4630      	mov	r0, r6
 800b92c:	4639      	mov	r1, r7
 800b92e:	f7f4 fe73 	bl	8000618 <__aeabi_dmul>
 800b932:	4b51      	ldr	r3, [pc, #324]	; (800ba78 <__kernel_cos+0x178>)
 800b934:	2200      	movs	r2, #0
 800b936:	4604      	mov	r4, r0
 800b938:	460d      	mov	r5, r1
 800b93a:	f7f4 fe6d 	bl	8000618 <__aeabi_dmul>
 800b93e:	a340      	add	r3, pc, #256	; (adr r3, 800ba40 <__kernel_cos+0x140>)
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	4682      	mov	sl, r0
 800b946:	468b      	mov	fp, r1
 800b948:	4620      	mov	r0, r4
 800b94a:	4629      	mov	r1, r5
 800b94c:	f7f4 fe64 	bl	8000618 <__aeabi_dmul>
 800b950:	a33d      	add	r3, pc, #244	; (adr r3, 800ba48 <__kernel_cos+0x148>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fca9 	bl	80002ac <__adddf3>
 800b95a:	4622      	mov	r2, r4
 800b95c:	462b      	mov	r3, r5
 800b95e:	f7f4 fe5b 	bl	8000618 <__aeabi_dmul>
 800b962:	a33b      	add	r3, pc, #236	; (adr r3, 800ba50 <__kernel_cos+0x150>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fc9e 	bl	80002a8 <__aeabi_dsub>
 800b96c:	4622      	mov	r2, r4
 800b96e:	462b      	mov	r3, r5
 800b970:	f7f4 fe52 	bl	8000618 <__aeabi_dmul>
 800b974:	a338      	add	r3, pc, #224	; (adr r3, 800ba58 <__kernel_cos+0x158>)
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	f7f4 fc97 	bl	80002ac <__adddf3>
 800b97e:	4622      	mov	r2, r4
 800b980:	462b      	mov	r3, r5
 800b982:	f7f4 fe49 	bl	8000618 <__aeabi_dmul>
 800b986:	a336      	add	r3, pc, #216	; (adr r3, 800ba60 <__kernel_cos+0x160>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f4 fc8c 	bl	80002a8 <__aeabi_dsub>
 800b990:	4622      	mov	r2, r4
 800b992:	462b      	mov	r3, r5
 800b994:	f7f4 fe40 	bl	8000618 <__aeabi_dmul>
 800b998:	a333      	add	r3, pc, #204	; (adr r3, 800ba68 <__kernel_cos+0x168>)
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f7f4 fc85 	bl	80002ac <__adddf3>
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	462b      	mov	r3, r5
 800b9a6:	f7f4 fe37 	bl	8000618 <__aeabi_dmul>
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	f7f4 fe33 	bl	8000618 <__aeabi_dmul>
 800b9b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	460d      	mov	r5, r1
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4639      	mov	r1, r7
 800b9be:	f7f4 fe2b 	bl	8000618 <__aeabi_dmul>
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f7f4 fc6d 	bl	80002a8 <__aeabi_dsub>
 800b9ce:	4b2b      	ldr	r3, [pc, #172]	; (800ba7c <__kernel_cos+0x17c>)
 800b9d0:	4598      	cmp	r8, r3
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	dc10      	bgt.n	800b9fa <__kernel_cos+0xfa>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4650      	mov	r0, sl
 800b9de:	4659      	mov	r1, fp
 800b9e0:	f7f4 fc62 	bl	80002a8 <__aeabi_dsub>
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4926      	ldr	r1, [pc, #152]	; (800ba80 <__kernel_cos+0x180>)
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	f7f4 fc5c 	bl	80002a8 <__aeabi_dsub>
 800b9f0:	ec41 0b10 	vmov	d0, r0, r1
 800b9f4:	b003      	add	sp, #12
 800b9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9fa:	4b22      	ldr	r3, [pc, #136]	; (800ba84 <__kernel_cos+0x184>)
 800b9fc:	4920      	ldr	r1, [pc, #128]	; (800ba80 <__kernel_cos+0x180>)
 800b9fe:	4598      	cmp	r8, r3
 800ba00:	bfcc      	ite	gt
 800ba02:	4d21      	ldrgt	r5, [pc, #132]	; (800ba88 <__kernel_cos+0x188>)
 800ba04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ba08:	2400      	movs	r4, #0
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f7f4 fc4a 	bl	80002a8 <__aeabi_dsub>
 800ba14:	4622      	mov	r2, r4
 800ba16:	4680      	mov	r8, r0
 800ba18:	4689      	mov	r9, r1
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	4650      	mov	r0, sl
 800ba1e:	4659      	mov	r1, fp
 800ba20:	f7f4 fc42 	bl	80002a8 <__aeabi_dsub>
 800ba24:	4632      	mov	r2, r6
 800ba26:	463b      	mov	r3, r7
 800ba28:	f7f4 fc3e 	bl	80002a8 <__aeabi_dsub>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4640      	mov	r0, r8
 800ba32:	4649      	mov	r1, r9
 800ba34:	e7da      	b.n	800b9ec <__kernel_cos+0xec>
 800ba36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ba70 <__kernel_cos+0x170>
 800ba3a:	e7db      	b.n	800b9f4 <__kernel_cos+0xf4>
 800ba3c:	f3af 8000 	nop.w
 800ba40:	be8838d4 	.word	0xbe8838d4
 800ba44:	bda8fae9 	.word	0xbda8fae9
 800ba48:	bdb4b1c4 	.word	0xbdb4b1c4
 800ba4c:	3e21ee9e 	.word	0x3e21ee9e
 800ba50:	809c52ad 	.word	0x809c52ad
 800ba54:	3e927e4f 	.word	0x3e927e4f
 800ba58:	19cb1590 	.word	0x19cb1590
 800ba5c:	3efa01a0 	.word	0x3efa01a0
 800ba60:	16c15177 	.word	0x16c15177
 800ba64:	3f56c16c 	.word	0x3f56c16c
 800ba68:	5555554c 	.word	0x5555554c
 800ba6c:	3fa55555 	.word	0x3fa55555
 800ba70:	00000000 	.word	0x00000000
 800ba74:	3ff00000 	.word	0x3ff00000
 800ba78:	3fe00000 	.word	0x3fe00000
 800ba7c:	3fd33332 	.word	0x3fd33332
 800ba80:	3ff00000 	.word	0x3ff00000
 800ba84:	3fe90000 	.word	0x3fe90000
 800ba88:	3fd20000 	.word	0x3fd20000
 800ba8c:	00000000 	.word	0x00000000

0800ba90 <__kernel_rem_pio2>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	ed2d 8b02 	vpush	{d8}
 800ba98:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ba9c:	f112 0f14 	cmn.w	r2, #20
 800baa0:	9308      	str	r3, [sp, #32]
 800baa2:	9101      	str	r1, [sp, #4]
 800baa4:	4bc6      	ldr	r3, [pc, #792]	; (800bdc0 <__kernel_rem_pio2+0x330>)
 800baa6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800baa8:	9009      	str	r0, [sp, #36]	; 0x24
 800baaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800baae:	9304      	str	r3, [sp, #16]
 800bab0:	9b08      	ldr	r3, [sp, #32]
 800bab2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bab6:	bfa8      	it	ge
 800bab8:	1ed4      	subge	r4, r2, #3
 800baba:	9306      	str	r3, [sp, #24]
 800babc:	bfb2      	itee	lt
 800babe:	2400      	movlt	r4, #0
 800bac0:	2318      	movge	r3, #24
 800bac2:	fb94 f4f3 	sdivge	r4, r4, r3
 800bac6:	f06f 0317 	mvn.w	r3, #23
 800baca:	fb04 3303 	mla	r3, r4, r3, r3
 800bace:	eb03 0a02 	add.w	sl, r3, r2
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	9a06      	ldr	r2, [sp, #24]
 800bad6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bdb0 <__kernel_rem_pio2+0x320>
 800bada:	eb03 0802 	add.w	r8, r3, r2
 800bade:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bae0:	1aa7      	subs	r7, r4, r2
 800bae2:	ae20      	add	r6, sp, #128	; 0x80
 800bae4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bae8:	2500      	movs	r5, #0
 800baea:	4545      	cmp	r5, r8
 800baec:	dd18      	ble.n	800bb20 <__kernel_rem_pio2+0x90>
 800baee:	9b08      	ldr	r3, [sp, #32]
 800baf0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800baf4:	aa20      	add	r2, sp, #128	; 0x80
 800baf6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800bdb0 <__kernel_rem_pio2+0x320>
 800bafa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bafe:	f1c3 0301 	rsb	r3, r3, #1
 800bb02:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bb06:	9307      	str	r3, [sp, #28]
 800bb08:	9b07      	ldr	r3, [sp, #28]
 800bb0a:	9a04      	ldr	r2, [sp, #16]
 800bb0c:	4443      	add	r3, r8
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	db2f      	blt.n	800bb72 <__kernel_rem_pio2+0xe2>
 800bb12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bb16:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bb1a:	462f      	mov	r7, r5
 800bb1c:	2600      	movs	r6, #0
 800bb1e:	e01b      	b.n	800bb58 <__kernel_rem_pio2+0xc8>
 800bb20:	42ef      	cmn	r7, r5
 800bb22:	d407      	bmi.n	800bb34 <__kernel_rem_pio2+0xa4>
 800bb24:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bb28:	f7f4 fd0c 	bl	8000544 <__aeabi_i2d>
 800bb2c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bb30:	3501      	adds	r5, #1
 800bb32:	e7da      	b.n	800baea <__kernel_rem_pio2+0x5a>
 800bb34:	ec51 0b18 	vmov	r0, r1, d8
 800bb38:	e7f8      	b.n	800bb2c <__kernel_rem_pio2+0x9c>
 800bb3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb3e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bb42:	f7f4 fd69 	bl	8000618 <__aeabi_dmul>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb4e:	f7f4 fbad 	bl	80002ac <__adddf3>
 800bb52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb56:	3601      	adds	r6, #1
 800bb58:	9b06      	ldr	r3, [sp, #24]
 800bb5a:	429e      	cmp	r6, r3
 800bb5c:	f1a7 0708 	sub.w	r7, r7, #8
 800bb60:	ddeb      	ble.n	800bb3a <__kernel_rem_pio2+0xaa>
 800bb62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb66:	3508      	adds	r5, #8
 800bb68:	ecab 7b02 	vstmia	fp!, {d7}
 800bb6c:	f108 0801 	add.w	r8, r8, #1
 800bb70:	e7ca      	b.n	800bb08 <__kernel_rem_pio2+0x78>
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	aa0c      	add	r2, sp, #48	; 0x30
 800bb76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb7c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bb7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb82:	9c04      	ldr	r4, [sp, #16]
 800bb84:	930a      	str	r3, [sp, #40]	; 0x28
 800bb86:	ab98      	add	r3, sp, #608	; 0x260
 800bb88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb8c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bb90:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800bb94:	f8cd b008 	str.w	fp, [sp, #8]
 800bb98:	4625      	mov	r5, r4
 800bb9a:	2d00      	cmp	r5, #0
 800bb9c:	dc78      	bgt.n	800bc90 <__kernel_rem_pio2+0x200>
 800bb9e:	ec47 6b10 	vmov	d0, r6, r7
 800bba2:	4650      	mov	r0, sl
 800bba4:	f000 fbfc 	bl	800c3a0 <scalbn>
 800bba8:	ec57 6b10 	vmov	r6, r7, d0
 800bbac:	2200      	movs	r2, #0
 800bbae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bbb2:	ee10 0a10 	vmov	r0, s0
 800bbb6:	4639      	mov	r1, r7
 800bbb8:	f7f4 fd2e 	bl	8000618 <__aeabi_dmul>
 800bbbc:	ec41 0b10 	vmov	d0, r0, r1
 800bbc0:	f000 fb6e 	bl	800c2a0 <floor>
 800bbc4:	4b7f      	ldr	r3, [pc, #508]	; (800bdc4 <__kernel_rem_pio2+0x334>)
 800bbc6:	ec51 0b10 	vmov	r0, r1, d0
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f7f4 fd24 	bl	8000618 <__aeabi_dmul>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 fb66 	bl	80002a8 <__aeabi_dsub>
 800bbdc:	460f      	mov	r7, r1
 800bbde:	4606      	mov	r6, r0
 800bbe0:	f7f4 ffca 	bl	8000b78 <__aeabi_d2iz>
 800bbe4:	9007      	str	r0, [sp, #28]
 800bbe6:	f7f4 fcad 	bl	8000544 <__aeabi_i2d>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4630      	mov	r0, r6
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	f7f4 fb59 	bl	80002a8 <__aeabi_dsub>
 800bbf6:	f1ba 0f00 	cmp.w	sl, #0
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	dd70      	ble.n	800bce2 <__kernel_rem_pio2+0x252>
 800bc00:	1e62      	subs	r2, r4, #1
 800bc02:	ab0c      	add	r3, sp, #48	; 0x30
 800bc04:	9d07      	ldr	r5, [sp, #28]
 800bc06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc0a:	f1ca 0118 	rsb	r1, sl, #24
 800bc0e:	fa40 f301 	asr.w	r3, r0, r1
 800bc12:	441d      	add	r5, r3
 800bc14:	408b      	lsls	r3, r1
 800bc16:	1ac0      	subs	r0, r0, r3
 800bc18:	ab0c      	add	r3, sp, #48	; 0x30
 800bc1a:	9507      	str	r5, [sp, #28]
 800bc1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bc20:	f1ca 0317 	rsb	r3, sl, #23
 800bc24:	fa40 f303 	asr.w	r3, r0, r3
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	9b02      	ldr	r3, [sp, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dd66      	ble.n	800bcfe <__kernel_rem_pio2+0x26e>
 800bc30:	9b07      	ldr	r3, [sp, #28]
 800bc32:	2200      	movs	r2, #0
 800bc34:	3301      	adds	r3, #1
 800bc36:	9307      	str	r3, [sp, #28]
 800bc38:	4615      	mov	r5, r2
 800bc3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bc3e:	4294      	cmp	r4, r2
 800bc40:	f300 8099 	bgt.w	800bd76 <__kernel_rem_pio2+0x2e6>
 800bc44:	f1ba 0f00 	cmp.w	sl, #0
 800bc48:	dd07      	ble.n	800bc5a <__kernel_rem_pio2+0x1ca>
 800bc4a:	f1ba 0f01 	cmp.w	sl, #1
 800bc4e:	f000 80a5 	beq.w	800bd9c <__kernel_rem_pio2+0x30c>
 800bc52:	f1ba 0f02 	cmp.w	sl, #2
 800bc56:	f000 80c1 	beq.w	800bddc <__kernel_rem_pio2+0x34c>
 800bc5a:	9b02      	ldr	r3, [sp, #8]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d14e      	bne.n	800bcfe <__kernel_rem_pio2+0x26e>
 800bc60:	4632      	mov	r2, r6
 800bc62:	463b      	mov	r3, r7
 800bc64:	4958      	ldr	r1, [pc, #352]	; (800bdc8 <__kernel_rem_pio2+0x338>)
 800bc66:	2000      	movs	r0, #0
 800bc68:	f7f4 fb1e 	bl	80002a8 <__aeabi_dsub>
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	2d00      	cmp	r5, #0
 800bc72:	d044      	beq.n	800bcfe <__kernel_rem_pio2+0x26e>
 800bc74:	4650      	mov	r0, sl
 800bc76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bdb8 <__kernel_rem_pio2+0x328>
 800bc7a:	f000 fb91 	bl	800c3a0 <scalbn>
 800bc7e:	4630      	mov	r0, r6
 800bc80:	4639      	mov	r1, r7
 800bc82:	ec53 2b10 	vmov	r2, r3, d0
 800bc86:	f7f4 fb0f 	bl	80002a8 <__aeabi_dsub>
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	e036      	b.n	800bcfe <__kernel_rem_pio2+0x26e>
 800bc90:	4b4e      	ldr	r3, [pc, #312]	; (800bdcc <__kernel_rem_pio2+0x33c>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	4630      	mov	r0, r6
 800bc96:	4639      	mov	r1, r7
 800bc98:	f7f4 fcbe 	bl	8000618 <__aeabi_dmul>
 800bc9c:	f7f4 ff6c 	bl	8000b78 <__aeabi_d2iz>
 800bca0:	f7f4 fc50 	bl	8000544 <__aeabi_i2d>
 800bca4:	4b4a      	ldr	r3, [pc, #296]	; (800bdd0 <__kernel_rem_pio2+0x340>)
 800bca6:	2200      	movs	r2, #0
 800bca8:	4680      	mov	r8, r0
 800bcaa:	4689      	mov	r9, r1
 800bcac:	f7f4 fcb4 	bl	8000618 <__aeabi_dmul>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	f7f4 faf6 	bl	80002a8 <__aeabi_dsub>
 800bcbc:	f7f4 ff5c 	bl	8000b78 <__aeabi_d2iz>
 800bcc0:	9b02      	ldr	r3, [sp, #8]
 800bcc2:	f843 0b04 	str.w	r0, [r3], #4
 800bcc6:	3d01      	subs	r5, #1
 800bcc8:	9302      	str	r3, [sp, #8]
 800bcca:	ab70      	add	r3, sp, #448	; 0x1c0
 800bccc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	4649      	mov	r1, r9
 800bcd8:	f7f4 fae8 	bl	80002ac <__adddf3>
 800bcdc:	4606      	mov	r6, r0
 800bcde:	460f      	mov	r7, r1
 800bce0:	e75b      	b.n	800bb9a <__kernel_rem_pio2+0x10a>
 800bce2:	d105      	bne.n	800bcf0 <__kernel_rem_pio2+0x260>
 800bce4:	1e63      	subs	r3, r4, #1
 800bce6:	aa0c      	add	r2, sp, #48	; 0x30
 800bce8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bcec:	15c3      	asrs	r3, r0, #23
 800bcee:	e79b      	b.n	800bc28 <__kernel_rem_pio2+0x198>
 800bcf0:	4b38      	ldr	r3, [pc, #224]	; (800bdd4 <__kernel_rem_pio2+0x344>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f7f4 ff16 	bl	8000b24 <__aeabi_dcmpge>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d139      	bne.n	800bd70 <__kernel_rem_pio2+0x2e0>
 800bcfc:	9002      	str	r0, [sp, #8]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2300      	movs	r3, #0
 800bd02:	4630      	mov	r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 feef 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	f000 80b4 	beq.w	800be78 <__kernel_rem_pio2+0x3e8>
 800bd10:	f104 3bff 	add.w	fp, r4, #4294967295
 800bd14:	465b      	mov	r3, fp
 800bd16:	2200      	movs	r2, #0
 800bd18:	9904      	ldr	r1, [sp, #16]
 800bd1a:	428b      	cmp	r3, r1
 800bd1c:	da65      	bge.n	800bdea <__kernel_rem_pio2+0x35a>
 800bd1e:	2a00      	cmp	r2, #0
 800bd20:	d07b      	beq.n	800be1a <__kernel_rem_pio2+0x38a>
 800bd22:	ab0c      	add	r3, sp, #48	; 0x30
 800bd24:	f1aa 0a18 	sub.w	sl, sl, #24
 800bd28:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f000 80a0 	beq.w	800be72 <__kernel_rem_pio2+0x3e2>
 800bd32:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800bdb8 <__kernel_rem_pio2+0x328>
 800bd36:	4650      	mov	r0, sl
 800bd38:	f000 fb32 	bl	800c3a0 <scalbn>
 800bd3c:	4f23      	ldr	r7, [pc, #140]	; (800bdcc <__kernel_rem_pio2+0x33c>)
 800bd3e:	ec55 4b10 	vmov	r4, r5, d0
 800bd42:	46d8      	mov	r8, fp
 800bd44:	2600      	movs	r6, #0
 800bd46:	f1b8 0f00 	cmp.w	r8, #0
 800bd4a:	f280 80cf 	bge.w	800beec <__kernel_rem_pio2+0x45c>
 800bd4e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800bdb0 <__kernel_rem_pio2+0x320>
 800bd52:	465f      	mov	r7, fp
 800bd54:	f04f 0800 	mov.w	r8, #0
 800bd58:	2f00      	cmp	r7, #0
 800bd5a:	f2c0 80fd 	blt.w	800bf58 <__kernel_rem_pio2+0x4c8>
 800bd5e:	ab70      	add	r3, sp, #448	; 0x1c0
 800bd60:	f8df a074 	ldr.w	sl, [pc, #116]	; 800bdd8 <__kernel_rem_pio2+0x348>
 800bd64:	ec55 4b18 	vmov	r4, r5, d8
 800bd68:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	e0e5      	b.n	800bf3c <__kernel_rem_pio2+0x4ac>
 800bd70:	2302      	movs	r3, #2
 800bd72:	9302      	str	r3, [sp, #8]
 800bd74:	e75c      	b.n	800bc30 <__kernel_rem_pio2+0x1a0>
 800bd76:	f8db 3000 	ldr.w	r3, [fp]
 800bd7a:	b955      	cbnz	r5, 800bd92 <__kernel_rem_pio2+0x302>
 800bd7c:	b123      	cbz	r3, 800bd88 <__kernel_rem_pio2+0x2f8>
 800bd7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bd82:	f8cb 3000 	str.w	r3, [fp]
 800bd86:	2301      	movs	r3, #1
 800bd88:	3201      	adds	r2, #1
 800bd8a:	f10b 0b04 	add.w	fp, fp, #4
 800bd8e:	461d      	mov	r5, r3
 800bd90:	e755      	b.n	800bc3e <__kernel_rem_pio2+0x1ae>
 800bd92:	1acb      	subs	r3, r1, r3
 800bd94:	f8cb 3000 	str.w	r3, [fp]
 800bd98:	462b      	mov	r3, r5
 800bd9a:	e7f5      	b.n	800bd88 <__kernel_rem_pio2+0x2f8>
 800bd9c:	1e62      	subs	r2, r4, #1
 800bd9e:	ab0c      	add	r3, sp, #48	; 0x30
 800bda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bda8:	a90c      	add	r1, sp, #48	; 0x30
 800bdaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bdae:	e754      	b.n	800bc5a <__kernel_rem_pio2+0x1ca>
	...
 800bdbc:	3ff00000 	.word	0x3ff00000
 800bdc0:	0800e558 	.word	0x0800e558
 800bdc4:	40200000 	.word	0x40200000
 800bdc8:	3ff00000 	.word	0x3ff00000
 800bdcc:	3e700000 	.word	0x3e700000
 800bdd0:	41700000 	.word	0x41700000
 800bdd4:	3fe00000 	.word	0x3fe00000
 800bdd8:	0800e518 	.word	0x0800e518
 800bddc:	1e62      	subs	r2, r4, #1
 800bdde:	ab0c      	add	r3, sp, #48	; 0x30
 800bde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bde8:	e7de      	b.n	800bda8 <__kernel_rem_pio2+0x318>
 800bdea:	a90c      	add	r1, sp, #48	; 0x30
 800bdec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	e790      	b.n	800bd18 <__kernel_rem_pio2+0x288>
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bdfc:	2900      	cmp	r1, #0
 800bdfe:	d0fa      	beq.n	800bdf6 <__kernel_rem_pio2+0x366>
 800be00:	9a08      	ldr	r2, [sp, #32]
 800be02:	18e3      	adds	r3, r4, r3
 800be04:	18a6      	adds	r6, r4, r2
 800be06:	aa20      	add	r2, sp, #128	; 0x80
 800be08:	1c65      	adds	r5, r4, #1
 800be0a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800be0e:	9302      	str	r3, [sp, #8]
 800be10:	9b02      	ldr	r3, [sp, #8]
 800be12:	42ab      	cmp	r3, r5
 800be14:	da04      	bge.n	800be20 <__kernel_rem_pio2+0x390>
 800be16:	461c      	mov	r4, r3
 800be18:	e6b5      	b.n	800bb86 <__kernel_rem_pio2+0xf6>
 800be1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be1c:	2301      	movs	r3, #1
 800be1e:	e7eb      	b.n	800bdf8 <__kernel_rem_pio2+0x368>
 800be20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be26:	f7f4 fb8d 	bl	8000544 <__aeabi_i2d>
 800be2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800be2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be30:	46b3      	mov	fp, r6
 800be32:	461c      	mov	r4, r3
 800be34:	2700      	movs	r7, #0
 800be36:	f04f 0800 	mov.w	r8, #0
 800be3a:	f04f 0900 	mov.w	r9, #0
 800be3e:	9b06      	ldr	r3, [sp, #24]
 800be40:	429f      	cmp	r7, r3
 800be42:	dd06      	ble.n	800be52 <__kernel_rem_pio2+0x3c2>
 800be44:	ab70      	add	r3, sp, #448	; 0x1c0
 800be46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be4a:	e9c3 8900 	strd	r8, r9, [r3]
 800be4e:	3501      	adds	r5, #1
 800be50:	e7de      	b.n	800be10 <__kernel_rem_pio2+0x380>
 800be52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800be56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800be5a:	f7f4 fbdd 	bl	8000618 <__aeabi_dmul>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4640      	mov	r0, r8
 800be64:	4649      	mov	r1, r9
 800be66:	f7f4 fa21 	bl	80002ac <__adddf3>
 800be6a:	3701      	adds	r7, #1
 800be6c:	4680      	mov	r8, r0
 800be6e:	4689      	mov	r9, r1
 800be70:	e7e5      	b.n	800be3e <__kernel_rem_pio2+0x3ae>
 800be72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be76:	e754      	b.n	800bd22 <__kernel_rem_pio2+0x292>
 800be78:	ec47 6b10 	vmov	d0, r6, r7
 800be7c:	f1ca 0000 	rsb	r0, sl, #0
 800be80:	f000 fa8e 	bl	800c3a0 <scalbn>
 800be84:	ec57 6b10 	vmov	r6, r7, d0
 800be88:	4b9f      	ldr	r3, [pc, #636]	; (800c108 <__kernel_rem_pio2+0x678>)
 800be8a:	ee10 0a10 	vmov	r0, s0
 800be8e:	2200      	movs	r2, #0
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 fe47 	bl	8000b24 <__aeabi_dcmpge>
 800be96:	b300      	cbz	r0, 800beda <__kernel_rem_pio2+0x44a>
 800be98:	4b9c      	ldr	r3, [pc, #624]	; (800c10c <__kernel_rem_pio2+0x67c>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f7f4 fbba 	bl	8000618 <__aeabi_dmul>
 800bea4:	f7f4 fe68 	bl	8000b78 <__aeabi_d2iz>
 800bea8:	4605      	mov	r5, r0
 800beaa:	f7f4 fb4b 	bl	8000544 <__aeabi_i2d>
 800beae:	4b96      	ldr	r3, [pc, #600]	; (800c108 <__kernel_rem_pio2+0x678>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	f7f4 fbb1 	bl	8000618 <__aeabi_dmul>
 800beb6:	460b      	mov	r3, r1
 800beb8:	4602      	mov	r2, r0
 800beba:	4639      	mov	r1, r7
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7f4 f9f3 	bl	80002a8 <__aeabi_dsub>
 800bec2:	f7f4 fe59 	bl	8000b78 <__aeabi_d2iz>
 800bec6:	f104 0b01 	add.w	fp, r4, #1
 800beca:	ab0c      	add	r3, sp, #48	; 0x30
 800becc:	f10a 0a18 	add.w	sl, sl, #24
 800bed0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bed4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800bed8:	e72b      	b.n	800bd32 <__kernel_rem_pio2+0x2a2>
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 fe4b 	bl	8000b78 <__aeabi_d2iz>
 800bee2:	ab0c      	add	r3, sp, #48	; 0x30
 800bee4:	46a3      	mov	fp, r4
 800bee6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800beea:	e722      	b.n	800bd32 <__kernel_rem_pio2+0x2a2>
 800beec:	ab70      	add	r3, sp, #448	; 0x1c0
 800beee:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800bef2:	ab0c      	add	r3, sp, #48	; 0x30
 800bef4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bef8:	f7f4 fb24 	bl	8000544 <__aeabi_i2d>
 800befc:	4622      	mov	r2, r4
 800befe:	462b      	mov	r3, r5
 800bf00:	f7f4 fb8a 	bl	8000618 <__aeabi_dmul>
 800bf04:	4632      	mov	r2, r6
 800bf06:	e9c9 0100 	strd	r0, r1, [r9]
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	f7f4 fb82 	bl	8000618 <__aeabi_dmul>
 800bf14:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf18:	4604      	mov	r4, r0
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	e713      	b.n	800bd46 <__kernel_rem_pio2+0x2b6>
 800bf1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bf22:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bf26:	f7f4 fb77 	bl	8000618 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 f9bb 	bl	80002ac <__adddf3>
 800bf36:	3601      	adds	r6, #1
 800bf38:	4604      	mov	r4, r0
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	9b04      	ldr	r3, [sp, #16]
 800bf3e:	429e      	cmp	r6, r3
 800bf40:	dc01      	bgt.n	800bf46 <__kernel_rem_pio2+0x4b6>
 800bf42:	45b0      	cmp	r8, r6
 800bf44:	daeb      	bge.n	800bf1e <__kernel_rem_pio2+0x48e>
 800bf46:	ab48      	add	r3, sp, #288	; 0x120
 800bf48:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bf4c:	e9c3 4500 	strd	r4, r5, [r3]
 800bf50:	3f01      	subs	r7, #1
 800bf52:	f108 0801 	add.w	r8, r8, #1
 800bf56:	e6ff      	b.n	800bd58 <__kernel_rem_pio2+0x2c8>
 800bf58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	dc0b      	bgt.n	800bf76 <__kernel_rem_pio2+0x4e6>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	dc6e      	bgt.n	800c040 <__kernel_rem_pio2+0x5b0>
 800bf62:	d045      	beq.n	800bff0 <__kernel_rem_pio2+0x560>
 800bf64:	9b07      	ldr	r3, [sp, #28]
 800bf66:	f003 0007 	and.w	r0, r3, #7
 800bf6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bf6e:	ecbd 8b02 	vpop	{d8}
 800bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d1f3      	bne.n	800bf64 <__kernel_rem_pio2+0x4d4>
 800bf7c:	ab48      	add	r3, sp, #288	; 0x120
 800bf7e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800bf82:	46d0      	mov	r8, sl
 800bf84:	46d9      	mov	r9, fp
 800bf86:	f1b9 0f00 	cmp.w	r9, #0
 800bf8a:	f1a8 0808 	sub.w	r8, r8, #8
 800bf8e:	dc64      	bgt.n	800c05a <__kernel_rem_pio2+0x5ca>
 800bf90:	465c      	mov	r4, fp
 800bf92:	2c01      	cmp	r4, #1
 800bf94:	f1aa 0a08 	sub.w	sl, sl, #8
 800bf98:	dc7e      	bgt.n	800c098 <__kernel_rem_pio2+0x608>
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	f1bb 0f01 	cmp.w	fp, #1
 800bfa2:	f300 8097 	bgt.w	800c0d4 <__kernel_rem_pio2+0x644>
 800bfa6:	9b02      	ldr	r3, [sp, #8]
 800bfa8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800bfac:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f040 8099 	bne.w	800c0e8 <__kernel_rem_pio2+0x658>
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	e9c3 5600 	strd	r5, r6, [r3]
 800bfbc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bfc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bfc4:	e7ce      	b.n	800bf64 <__kernel_rem_pio2+0x4d4>
 800bfc6:	ab48      	add	r3, sp, #288	; 0x120
 800bfc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd0:	f7f4 f96c 	bl	80002ac <__adddf3>
 800bfd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bfd8:	f1bb 0f00 	cmp.w	fp, #0
 800bfdc:	daf3      	bge.n	800bfc6 <__kernel_rem_pio2+0x536>
 800bfde:	9b02      	ldr	r3, [sp, #8]
 800bfe0:	b113      	cbz	r3, 800bfe8 <__kernel_rem_pio2+0x558>
 800bfe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	e9c3 0100 	strd	r0, r1, [r3]
 800bfee:	e7b9      	b.n	800bf64 <__kernel_rem_pio2+0x4d4>
 800bff0:	2000      	movs	r0, #0
 800bff2:	2100      	movs	r1, #0
 800bff4:	e7f0      	b.n	800bfd8 <__kernel_rem_pio2+0x548>
 800bff6:	ab48      	add	r3, sp, #288	; 0x120
 800bff8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f7f4 f954 	bl	80002ac <__adddf3>
 800c004:	3c01      	subs	r4, #1
 800c006:	2c00      	cmp	r4, #0
 800c008:	daf5      	bge.n	800bff6 <__kernel_rem_pio2+0x566>
 800c00a:	9b02      	ldr	r3, [sp, #8]
 800c00c:	b1e3      	cbz	r3, 800c048 <__kernel_rem_pio2+0x5b8>
 800c00e:	4602      	mov	r2, r0
 800c010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c014:	9c01      	ldr	r4, [sp, #4]
 800c016:	e9c4 2300 	strd	r2, r3, [r4]
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c022:	f7f4 f941 	bl	80002a8 <__aeabi_dsub>
 800c026:	ad4a      	add	r5, sp, #296	; 0x128
 800c028:	2401      	movs	r4, #1
 800c02a:	45a3      	cmp	fp, r4
 800c02c:	da0f      	bge.n	800c04e <__kernel_rem_pio2+0x5be>
 800c02e:	9b02      	ldr	r3, [sp, #8]
 800c030:	b113      	cbz	r3, 800c038 <__kernel_rem_pio2+0x5a8>
 800c032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c036:	4619      	mov	r1, r3
 800c038:	9b01      	ldr	r3, [sp, #4]
 800c03a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c03e:	e791      	b.n	800bf64 <__kernel_rem_pio2+0x4d4>
 800c040:	465c      	mov	r4, fp
 800c042:	2000      	movs	r0, #0
 800c044:	2100      	movs	r1, #0
 800c046:	e7de      	b.n	800c006 <__kernel_rem_pio2+0x576>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	e7e2      	b.n	800c014 <__kernel_rem_pio2+0x584>
 800c04e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c052:	f7f4 f92b 	bl	80002ac <__adddf3>
 800c056:	3401      	adds	r4, #1
 800c058:	e7e7      	b.n	800c02a <__kernel_rem_pio2+0x59a>
 800c05a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c05e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c062:	4620      	mov	r0, r4
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	4629      	mov	r1, r5
 800c06a:	f7f4 f91f 	bl	80002ac <__adddf3>
 800c06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	4620      	mov	r0, r4
 800c078:	4629      	mov	r1, r5
 800c07a:	f7f4 f915 	bl	80002a8 <__aeabi_dsub>
 800c07e:	4632      	mov	r2, r6
 800c080:	463b      	mov	r3, r7
 800c082:	f7f4 f913 	bl	80002ac <__adddf3>
 800c086:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c08a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c08e:	ed88 7b00 	vstr	d7, [r8]
 800c092:	f109 39ff 	add.w	r9, r9, #4294967295
 800c096:	e776      	b.n	800bf86 <__kernel_rem_pio2+0x4f6>
 800c098:	e9da 8900 	ldrd	r8, r9, [sl]
 800c09c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c0a0:	4640      	mov	r0, r8
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	463b      	mov	r3, r7
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	f7f4 f900 	bl	80002ac <__adddf3>
 800c0ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	4649      	mov	r1, r9
 800c0b8:	f7f4 f8f6 	bl	80002a8 <__aeabi_dsub>
 800c0bc:	4632      	mov	r2, r6
 800c0be:	463b      	mov	r3, r7
 800c0c0:	f7f4 f8f4 	bl	80002ac <__adddf3>
 800c0c4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c0c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c0cc:	ed8a 7b00 	vstr	d7, [sl]
 800c0d0:	3c01      	subs	r4, #1
 800c0d2:	e75e      	b.n	800bf92 <__kernel_rem_pio2+0x502>
 800c0d4:	ab48      	add	r3, sp, #288	; 0x120
 800c0d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f7f4 f8e5 	bl	80002ac <__adddf3>
 800c0e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0e6:	e75a      	b.n	800bf9e <__kernel_rem_pio2+0x50e>
 800c0e8:	9b01      	ldr	r3, [sp, #4]
 800c0ea:	9a01      	ldr	r2, [sp, #4]
 800c0ec:	601d      	str	r5, [r3, #0]
 800c0ee:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c0f2:	605c      	str	r4, [r3, #4]
 800c0f4:	609f      	str	r7, [r3, #8]
 800c0f6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c0fa:	60d3      	str	r3, [r2, #12]
 800c0fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c100:	6110      	str	r0, [r2, #16]
 800c102:	6153      	str	r3, [r2, #20]
 800c104:	e72e      	b.n	800bf64 <__kernel_rem_pio2+0x4d4>
 800c106:	bf00      	nop
 800c108:	41700000 	.word	0x41700000
 800c10c:	3e700000 	.word	0x3e700000

0800c110 <__kernel_sin>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8b04 	vpush	{d8-d9}
 800c118:	eeb0 8a41 	vmov.f32	s16, s2
 800c11c:	eef0 8a61 	vmov.f32	s17, s3
 800c120:	ec55 4b10 	vmov	r4, r5, d0
 800c124:	b083      	sub	sp, #12
 800c126:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c12a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c12e:	9001      	str	r0, [sp, #4]
 800c130:	da06      	bge.n	800c140 <__kernel_sin+0x30>
 800c132:	ee10 0a10 	vmov	r0, s0
 800c136:	4629      	mov	r1, r5
 800c138:	f7f4 fd1e 	bl	8000b78 <__aeabi_d2iz>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d051      	beq.n	800c1e4 <__kernel_sin+0xd4>
 800c140:	4622      	mov	r2, r4
 800c142:	462b      	mov	r3, r5
 800c144:	4620      	mov	r0, r4
 800c146:	4629      	mov	r1, r5
 800c148:	f7f4 fa66 	bl	8000618 <__aeabi_dmul>
 800c14c:	4682      	mov	sl, r0
 800c14e:	468b      	mov	fp, r1
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4620      	mov	r0, r4
 800c156:	4629      	mov	r1, r5
 800c158:	f7f4 fa5e 	bl	8000618 <__aeabi_dmul>
 800c15c:	a341      	add	r3, pc, #260	; (adr r3, 800c264 <__kernel_sin+0x154>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	4680      	mov	r8, r0
 800c164:	4689      	mov	r9, r1
 800c166:	4650      	mov	r0, sl
 800c168:	4659      	mov	r1, fp
 800c16a:	f7f4 fa55 	bl	8000618 <__aeabi_dmul>
 800c16e:	a33f      	add	r3, pc, #252	; (adr r3, 800c26c <__kernel_sin+0x15c>)
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	f7f4 f898 	bl	80002a8 <__aeabi_dsub>
 800c178:	4652      	mov	r2, sl
 800c17a:	465b      	mov	r3, fp
 800c17c:	f7f4 fa4c 	bl	8000618 <__aeabi_dmul>
 800c180:	a33c      	add	r3, pc, #240	; (adr r3, 800c274 <__kernel_sin+0x164>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	f7f4 f891 	bl	80002ac <__adddf3>
 800c18a:	4652      	mov	r2, sl
 800c18c:	465b      	mov	r3, fp
 800c18e:	f7f4 fa43 	bl	8000618 <__aeabi_dmul>
 800c192:	a33a      	add	r3, pc, #232	; (adr r3, 800c27c <__kernel_sin+0x16c>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f7f4 f886 	bl	80002a8 <__aeabi_dsub>
 800c19c:	4652      	mov	r2, sl
 800c19e:	465b      	mov	r3, fp
 800c1a0:	f7f4 fa3a 	bl	8000618 <__aeabi_dmul>
 800c1a4:	a337      	add	r3, pc, #220	; (adr r3, 800c284 <__kernel_sin+0x174>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f7f4 f87f 	bl	80002ac <__adddf3>
 800c1ae:	9b01      	ldr	r3, [sp, #4]
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	460f      	mov	r7, r1
 800c1b4:	b9eb      	cbnz	r3, 800c1f2 <__kernel_sin+0xe2>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4650      	mov	r0, sl
 800c1bc:	4659      	mov	r1, fp
 800c1be:	f7f4 fa2b 	bl	8000618 <__aeabi_dmul>
 800c1c2:	a325      	add	r3, pc, #148	; (adr r3, 800c258 <__kernel_sin+0x148>)
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	f7f4 f86e 	bl	80002a8 <__aeabi_dsub>
 800c1cc:	4642      	mov	r2, r8
 800c1ce:	464b      	mov	r3, r9
 800c1d0:	f7f4 fa22 	bl	8000618 <__aeabi_dmul>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7f4 f866 	bl	80002ac <__adddf3>
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	ec45 4b10 	vmov	d0, r4, r5
 800c1e8:	b003      	add	sp, #12
 800c1ea:	ecbd 8b04 	vpop	{d8-d9}
 800c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f2:	4b1b      	ldr	r3, [pc, #108]	; (800c260 <__kernel_sin+0x150>)
 800c1f4:	ec51 0b18 	vmov	r0, r1, d8
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f7f4 fa0d 	bl	8000618 <__aeabi_dmul>
 800c1fe:	4632      	mov	r2, r6
 800c200:	ec41 0b19 	vmov	d9, r0, r1
 800c204:	463b      	mov	r3, r7
 800c206:	4640      	mov	r0, r8
 800c208:	4649      	mov	r1, r9
 800c20a:	f7f4 fa05 	bl	8000618 <__aeabi_dmul>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	ec51 0b19 	vmov	r0, r1, d9
 800c216:	f7f4 f847 	bl	80002a8 <__aeabi_dsub>
 800c21a:	4652      	mov	r2, sl
 800c21c:	465b      	mov	r3, fp
 800c21e:	f7f4 f9fb 	bl	8000618 <__aeabi_dmul>
 800c222:	ec53 2b18 	vmov	r2, r3, d8
 800c226:	f7f4 f83f 	bl	80002a8 <__aeabi_dsub>
 800c22a:	a30b      	add	r3, pc, #44	; (adr r3, 800c258 <__kernel_sin+0x148>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	4606      	mov	r6, r0
 800c232:	460f      	mov	r7, r1
 800c234:	4640      	mov	r0, r8
 800c236:	4649      	mov	r1, r9
 800c238:	f7f4 f9ee 	bl	8000618 <__aeabi_dmul>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	4630      	mov	r0, r6
 800c242:	4639      	mov	r1, r7
 800c244:	f7f4 f832 	bl	80002ac <__adddf3>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4620      	mov	r0, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f4 f82a 	bl	80002a8 <__aeabi_dsub>
 800c254:	e7c4      	b.n	800c1e0 <__kernel_sin+0xd0>
 800c256:	bf00      	nop
 800c258:	55555549 	.word	0x55555549
 800c25c:	3fc55555 	.word	0x3fc55555
 800c260:	3fe00000 	.word	0x3fe00000
 800c264:	5acfd57c 	.word	0x5acfd57c
 800c268:	3de5d93a 	.word	0x3de5d93a
 800c26c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c270:	3e5ae5e6 	.word	0x3e5ae5e6
 800c274:	57b1fe7d 	.word	0x57b1fe7d
 800c278:	3ec71de3 	.word	0x3ec71de3
 800c27c:	19c161d5 	.word	0x19c161d5
 800c280:	3f2a01a0 	.word	0x3f2a01a0
 800c284:	1110f8a6 	.word	0x1110f8a6
 800c288:	3f811111 	.word	0x3f811111

0800c28c <fabs>:
 800c28c:	ec51 0b10 	vmov	r0, r1, d0
 800c290:	ee10 2a10 	vmov	r2, s0
 800c294:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c298:	ec43 2b10 	vmov	d0, r2, r3
 800c29c:	4770      	bx	lr
	...

0800c2a0 <floor>:
 800c2a0:	ec51 0b10 	vmov	r0, r1, d0
 800c2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c2ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c2b0:	2e13      	cmp	r6, #19
 800c2b2:	ee10 5a10 	vmov	r5, s0
 800c2b6:	ee10 8a10 	vmov	r8, s0
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	dc32      	bgt.n	800c324 <floor+0x84>
 800c2be:	2e00      	cmp	r6, #0
 800c2c0:	da14      	bge.n	800c2ec <floor+0x4c>
 800c2c2:	a333      	add	r3, pc, #204	; (adr r3, 800c390 <floor+0xf0>)
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	f7f3 fff0 	bl	80002ac <__adddf3>
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f7f4 fc32 	bl	8000b38 <__aeabi_dcmpgt>
 800c2d4:	b138      	cbz	r0, 800c2e6 <floor+0x46>
 800c2d6:	2c00      	cmp	r4, #0
 800c2d8:	da57      	bge.n	800c38a <floor+0xea>
 800c2da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c2de:	431d      	orrs	r5, r3
 800c2e0:	d001      	beq.n	800c2e6 <floor+0x46>
 800c2e2:	4c2d      	ldr	r4, [pc, #180]	; (800c398 <floor+0xf8>)
 800c2e4:	2500      	movs	r5, #0
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	e025      	b.n	800c338 <floor+0x98>
 800c2ec:	4f2b      	ldr	r7, [pc, #172]	; (800c39c <floor+0xfc>)
 800c2ee:	4137      	asrs	r7, r6
 800c2f0:	ea01 0307 	and.w	r3, r1, r7
 800c2f4:	4303      	orrs	r3, r0
 800c2f6:	d01f      	beq.n	800c338 <floor+0x98>
 800c2f8:	a325      	add	r3, pc, #148	; (adr r3, 800c390 <floor+0xf0>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	f7f3 ffd5 	bl	80002ac <__adddf3>
 800c302:	2200      	movs	r2, #0
 800c304:	2300      	movs	r3, #0
 800c306:	f7f4 fc17 	bl	8000b38 <__aeabi_dcmpgt>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0eb      	beq.n	800c2e6 <floor+0x46>
 800c30e:	2c00      	cmp	r4, #0
 800c310:	bfbe      	ittt	lt
 800c312:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c316:	fa43 f606 	asrlt.w	r6, r3, r6
 800c31a:	19a4      	addlt	r4, r4, r6
 800c31c:	ea24 0407 	bic.w	r4, r4, r7
 800c320:	2500      	movs	r5, #0
 800c322:	e7e0      	b.n	800c2e6 <floor+0x46>
 800c324:	2e33      	cmp	r6, #51	; 0x33
 800c326:	dd0b      	ble.n	800c340 <floor+0xa0>
 800c328:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c32c:	d104      	bne.n	800c338 <floor+0x98>
 800c32e:	ee10 2a10 	vmov	r2, s0
 800c332:	460b      	mov	r3, r1
 800c334:	f7f3 ffba 	bl	80002ac <__adddf3>
 800c338:	ec41 0b10 	vmov	d0, r0, r1
 800c33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c340:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c344:	f04f 33ff 	mov.w	r3, #4294967295
 800c348:	fa23 f707 	lsr.w	r7, r3, r7
 800c34c:	4207      	tst	r7, r0
 800c34e:	d0f3      	beq.n	800c338 <floor+0x98>
 800c350:	a30f      	add	r3, pc, #60	; (adr r3, 800c390 <floor+0xf0>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	f7f3 ffa9 	bl	80002ac <__adddf3>
 800c35a:	2200      	movs	r2, #0
 800c35c:	2300      	movs	r3, #0
 800c35e:	f7f4 fbeb 	bl	8000b38 <__aeabi_dcmpgt>
 800c362:	2800      	cmp	r0, #0
 800c364:	d0bf      	beq.n	800c2e6 <floor+0x46>
 800c366:	2c00      	cmp	r4, #0
 800c368:	da02      	bge.n	800c370 <floor+0xd0>
 800c36a:	2e14      	cmp	r6, #20
 800c36c:	d103      	bne.n	800c376 <floor+0xd6>
 800c36e:	3401      	adds	r4, #1
 800c370:	ea25 0507 	bic.w	r5, r5, r7
 800c374:	e7b7      	b.n	800c2e6 <floor+0x46>
 800c376:	2301      	movs	r3, #1
 800c378:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c37c:	fa03 f606 	lsl.w	r6, r3, r6
 800c380:	4435      	add	r5, r6
 800c382:	4545      	cmp	r5, r8
 800c384:	bf38      	it	cc
 800c386:	18e4      	addcc	r4, r4, r3
 800c388:	e7f2      	b.n	800c370 <floor+0xd0>
 800c38a:	2500      	movs	r5, #0
 800c38c:	462c      	mov	r4, r5
 800c38e:	e7aa      	b.n	800c2e6 <floor+0x46>
 800c390:	8800759c 	.word	0x8800759c
 800c394:	7e37e43c 	.word	0x7e37e43c
 800c398:	bff00000 	.word	0xbff00000
 800c39c:	000fffff 	.word	0x000fffff

0800c3a0 <scalbn>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	ec55 4b10 	vmov	r4, r5, d0
 800c3a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	b99a      	cbnz	r2, 800c3d8 <scalbn+0x38>
 800c3b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3b4:	4323      	orrs	r3, r4
 800c3b6:	d036      	beq.n	800c426 <scalbn+0x86>
 800c3b8:	4b39      	ldr	r3, [pc, #228]	; (800c4a0 <scalbn+0x100>)
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	ee10 0a10 	vmov	r0, s0
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f7f4 f929 	bl	8000618 <__aeabi_dmul>
 800c3c6:	4b37      	ldr	r3, [pc, #220]	; (800c4a4 <scalbn+0x104>)
 800c3c8:	429e      	cmp	r6, r3
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	460d      	mov	r5, r1
 800c3ce:	da10      	bge.n	800c3f2 <scalbn+0x52>
 800c3d0:	a32b      	add	r3, pc, #172	; (adr r3, 800c480 <scalbn+0xe0>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	e03a      	b.n	800c44e <scalbn+0xae>
 800c3d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c3dc:	428a      	cmp	r2, r1
 800c3de:	d10c      	bne.n	800c3fa <scalbn+0x5a>
 800c3e0:	ee10 2a10 	vmov	r2, s0
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	f7f3 ff60 	bl	80002ac <__adddf3>
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	460d      	mov	r5, r1
 800c3f0:	e019      	b.n	800c426 <scalbn+0x86>
 800c3f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	3a36      	subs	r2, #54	; 0x36
 800c3fa:	4432      	add	r2, r6
 800c3fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c400:	428a      	cmp	r2, r1
 800c402:	dd08      	ble.n	800c416 <scalbn+0x76>
 800c404:	2d00      	cmp	r5, #0
 800c406:	a120      	add	r1, pc, #128	; (adr r1, 800c488 <scalbn+0xe8>)
 800c408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c40c:	da1c      	bge.n	800c448 <scalbn+0xa8>
 800c40e:	a120      	add	r1, pc, #128	; (adr r1, 800c490 <scalbn+0xf0>)
 800c410:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c414:	e018      	b.n	800c448 <scalbn+0xa8>
 800c416:	2a00      	cmp	r2, #0
 800c418:	dd08      	ble.n	800c42c <scalbn+0x8c>
 800c41a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c41e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c426:	ec45 4b10 	vmov	d0, r4, r5
 800c42a:	bd70      	pop	{r4, r5, r6, pc}
 800c42c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c430:	da19      	bge.n	800c466 <scalbn+0xc6>
 800c432:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c436:	429e      	cmp	r6, r3
 800c438:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c43c:	dd0a      	ble.n	800c454 <scalbn+0xb4>
 800c43e:	a112      	add	r1, pc, #72	; (adr r1, 800c488 <scalbn+0xe8>)
 800c440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e2      	bne.n	800c40e <scalbn+0x6e>
 800c448:	a30f      	add	r3, pc, #60	; (adr r3, 800c488 <scalbn+0xe8>)
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	f7f4 f8e3 	bl	8000618 <__aeabi_dmul>
 800c452:	e7cb      	b.n	800c3ec <scalbn+0x4c>
 800c454:	a10a      	add	r1, pc, #40	; (adr r1, 800c480 <scalbn+0xe0>)
 800c456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0b8      	beq.n	800c3d0 <scalbn+0x30>
 800c45e:	a10e      	add	r1, pc, #56	; (adr r1, 800c498 <scalbn+0xf8>)
 800c460:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c464:	e7b4      	b.n	800c3d0 <scalbn+0x30>
 800c466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c46a:	3236      	adds	r2, #54	; 0x36
 800c46c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c470:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c474:	4620      	mov	r0, r4
 800c476:	4b0c      	ldr	r3, [pc, #48]	; (800c4a8 <scalbn+0x108>)
 800c478:	2200      	movs	r2, #0
 800c47a:	e7e8      	b.n	800c44e <scalbn+0xae>
 800c47c:	f3af 8000 	nop.w
 800c480:	c2f8f359 	.word	0xc2f8f359
 800c484:	01a56e1f 	.word	0x01a56e1f
 800c488:	8800759c 	.word	0x8800759c
 800c48c:	7e37e43c 	.word	0x7e37e43c
 800c490:	8800759c 	.word	0x8800759c
 800c494:	fe37e43c 	.word	0xfe37e43c
 800c498:	c2f8f359 	.word	0xc2f8f359
 800c49c:	81a56e1f 	.word	0x81a56e1f
 800c4a0:	43500000 	.word	0x43500000
 800c4a4:	ffff3cb0 	.word	0xffff3cb0
 800c4a8:	3c900000 	.word	0x3c900000

0800c4ac <_init>:
 800c4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ae:	bf00      	nop
 800c4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b2:	bc08      	pop	{r3}
 800c4b4:	469e      	mov	lr, r3
 800c4b6:	4770      	bx	lr

0800c4b8 <_fini>:
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	bf00      	nop
 800c4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4be:	bc08      	pop	{r3}
 800c4c0:	469e      	mov	lr, r3
 800c4c2:	4770      	bx	lr
